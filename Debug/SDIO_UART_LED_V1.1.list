
SDIO_UART_LED_V1.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a4e8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000284  0800a698  0800a698  0001a698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a91c  0800a91c  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  0800a91c  0800a91c  0001a91c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a924  0800a924  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a924  0800a924  0001a924  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a928  0800a928  0001a928  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800a92c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020088  2**0
                  CONTENTS
 10 .bss          000042fc  20000088  20000088  00020088  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004384  20004384  00020088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c92d  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000036a2  00000000  00000000  0003c9e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013c8  00000000  00000000  00040088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001270  00000000  00000000  00041450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002768a  00000000  00000000  000426c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018da6  00000000  00000000  00069d4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e2938  00000000  00000000  00082af0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00165428  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005d54  00000000  00000000  0016547c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000088 	.word	0x20000088
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800a680 	.word	0x0800a680

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000008c 	.word	0x2000008c
 80001ec:	0800a680 	.word	0x0800a680

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__aeabi_d2uiz>:
 8000a3c:	004a      	lsls	r2, r1, #1
 8000a3e:	d211      	bcs.n	8000a64 <__aeabi_d2uiz+0x28>
 8000a40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a44:	d211      	bcs.n	8000a6a <__aeabi_d2uiz+0x2e>
 8000a46:	d50d      	bpl.n	8000a64 <__aeabi_d2uiz+0x28>
 8000a48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a50:	d40e      	bmi.n	8000a70 <__aeabi_d2uiz+0x34>
 8000a52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6e:	d102      	bne.n	8000a76 <__aeabi_d2uiz+0x3a>
 8000a70:	f04f 30ff 	mov.w	r0, #4294967295
 8000a74:	4770      	bx	lr
 8000a76:	f04f 0000 	mov.w	r0, #0
 8000a7a:	4770      	bx	lr

08000a7c <__aeabi_uldivmod>:
 8000a7c:	b953      	cbnz	r3, 8000a94 <__aeabi_uldivmod+0x18>
 8000a7e:	b94a      	cbnz	r2, 8000a94 <__aeabi_uldivmod+0x18>
 8000a80:	2900      	cmp	r1, #0
 8000a82:	bf08      	it	eq
 8000a84:	2800      	cmpeq	r0, #0
 8000a86:	bf1c      	itt	ne
 8000a88:	f04f 31ff 	movne.w	r1, #4294967295
 8000a8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a90:	f000 b96e 	b.w	8000d70 <__aeabi_idiv0>
 8000a94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a9c:	f000 f806 	bl	8000aac <__udivmoddi4>
 8000aa0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aa8:	b004      	add	sp, #16
 8000aaa:	4770      	bx	lr

08000aac <__udivmoddi4>:
 8000aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ab0:	9d08      	ldr	r5, [sp, #32]
 8000ab2:	4604      	mov	r4, r0
 8000ab4:	468c      	mov	ip, r1
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	f040 8083 	bne.w	8000bc2 <__udivmoddi4+0x116>
 8000abc:	428a      	cmp	r2, r1
 8000abe:	4617      	mov	r7, r2
 8000ac0:	d947      	bls.n	8000b52 <__udivmoddi4+0xa6>
 8000ac2:	fab2 f282 	clz	r2, r2
 8000ac6:	b142      	cbz	r2, 8000ada <__udivmoddi4+0x2e>
 8000ac8:	f1c2 0020 	rsb	r0, r2, #32
 8000acc:	fa24 f000 	lsr.w	r0, r4, r0
 8000ad0:	4091      	lsls	r1, r2
 8000ad2:	4097      	lsls	r7, r2
 8000ad4:	ea40 0c01 	orr.w	ip, r0, r1
 8000ad8:	4094      	lsls	r4, r2
 8000ada:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000ade:	0c23      	lsrs	r3, r4, #16
 8000ae0:	fbbc f6f8 	udiv	r6, ip, r8
 8000ae4:	fa1f fe87 	uxth.w	lr, r7
 8000ae8:	fb08 c116 	mls	r1, r8, r6, ip
 8000aec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000af0:	fb06 f10e 	mul.w	r1, r6, lr
 8000af4:	4299      	cmp	r1, r3
 8000af6:	d909      	bls.n	8000b0c <__udivmoddi4+0x60>
 8000af8:	18fb      	adds	r3, r7, r3
 8000afa:	f106 30ff 	add.w	r0, r6, #4294967295
 8000afe:	f080 8119 	bcs.w	8000d34 <__udivmoddi4+0x288>
 8000b02:	4299      	cmp	r1, r3
 8000b04:	f240 8116 	bls.w	8000d34 <__udivmoddi4+0x288>
 8000b08:	3e02      	subs	r6, #2
 8000b0a:	443b      	add	r3, r7
 8000b0c:	1a5b      	subs	r3, r3, r1
 8000b0e:	b2a4      	uxth	r4, r4
 8000b10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b14:	fb08 3310 	mls	r3, r8, r0, r3
 8000b18:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b1c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b20:	45a6      	cmp	lr, r4
 8000b22:	d909      	bls.n	8000b38 <__udivmoddi4+0x8c>
 8000b24:	193c      	adds	r4, r7, r4
 8000b26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b2a:	f080 8105 	bcs.w	8000d38 <__udivmoddi4+0x28c>
 8000b2e:	45a6      	cmp	lr, r4
 8000b30:	f240 8102 	bls.w	8000d38 <__udivmoddi4+0x28c>
 8000b34:	3802      	subs	r0, #2
 8000b36:	443c      	add	r4, r7
 8000b38:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b3c:	eba4 040e 	sub.w	r4, r4, lr
 8000b40:	2600      	movs	r6, #0
 8000b42:	b11d      	cbz	r5, 8000b4c <__udivmoddi4+0xa0>
 8000b44:	40d4      	lsrs	r4, r2
 8000b46:	2300      	movs	r3, #0
 8000b48:	e9c5 4300 	strd	r4, r3, [r5]
 8000b4c:	4631      	mov	r1, r6
 8000b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b52:	b902      	cbnz	r2, 8000b56 <__udivmoddi4+0xaa>
 8000b54:	deff      	udf	#255	; 0xff
 8000b56:	fab2 f282 	clz	r2, r2
 8000b5a:	2a00      	cmp	r2, #0
 8000b5c:	d150      	bne.n	8000c00 <__udivmoddi4+0x154>
 8000b5e:	1bcb      	subs	r3, r1, r7
 8000b60:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b64:	fa1f f887 	uxth.w	r8, r7
 8000b68:	2601      	movs	r6, #1
 8000b6a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000b6e:	0c21      	lsrs	r1, r4, #16
 8000b70:	fb0e 331c 	mls	r3, lr, ip, r3
 8000b74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b78:	fb08 f30c 	mul.w	r3, r8, ip
 8000b7c:	428b      	cmp	r3, r1
 8000b7e:	d907      	bls.n	8000b90 <__udivmoddi4+0xe4>
 8000b80:	1879      	adds	r1, r7, r1
 8000b82:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b86:	d202      	bcs.n	8000b8e <__udivmoddi4+0xe2>
 8000b88:	428b      	cmp	r3, r1
 8000b8a:	f200 80e9 	bhi.w	8000d60 <__udivmoddi4+0x2b4>
 8000b8e:	4684      	mov	ip, r0
 8000b90:	1ac9      	subs	r1, r1, r3
 8000b92:	b2a3      	uxth	r3, r4
 8000b94:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b98:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b9c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ba0:	fb08 f800 	mul.w	r8, r8, r0
 8000ba4:	45a0      	cmp	r8, r4
 8000ba6:	d907      	bls.n	8000bb8 <__udivmoddi4+0x10c>
 8000ba8:	193c      	adds	r4, r7, r4
 8000baa:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bae:	d202      	bcs.n	8000bb6 <__udivmoddi4+0x10a>
 8000bb0:	45a0      	cmp	r8, r4
 8000bb2:	f200 80d9 	bhi.w	8000d68 <__udivmoddi4+0x2bc>
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	eba4 0408 	sub.w	r4, r4, r8
 8000bbc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000bc0:	e7bf      	b.n	8000b42 <__udivmoddi4+0x96>
 8000bc2:	428b      	cmp	r3, r1
 8000bc4:	d909      	bls.n	8000bda <__udivmoddi4+0x12e>
 8000bc6:	2d00      	cmp	r5, #0
 8000bc8:	f000 80b1 	beq.w	8000d2e <__udivmoddi4+0x282>
 8000bcc:	2600      	movs	r6, #0
 8000bce:	e9c5 0100 	strd	r0, r1, [r5]
 8000bd2:	4630      	mov	r0, r6
 8000bd4:	4631      	mov	r1, r6
 8000bd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bda:	fab3 f683 	clz	r6, r3
 8000bde:	2e00      	cmp	r6, #0
 8000be0:	d14a      	bne.n	8000c78 <__udivmoddi4+0x1cc>
 8000be2:	428b      	cmp	r3, r1
 8000be4:	d302      	bcc.n	8000bec <__udivmoddi4+0x140>
 8000be6:	4282      	cmp	r2, r0
 8000be8:	f200 80b8 	bhi.w	8000d5c <__udivmoddi4+0x2b0>
 8000bec:	1a84      	subs	r4, r0, r2
 8000bee:	eb61 0103 	sbc.w	r1, r1, r3
 8000bf2:	2001      	movs	r0, #1
 8000bf4:	468c      	mov	ip, r1
 8000bf6:	2d00      	cmp	r5, #0
 8000bf8:	d0a8      	beq.n	8000b4c <__udivmoddi4+0xa0>
 8000bfa:	e9c5 4c00 	strd	r4, ip, [r5]
 8000bfe:	e7a5      	b.n	8000b4c <__udivmoddi4+0xa0>
 8000c00:	f1c2 0320 	rsb	r3, r2, #32
 8000c04:	fa20 f603 	lsr.w	r6, r0, r3
 8000c08:	4097      	lsls	r7, r2
 8000c0a:	fa01 f002 	lsl.w	r0, r1, r2
 8000c0e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c12:	40d9      	lsrs	r1, r3
 8000c14:	4330      	orrs	r0, r6
 8000c16:	0c03      	lsrs	r3, r0, #16
 8000c18:	fbb1 f6fe 	udiv	r6, r1, lr
 8000c1c:	fa1f f887 	uxth.w	r8, r7
 8000c20:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c24:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c28:	fb06 f108 	mul.w	r1, r6, r8
 8000c2c:	4299      	cmp	r1, r3
 8000c2e:	fa04 f402 	lsl.w	r4, r4, r2
 8000c32:	d909      	bls.n	8000c48 <__udivmoddi4+0x19c>
 8000c34:	18fb      	adds	r3, r7, r3
 8000c36:	f106 3cff 	add.w	ip, r6, #4294967295
 8000c3a:	f080 808d 	bcs.w	8000d58 <__udivmoddi4+0x2ac>
 8000c3e:	4299      	cmp	r1, r3
 8000c40:	f240 808a 	bls.w	8000d58 <__udivmoddi4+0x2ac>
 8000c44:	3e02      	subs	r6, #2
 8000c46:	443b      	add	r3, r7
 8000c48:	1a5b      	subs	r3, r3, r1
 8000c4a:	b281      	uxth	r1, r0
 8000c4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c58:	fb00 f308 	mul.w	r3, r0, r8
 8000c5c:	428b      	cmp	r3, r1
 8000c5e:	d907      	bls.n	8000c70 <__udivmoddi4+0x1c4>
 8000c60:	1879      	adds	r1, r7, r1
 8000c62:	f100 3cff 	add.w	ip, r0, #4294967295
 8000c66:	d273      	bcs.n	8000d50 <__udivmoddi4+0x2a4>
 8000c68:	428b      	cmp	r3, r1
 8000c6a:	d971      	bls.n	8000d50 <__udivmoddi4+0x2a4>
 8000c6c:	3802      	subs	r0, #2
 8000c6e:	4439      	add	r1, r7
 8000c70:	1acb      	subs	r3, r1, r3
 8000c72:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000c76:	e778      	b.n	8000b6a <__udivmoddi4+0xbe>
 8000c78:	f1c6 0c20 	rsb	ip, r6, #32
 8000c7c:	fa03 f406 	lsl.w	r4, r3, r6
 8000c80:	fa22 f30c 	lsr.w	r3, r2, ip
 8000c84:	431c      	orrs	r4, r3
 8000c86:	fa20 f70c 	lsr.w	r7, r0, ip
 8000c8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000c8e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000c92:	fa21 f10c 	lsr.w	r1, r1, ip
 8000c96:	431f      	orrs	r7, r3
 8000c98:	0c3b      	lsrs	r3, r7, #16
 8000c9a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c9e:	fa1f f884 	uxth.w	r8, r4
 8000ca2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ca6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000caa:	fb09 fa08 	mul.w	sl, r9, r8
 8000cae:	458a      	cmp	sl, r1
 8000cb0:	fa02 f206 	lsl.w	r2, r2, r6
 8000cb4:	fa00 f306 	lsl.w	r3, r0, r6
 8000cb8:	d908      	bls.n	8000ccc <__udivmoddi4+0x220>
 8000cba:	1861      	adds	r1, r4, r1
 8000cbc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cc0:	d248      	bcs.n	8000d54 <__udivmoddi4+0x2a8>
 8000cc2:	458a      	cmp	sl, r1
 8000cc4:	d946      	bls.n	8000d54 <__udivmoddi4+0x2a8>
 8000cc6:	f1a9 0902 	sub.w	r9, r9, #2
 8000cca:	4421      	add	r1, r4
 8000ccc:	eba1 010a 	sub.w	r1, r1, sl
 8000cd0:	b2bf      	uxth	r7, r7
 8000cd2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cd6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cda:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000cde:	fb00 f808 	mul.w	r8, r0, r8
 8000ce2:	45b8      	cmp	r8, r7
 8000ce4:	d907      	bls.n	8000cf6 <__udivmoddi4+0x24a>
 8000ce6:	19e7      	adds	r7, r4, r7
 8000ce8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cec:	d22e      	bcs.n	8000d4c <__udivmoddi4+0x2a0>
 8000cee:	45b8      	cmp	r8, r7
 8000cf0:	d92c      	bls.n	8000d4c <__udivmoddi4+0x2a0>
 8000cf2:	3802      	subs	r0, #2
 8000cf4:	4427      	add	r7, r4
 8000cf6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cfa:	eba7 0708 	sub.w	r7, r7, r8
 8000cfe:	fba0 8902 	umull	r8, r9, r0, r2
 8000d02:	454f      	cmp	r7, r9
 8000d04:	46c6      	mov	lr, r8
 8000d06:	4649      	mov	r1, r9
 8000d08:	d31a      	bcc.n	8000d40 <__udivmoddi4+0x294>
 8000d0a:	d017      	beq.n	8000d3c <__udivmoddi4+0x290>
 8000d0c:	b15d      	cbz	r5, 8000d26 <__udivmoddi4+0x27a>
 8000d0e:	ebb3 020e 	subs.w	r2, r3, lr
 8000d12:	eb67 0701 	sbc.w	r7, r7, r1
 8000d16:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d1a:	40f2      	lsrs	r2, r6
 8000d1c:	ea4c 0202 	orr.w	r2, ip, r2
 8000d20:	40f7      	lsrs	r7, r6
 8000d22:	e9c5 2700 	strd	r2, r7, [r5]
 8000d26:	2600      	movs	r6, #0
 8000d28:	4631      	mov	r1, r6
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	462e      	mov	r6, r5
 8000d30:	4628      	mov	r0, r5
 8000d32:	e70b      	b.n	8000b4c <__udivmoddi4+0xa0>
 8000d34:	4606      	mov	r6, r0
 8000d36:	e6e9      	b.n	8000b0c <__udivmoddi4+0x60>
 8000d38:	4618      	mov	r0, r3
 8000d3a:	e6fd      	b.n	8000b38 <__udivmoddi4+0x8c>
 8000d3c:	4543      	cmp	r3, r8
 8000d3e:	d2e5      	bcs.n	8000d0c <__udivmoddi4+0x260>
 8000d40:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d44:	eb69 0104 	sbc.w	r1, r9, r4
 8000d48:	3801      	subs	r0, #1
 8000d4a:	e7df      	b.n	8000d0c <__udivmoddi4+0x260>
 8000d4c:	4608      	mov	r0, r1
 8000d4e:	e7d2      	b.n	8000cf6 <__udivmoddi4+0x24a>
 8000d50:	4660      	mov	r0, ip
 8000d52:	e78d      	b.n	8000c70 <__udivmoddi4+0x1c4>
 8000d54:	4681      	mov	r9, r0
 8000d56:	e7b9      	b.n	8000ccc <__udivmoddi4+0x220>
 8000d58:	4666      	mov	r6, ip
 8000d5a:	e775      	b.n	8000c48 <__udivmoddi4+0x19c>
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	e74a      	b.n	8000bf6 <__udivmoddi4+0x14a>
 8000d60:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d64:	4439      	add	r1, r7
 8000d66:	e713      	b.n	8000b90 <__udivmoddi4+0xe4>
 8000d68:	3802      	subs	r0, #2
 8000d6a:	443c      	add	r4, r7
 8000d6c:	e724      	b.n	8000bb8 <__udivmoddi4+0x10c>
 8000d6e:	bf00      	nop

08000d70 <__aeabi_idiv0>:
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop

08000d74 <ff_getCapacity>:
  * @param	*free_byte :[OUT] kByte of free Capacity
  * @param  *total_byte:[OUT] kByte of total Capacity
  * @retval DRESULT: Operation result
  */
FRESULT ff_getCapacity (const TCHAR* path, DWORD* free_byte, DWORD* total_byte)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b08e      	sub	sp, #56	; 0x38
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	60f8      	str	r0, [r7, #12]
 8000d7c:	60b9      	str	r1, [r7, #8]
 8000d7e:	607a      	str	r2, [r7, #4]
	FRESULT fRes = FR_OK;
 8000d80:	2300      	movs	r3, #0
 8000d82:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	DWORD fre_clust;
	DWORD sect_size = _MIN_SS;
 8000d86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d8a:	633b      	str	r3, [r7, #48]	; 0x30
	double fre_sect, tot_sect, coef;
	FATFS *fs;

    fRes = f_getfree(path, &fre_clust, &fs);
 8000d8c:	f107 0210 	add.w	r2, r7, #16
 8000d90:	f107 0314 	add.w	r3, r7, #20
 8000d94:	4619      	mov	r1, r3
 8000d96:	68f8      	ldr	r0, [r7, #12]
 8000d98:	f008 f991 	bl	80090be <f_getfree>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if (fRes != FR_OK)
 8000da2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d002      	beq.n	8000db0 <ff_getCapacity+0x3c>
    {
    	return fRes;
 8000daa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000dae:	e048      	b.n	8000e42 <ff_getCapacity+0xce>
    }

#if _MAX_SS != _MIN_SS
    sect_size = fs->ssize;
 8000db0:	693b      	ldr	r3, [r7, #16]
 8000db2:	899b      	ldrh	r3, [r3, #12]
 8000db4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

    /* Get total sectors and free sectors */
    tot_sect = (fs->n_fatent - 2) * fs->csize;
 8000db6:	693b      	ldr	r3, [r7, #16]
 8000db8:	699b      	ldr	r3, [r3, #24]
 8000dba:	3b02      	subs	r3, #2
 8000dbc:	693a      	ldr	r2, [r7, #16]
 8000dbe:	8952      	ldrh	r2, [r2, #10]
 8000dc0:	fb02 f303 	mul.w	r3, r2, r3
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff fbad 	bl	8000524 <__aeabi_ui2d>
 8000dca:	4602      	mov	r2, r0
 8000dcc:	460b      	mov	r3, r1
 8000dce:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    fre_sect = fre_clust * fs->csize;
 8000dd2:	693b      	ldr	r3, [r7, #16]
 8000dd4:	895b      	ldrh	r3, [r3, #10]
 8000dd6:	461a      	mov	r2, r3
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	fb03 f302 	mul.w	r3, r3, r2
 8000dde:	4618      	mov	r0, r3
 8000de0:	f7ff fba0 	bl	8000524 <__aeabi_ui2d>
 8000de4:	4602      	mov	r2, r0
 8000de6:	460b      	mov	r3, r1
 8000de8:	e9c7 2308 	strd	r2, r3, [r7, #32]

    coef = ((double)sect_size)/(1024.0);
 8000dec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000dee:	f7ff fb99 	bl	8000524 <__aeabi_ui2d>
 8000df2:	f04f 0200 	mov.w	r2, #0
 8000df6:	4b15      	ldr	r3, [pc, #84]	; (8000e4c <ff_getCapacity+0xd8>)
 8000df8:	f7ff fd38 	bl	800086c <__aeabi_ddiv>
 8000dfc:	4602      	mov	r2, r0
 8000dfe:	460b      	mov	r3, r1
 8000e00:	e9c7 2306 	strd	r2, r3, [r7, #24]

    *total_byte = tot_sect * coef;
 8000e04:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000e08:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8000e0c:	f7ff fc04 	bl	8000618 <__aeabi_dmul>
 8000e10:	4602      	mov	r2, r0
 8000e12:	460b      	mov	r3, r1
 8000e14:	4610      	mov	r0, r2
 8000e16:	4619      	mov	r1, r3
 8000e18:	f7ff fe10 	bl	8000a3c <__aeabi_d2uiz>
 8000e1c:	4602      	mov	r2, r0
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	601a      	str	r2, [r3, #0]
    *free_byte  = fre_sect * coef;
 8000e22:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000e26:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000e2a:	f7ff fbf5 	bl	8000618 <__aeabi_dmul>
 8000e2e:	4602      	mov	r2, r0
 8000e30:	460b      	mov	r3, r1
 8000e32:	4610      	mov	r0, r2
 8000e34:	4619      	mov	r1, r3
 8000e36:	f7ff fe01 	bl	8000a3c <__aeabi_d2uiz>
 8000e3a:	4602      	mov	r2, r0
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	601a      	str	r2, [r3, #0]

    return FR_OK;
 8000e40:	2300      	movs	r3, #0
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	3738      	adds	r7, #56	; 0x38
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	40900000 	.word	0x40900000

08000e50 <ff_scanDisk>:
  *		// ff_scanDisk(path)
  * @param	*path  :[IN]  Start node to be scanned
  * @retval DRESULT: Operation result
  */
FRESULT ff_scanDisk (TCHAR* path)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b090      	sub	sp, #64	; 0x40
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
    DIR dir;
    UINT i;
    static FILINFO fno;


    res = f_opendir(&dir, path);                       	   /* Open the directory */
 8000e58:	f107 0308 	add.w	r3, r7, #8
 8000e5c:	6879      	ldr	r1, [r7, #4]
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f008 f857 	bl	8008f12 <f_opendir>
 8000e64:	4603      	mov	r3, r0
 8000e66:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    if (res == FR_OK) {
 8000e6a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d13e      	bne.n	8000ef0 <ff_scanDisk+0xa0>
        for (;;) {
            res = f_readdir(&dir, &fno);                   /* Read a directory item */
 8000e72:	f107 0308 	add.w	r3, r7, #8
 8000e76:	4921      	ldr	r1, [pc, #132]	; (8000efc <ff_scanDisk+0xac>)
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f008 f8e3 	bl	8009044 <f_readdir>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            if (res != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 8000e84:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d12c      	bne.n	8000ee6 <ff_scanDisk+0x96>
 8000e8c:	4b1b      	ldr	r3, [pc, #108]	; (8000efc <ff_scanDisk+0xac>)
 8000e8e:	7a5b      	ldrb	r3, [r3, #9]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d028      	beq.n	8000ee6 <ff_scanDisk+0x96>
            if (fno.fattrib & AM_DIR) {                    /* It is a directory */
 8000e94:	4b19      	ldr	r3, [pc, #100]	; (8000efc <ff_scanDisk+0xac>)
 8000e96:	7a1b      	ldrb	r3, [r3, #8]
 8000e98:	f003 0310 	and.w	r3, r3, #16
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d01b      	beq.n	8000ed8 <ff_scanDisk+0x88>
                i = strlen(path);
 8000ea0:	6878      	ldr	r0, [r7, #4]
 8000ea2:	f7ff f9a5 	bl	80001f0 <strlen>
 8000ea6:	63b8      	str	r0, [r7, #56]	; 0x38
                sprintf(&path[i], "/%s", fno.fname);
 8000ea8:	687a      	ldr	r2, [r7, #4]
 8000eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000eac:	4413      	add	r3, r2
 8000eae:	4a14      	ldr	r2, [pc, #80]	; (8000f00 <ff_scanDisk+0xb0>)
 8000eb0:	4914      	ldr	r1, [pc, #80]	; (8000f04 <ff_scanDisk+0xb4>)
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f008 fad4 	bl	8009460 <siprintf>
                res = ff_scanDisk(path);                    /* Enter the directory */
 8000eb8:	6878      	ldr	r0, [r7, #4]
 8000eba:	f7ff ffc9 	bl	8000e50 <ff_scanDisk>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                if (res != FR_OK) break;
 8000ec4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d10b      	bne.n	8000ee4 <ff_scanDisk+0x94>
                path[i] = 0;
 8000ecc:	687a      	ldr	r2, [r7, #4]
 8000ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ed0:	4413      	add	r3, r2
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	701a      	strb	r2, [r3, #0]
 8000ed6:	e7cc      	b.n	8000e72 <ff_scanDisk+0x22>
            } else {                                       /* It is a file. */
                printf("%s/%s\n", path, fno.fname);
 8000ed8:	4a09      	ldr	r2, [pc, #36]	; (8000f00 <ff_scanDisk+0xb0>)
 8000eda:	6879      	ldr	r1, [r7, #4]
 8000edc:	480a      	ldr	r0, [pc, #40]	; (8000f08 <ff_scanDisk+0xb8>)
 8000ede:	f008 fa31 	bl	8009344 <iprintf>
            res = f_readdir(&dir, &fno);                   /* Read a directory item */
 8000ee2:	e7c6      	b.n	8000e72 <ff_scanDisk+0x22>
                if (res != FR_OK) break;
 8000ee4:	bf00      	nop
            }
        }
        f_closedir(&dir);
 8000ee6:	f107 0308 	add.w	r3, r7, #8
 8000eea:	4618      	mov	r0, r3
 8000eec:	f008 f884 	bl	8008ff8 <f_closedir>
    }

    return res;
 8000ef0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	3740      	adds	r7, #64	; 0x40
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	200000a4 	.word	0x200000a4
 8000f00:	200000ad 	.word	0x200000ad
 8000f04:	0800a698 	.word	0x0800a698
 8000f08:	0800a69c 	.word	0x0800a69c

08000f0c <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b084      	sub	sp, #16
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	60f8      	str	r0, [r7, #12]
 8000f14:	60b9      	str	r1, [r7, #8]
 8000f16:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)ptr, len, 100);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	b29a      	uxth	r2, r3
 8000f1c:	2364      	movs	r3, #100	; 0x64
 8000f1e:	68b9      	ldr	r1, [r7, #8]
 8000f20:	4803      	ldr	r0, [pc, #12]	; (8000f30 <_write+0x24>)
 8000f22:	f004 f8f0 	bl	8005106 <HAL_UART_Transmit>
	return len;
 8000f26:	687b      	ldr	r3, [r7, #4]
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	3710      	adds	r7, #16
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	20001194 	.word	0x20001194

08000f34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	f5ad 5d85 	sub.w	sp, sp, #4256	; 0x10a0
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f3e:	f000 ff83 	bl	8001e48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f42:	f000 f8fb 	bl	800113c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f46:	f000 f9e5 	bl	8001314 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f4a:	f000 f9bb 	bl	80012c4 <MX_DMA_Init>
  MX_SDIO_SD_Init();
 8000f4e:	f000 f95f 	bl	8001210 <MX_SDIO_SD_Init>
  MX_USART1_UART_Init();
 8000f52:	f000 f98d 	bl	8001270 <MX_USART1_UART_Init>
  MX_FATFS_Init();
 8000f56:	f005 f913 	bl	8006180 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(5000);
 8000f5a:	f241 3088 	movw	r0, #5000	; 0x1388
 8000f5e:	f000 ffb5 	bl	8001ecc <HAL_Delay>
  FRESULT fRes;

  FATFS sdFat;
  fRes = f_mount(&sdFat, "0:", 1);
 8000f62:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000f66:	3b18      	subs	r3, #24
 8000f68:	2201      	movs	r2, #1
 8000f6a:	4968      	ldr	r1, [pc, #416]	; (800110c <main+0x1d8>)
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f006 ffff 	bl	8007f70 <f_mount>
 8000f72:	4603      	mov	r3, r0
 8000f74:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 8000f78:	f102 020f 	add.w	r2, r2, #15
 8000f7c:	7013      	strb	r3, [r2, #0]

  if (fRes == FR_OK)
 8000f7e:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8000f82:	f103 030f 	add.w	r3, r3, #15
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	f040 80ab 	bne.w	80010e4 <main+0x1b0>
  {
	  printf("sd card disk mount ok...\r\n");
 8000f8e:	4860      	ldr	r0, [pc, #384]	; (8001110 <main+0x1dc>)
 8000f90:	f008 fa5e 	bl	8009450 <puts>
	  HAL_GPIO_TogglePin(LD2_Green_GPIO_Port, LD2_Green_Pin);
 8000f94:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f98:	485e      	ldr	r0, [pc, #376]	; (8001114 <main+0x1e0>)
 8000f9a:	f001 fe00 	bl	8002b9e <HAL_GPIO_TogglePin>

	  DWORD free_byte[1], total_byte[1];
	  fRes = ff_getCapacity("0:", free_byte, total_byte);
 8000f9e:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8000fa2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000fa6:	3b1c      	subs	r3, #28
 8000fa8:	4619      	mov	r1, r3
 8000faa:	4858      	ldr	r0, [pc, #352]	; (800110c <main+0x1d8>)
 8000fac:	f7ff fee2 	bl	8000d74 <ff_getCapacity>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 8000fb6:	f102 020f 	add.w	r2, r2, #15
 8000fba:	7013      	strb	r3, [r2, #0]
	  if (fRes == FR_OK)
 8000fbc:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8000fc0:	f103 030f 	add.w	r3, r3, #15
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d12f      	bne.n	800102a <main+0xf6>
	  {
		  printf("get capacity is succeed..\r\n");
 8000fca:	4853      	ldr	r0, [pc, #332]	; (8001118 <main+0x1e4>)
 8000fcc:	f008 fa40 	bl	8009450 <puts>
		  printf("total Capacity : %ld KByte\r\nfree  Capacity : %ld KByte\r\n",total_byte[0], free_byte[0]);
 8000fd0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000fd4:	6819      	ldr	r1, [r3, #0]
 8000fd6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000fda:	3b1c      	subs	r3, #28
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	461a      	mov	r2, r3
 8000fe0:	484e      	ldr	r0, [pc, #312]	; (800111c <main+0x1e8>)
 8000fe2:	f008 f9af 	bl	8009344 <iprintf>

		  TCHAR path[100] = "0:";
 8000fe6:	f107 0310 	add.w	r3, r7, #16
 8000fea:	3b0c      	subs	r3, #12
 8000fec:	f643 2230 	movw	r2, #14896	; 0x3a30
 8000ff0:	601a      	str	r2, [r3, #0]
 8000ff2:	3304      	adds	r3, #4
 8000ff4:	2260      	movs	r2, #96	; 0x60
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f008 f99b 	bl	8009334 <memset>
		  fRes = ff_scanDisk(path);
 8000ffe:	f107 0310 	add.w	r3, r7, #16
 8001002:	3b0c      	subs	r3, #12
 8001004:	4618      	mov	r0, r3
 8001006:	f7ff ff23 	bl	8000e50 <ff_scanDisk>
 800100a:	4603      	mov	r3, r0
 800100c:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 8001010:	f102 020f 	add.w	r2, r2, #15
 8001014:	7013      	strb	r3, [r2, #0]
		  if (fRes == FR_OK)
 8001016:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 800101a:	f103 030f 	add.w	r3, r3, #15
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d102      	bne.n	800102a <main+0xf6>
			  printf("-----scan over-----\r\n");
 8001024:	483e      	ldr	r0, [pc, #248]	; (8001120 <main+0x1ec>)
 8001026:	f008 fa13 	bl	8009450 <puts>
	  }

	  fRes = f_open(&fp, "0:FIRST.TXT", FA_OPEN_ALWAYS|FA_WRITE|FA_READ);
 800102a:	2213      	movs	r2, #19
 800102c:	493d      	ldr	r1, [pc, #244]	; (8001124 <main+0x1f0>)
 800102e:	483e      	ldr	r0, [pc, #248]	; (8001128 <main+0x1f4>)
 8001030:	f006 ffe4 	bl	8007ffc <f_open>
 8001034:	4603      	mov	r3, r0
 8001036:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 800103a:	f102 020f 	add.w	r2, r2, #15
 800103e:	7013      	strb	r3, [r2, #0]

	  fRes = f_lseek(&fp, 0);
 8001040:	2100      	movs	r1, #0
 8001042:	4839      	ldr	r0, [pc, #228]	; (8001128 <main+0x1f4>)
 8001044:	f007 fd41 	bl	8008aca <f_lseek>
 8001048:	4603      	mov	r3, r0
 800104a:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 800104e:	f102 020f 	add.w	r2, r2, #15
 8001052:	7013      	strb	r3, [r2, #0]

	  UINT br[1];
	  uint8_t buff[100];
	  fRes = f_read(&fp, buff, f_size(&fp), br);
 8001054:	4b34      	ldr	r3, [pc, #208]	; (8001128 <main+0x1f4>)
 8001056:	68da      	ldr	r2, [r3, #12]
 8001058:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800105c:	3b04      	subs	r3, #4
 800105e:	f107 0110 	add.w	r1, r7, #16
 8001062:	390c      	subs	r1, #12
 8001064:	4830      	ldr	r0, [pc, #192]	; (8001128 <main+0x1f4>)
 8001066:	f007 f995 	bl	8008394 <f_read>
 800106a:	4603      	mov	r3, r0
 800106c:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 8001070:	f102 020f 	add.w	r2, r2, #15
 8001074:	7013      	strb	r3, [r2, #0]

	  UINT bw[1];
	  fRes = f_lseek(&fp, f_size(&fp));
 8001076:	4b2c      	ldr	r3, [pc, #176]	; (8001128 <main+0x1f4>)
 8001078:	68db      	ldr	r3, [r3, #12]
 800107a:	4619      	mov	r1, r3
 800107c:	482a      	ldr	r0, [pc, #168]	; (8001128 <main+0x1f4>)
 800107e:	f007 fd24 	bl	8008aca <f_lseek>
 8001082:	4603      	mov	r3, r0
 8001084:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 8001088:	f102 020f 	add.w	r2, r2, #15
 800108c:	7013      	strb	r3, [r2, #0]
	  fRes = f_write(&fp, "123456", 7, bw);
 800108e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001092:	3b08      	subs	r3, #8
 8001094:	2207      	movs	r2, #7
 8001096:	4925      	ldr	r1, [pc, #148]	; (800112c <main+0x1f8>)
 8001098:	4823      	ldr	r0, [pc, #140]	; (8001128 <main+0x1f4>)
 800109a:	f007 fada 	bl	8008652 <f_write>
 800109e:	4603      	mov	r3, r0
 80010a0:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 80010a4:	f102 020f 	add.w	r2, r2, #15
 80010a8:	7013      	strb	r3, [r2, #0]

	  (fRes == FR_OK)? printf("scan sd disk ok...\r\n"): printf("scan sd disk error...\r\n");
 80010aa:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 80010ae:	f103 030f 	add.w	r3, r3, #15
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d103      	bne.n	80010c0 <main+0x18c>
 80010b8:	481d      	ldr	r0, [pc, #116]	; (8001130 <main+0x1fc>)
 80010ba:	f008 f943 	bl	8009344 <iprintf>
 80010be:	e002      	b.n	80010c6 <main+0x192>
 80010c0:	481c      	ldr	r0, [pc, #112]	; (8001134 <main+0x200>)
 80010c2:	f008 f93f 	bl	8009344 <iprintf>

	  fRes = f_close(&fp);
 80010c6:	4818      	ldr	r0, [pc, #96]	; (8001128 <main+0x1f4>)
 80010c8:	f007 fcd5 	bl	8008a76 <f_close>
 80010cc:	4603      	mov	r3, r0
 80010ce:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 80010d2:	f102 020f 	add.w	r2, r2, #15
 80010d6:	7013      	strb	r3, [r2, #0]

	  f_mount(NULL, "0:", 1);
 80010d8:	2201      	movs	r2, #1
 80010da:	490c      	ldr	r1, [pc, #48]	; (800110c <main+0x1d8>)
 80010dc:	2000      	movs	r0, #0
 80010de:	f006 ff47 	bl	8007f70 <f_mount>
 80010e2:	e008      	b.n	80010f6 <main+0x1c2>
  }
  else
	  printf("error code : %d\r\n", fRes);
 80010e4:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 80010e8:	f103 030f 	add.w	r3, r3, #15
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	4619      	mov	r1, r3
 80010f0:	4811      	ldr	r0, [pc, #68]	; (8001138 <main+0x204>)
 80010f2:	f008 f927 	bl	8009344 <iprintf>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(LD3_Blue_GPIO_Port, LD3_Blue_Pin);
 80010f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010fa:	4806      	ldr	r0, [pc, #24]	; (8001114 <main+0x1e0>)
 80010fc:	f001 fd4f 	bl	8002b9e <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8001100:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001104:	f000 fee2 	bl	8001ecc <HAL_Delay>
	  HAL_GPIO_TogglePin(LD3_Blue_GPIO_Port, LD3_Blue_Pin);
 8001108:	e7f5      	b.n	80010f6 <main+0x1c2>
 800110a:	bf00      	nop
 800110c:	0800a6a4 	.word	0x0800a6a4
 8001110:	0800a6a8 	.word	0x0800a6a8
 8001114:	40021c00 	.word	0x40021c00
 8001118:	0800a6c4 	.word	0x0800a6c4
 800111c:	0800a6e0 	.word	0x0800a6e0
 8001120:	0800a71c 	.word	0x0800a71c
 8001124:	0800a734 	.word	0x0800a734
 8001128:	20000164 	.word	0x20000164
 800112c:	0800a740 	.word	0x0800a740
 8001130:	0800a748 	.word	0x0800a748
 8001134:	0800a760 	.word	0x0800a760
 8001138:	0800a778 	.word	0x0800a778

0800113c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b094      	sub	sp, #80	; 0x50
 8001140:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001142:	f107 0320 	add.w	r3, r7, #32
 8001146:	2230      	movs	r2, #48	; 0x30
 8001148:	2100      	movs	r1, #0
 800114a:	4618      	mov	r0, r3
 800114c:	f008 f8f2 	bl	8009334 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001150:	f107 030c 	add.w	r3, r7, #12
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	605a      	str	r2, [r3, #4]
 800115a:	609a      	str	r2, [r3, #8]
 800115c:	60da      	str	r2, [r3, #12]
 800115e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001160:	2300      	movs	r3, #0
 8001162:	60bb      	str	r3, [r7, #8]
 8001164:	4b28      	ldr	r3, [pc, #160]	; (8001208 <SystemClock_Config+0xcc>)
 8001166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001168:	4a27      	ldr	r2, [pc, #156]	; (8001208 <SystemClock_Config+0xcc>)
 800116a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800116e:	6413      	str	r3, [r2, #64]	; 0x40
 8001170:	4b25      	ldr	r3, [pc, #148]	; (8001208 <SystemClock_Config+0xcc>)
 8001172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001174:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001178:	60bb      	str	r3, [r7, #8]
 800117a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800117c:	2300      	movs	r3, #0
 800117e:	607b      	str	r3, [r7, #4]
 8001180:	4b22      	ldr	r3, [pc, #136]	; (800120c <SystemClock_Config+0xd0>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a21      	ldr	r2, [pc, #132]	; (800120c <SystemClock_Config+0xd0>)
 8001186:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800118a:	6013      	str	r3, [r2, #0]
 800118c:	4b1f      	ldr	r3, [pc, #124]	; (800120c <SystemClock_Config+0xd0>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001194:	607b      	str	r3, [r7, #4]
 8001196:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001198:	2301      	movs	r3, #1
 800119a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800119c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011a0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011a2:	2302      	movs	r3, #2
 80011a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80011aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80011ac:	2319      	movs	r3, #25
 80011ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80011b0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80011b4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011b6:	2302      	movs	r3, #2
 80011b8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80011ba:	2307      	movs	r3, #7
 80011bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011be:	f107 0320 	add.w	r3, r7, #32
 80011c2:	4618      	mov	r0, r3
 80011c4:	f001 fd06 	bl	8002bd4 <HAL_RCC_OscConfig>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80011ce:	f000 f939 	bl	8001444 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011d2:	230f      	movs	r3, #15
 80011d4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011d6:	2302      	movs	r3, #2
 80011d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011da:	2300      	movs	r3, #0
 80011dc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80011de:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80011e2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80011e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011e8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80011ea:	f107 030c 	add.w	r3, r7, #12
 80011ee:	2105      	movs	r1, #5
 80011f0:	4618      	mov	r0, r3
 80011f2:	f001 ff67 	bl	80030c4 <HAL_RCC_ClockConfig>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80011fc:	f000 f922 	bl	8001444 <Error_Handler>
  }
}
 8001200:	bf00      	nop
 8001202:	3750      	adds	r7, #80	; 0x50
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	40023800 	.word	0x40023800
 800120c:	40007000 	.word	0x40007000

08001210 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8001214:	4b14      	ldr	r3, [pc, #80]	; (8001268 <MX_SDIO_SD_Init+0x58>)
 8001216:	4a15      	ldr	r2, [pc, #84]	; (800126c <MX_SDIO_SD_Init+0x5c>)
 8001218:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800121a:	4b13      	ldr	r3, [pc, #76]	; (8001268 <MX_SDIO_SD_Init+0x58>)
 800121c:	2200      	movs	r2, #0
 800121e:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8001220:	4b11      	ldr	r3, [pc, #68]	; (8001268 <MX_SDIO_SD_Init+0x58>)
 8001222:	2200      	movs	r2, #0
 8001224:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001226:	4b10      	ldr	r3, [pc, #64]	; (8001268 <MX_SDIO_SD_Init+0x58>)
 8001228:	2200      	movs	r2, #0
 800122a:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 800122c:	4b0e      	ldr	r3, [pc, #56]	; (8001268 <MX_SDIO_SD_Init+0x58>)
 800122e:	2200      	movs	r2, #0
 8001230:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001232:	4b0d      	ldr	r3, [pc, #52]	; (8001268 <MX_SDIO_SD_Init+0x58>)
 8001234:	2200      	movs	r2, #0
 8001236:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8001238:	4b0b      	ldr	r3, [pc, #44]	; (8001268 <MX_SDIO_SD_Init+0x58>)
 800123a:	2200      	movs	r2, #0
 800123c:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd) != HAL_OK)
 800123e:	480a      	ldr	r0, [pc, #40]	; (8001268 <MX_SDIO_SD_Init+0x58>)
 8001240:	f002 f942 	bl	80034c8 <HAL_SD_Init>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <MX_SDIO_SD_Init+0x3e>
  {
    Error_Handler();
 800124a:	f000 f8fb 	bl	8001444 <Error_Handler>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800124e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001252:	4805      	ldr	r0, [pc, #20]	; (8001268 <MX_SDIO_SD_Init+0x58>)
 8001254:	f002 ff04 	bl	8004060 <HAL_SD_ConfigWideBusOperation>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_SDIO_SD_Init+0x52>
  {
    Error_Handler();
 800125e:	f000 f8f1 	bl	8001444 <Error_Handler>
  }
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8001262:	bf00      	nop
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	20001238 	.word	0x20001238
 800126c:	40012c00 	.word	0x40012c00

08001270 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001274:	4b11      	ldr	r3, [pc, #68]	; (80012bc <MX_USART1_UART_Init+0x4c>)
 8001276:	4a12      	ldr	r2, [pc, #72]	; (80012c0 <MX_USART1_UART_Init+0x50>)
 8001278:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800127a:	4b10      	ldr	r3, [pc, #64]	; (80012bc <MX_USART1_UART_Init+0x4c>)
 800127c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001280:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001282:	4b0e      	ldr	r3, [pc, #56]	; (80012bc <MX_USART1_UART_Init+0x4c>)
 8001284:	2200      	movs	r2, #0
 8001286:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001288:	4b0c      	ldr	r3, [pc, #48]	; (80012bc <MX_USART1_UART_Init+0x4c>)
 800128a:	2200      	movs	r2, #0
 800128c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800128e:	4b0b      	ldr	r3, [pc, #44]	; (80012bc <MX_USART1_UART_Init+0x4c>)
 8001290:	2200      	movs	r2, #0
 8001292:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001294:	4b09      	ldr	r3, [pc, #36]	; (80012bc <MX_USART1_UART_Init+0x4c>)
 8001296:	220c      	movs	r2, #12
 8001298:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800129a:	4b08      	ldr	r3, [pc, #32]	; (80012bc <MX_USART1_UART_Init+0x4c>)
 800129c:	2200      	movs	r2, #0
 800129e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012a0:	4b06      	ldr	r3, [pc, #24]	; (80012bc <MX_USART1_UART_Init+0x4c>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80012a6:	4805      	ldr	r0, [pc, #20]	; (80012bc <MX_USART1_UART_Init+0x4c>)
 80012a8:	f003 fee0 	bl	800506c <HAL_UART_Init>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80012b2:	f000 f8c7 	bl	8001444 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80012b6:	bf00      	nop
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	20001194 	.word	0x20001194
 80012c0:	40011000 	.word	0x40011000

080012c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	607b      	str	r3, [r7, #4]
 80012ce:	4b10      	ldr	r3, [pc, #64]	; (8001310 <MX_DMA_Init+0x4c>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	4a0f      	ldr	r2, [pc, #60]	; (8001310 <MX_DMA_Init+0x4c>)
 80012d4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80012d8:	6313      	str	r3, [r2, #48]	; 0x30
 80012da:	4b0d      	ldr	r3, [pc, #52]	; (8001310 <MX_DMA_Init+0x4c>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012e2:	607b      	str	r3, [r7, #4]
 80012e4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80012e6:	2200      	movs	r2, #0
 80012e8:	2100      	movs	r1, #0
 80012ea:	203b      	movs	r0, #59	; 0x3b
 80012ec:	f000 feca 	bl	8002084 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80012f0:	203b      	movs	r0, #59	; 0x3b
 80012f2:	f000 fee3 	bl	80020bc <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80012f6:	2200      	movs	r2, #0
 80012f8:	2100      	movs	r1, #0
 80012fa:	2045      	movs	r0, #69	; 0x45
 80012fc:	f000 fec2 	bl	8002084 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001300:	2045      	movs	r0, #69	; 0x45
 8001302:	f000 fedb 	bl	80020bc <HAL_NVIC_EnableIRQ>

}
 8001306:	bf00      	nop
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	40023800 	.word	0x40023800

08001314 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b08a      	sub	sp, #40	; 0x28
 8001318:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800131a:	f107 0314 	add.w	r3, r7, #20
 800131e:	2200      	movs	r2, #0
 8001320:	601a      	str	r2, [r3, #0]
 8001322:	605a      	str	r2, [r3, #4]
 8001324:	609a      	str	r2, [r3, #8]
 8001326:	60da      	str	r2, [r3, #12]
 8001328:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800132a:	2300      	movs	r3, #0
 800132c:	613b      	str	r3, [r7, #16]
 800132e:	4b39      	ldr	r3, [pc, #228]	; (8001414 <MX_GPIO_Init+0x100>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	4a38      	ldr	r2, [pc, #224]	; (8001414 <MX_GPIO_Init+0x100>)
 8001334:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001338:	6313      	str	r3, [r2, #48]	; 0x30
 800133a:	4b36      	ldr	r3, [pc, #216]	; (8001414 <MX_GPIO_Init+0x100>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001342:	613b      	str	r3, [r7, #16]
 8001344:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001346:	2300      	movs	r3, #0
 8001348:	60fb      	str	r3, [r7, #12]
 800134a:	4b32      	ldr	r3, [pc, #200]	; (8001414 <MX_GPIO_Init+0x100>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134e:	4a31      	ldr	r2, [pc, #196]	; (8001414 <MX_GPIO_Init+0x100>)
 8001350:	f043 0302 	orr.w	r3, r3, #2
 8001354:	6313      	str	r3, [r2, #48]	; 0x30
 8001356:	4b2f      	ldr	r3, [pc, #188]	; (8001414 <MX_GPIO_Init+0x100>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135a:	f003 0302 	and.w	r3, r3, #2
 800135e:	60fb      	str	r3, [r7, #12]
 8001360:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001362:	2300      	movs	r3, #0
 8001364:	60bb      	str	r3, [r7, #8]
 8001366:	4b2b      	ldr	r3, [pc, #172]	; (8001414 <MX_GPIO_Init+0x100>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136a:	4a2a      	ldr	r2, [pc, #168]	; (8001414 <MX_GPIO_Init+0x100>)
 800136c:	f043 0304 	orr.w	r3, r3, #4
 8001370:	6313      	str	r3, [r2, #48]	; 0x30
 8001372:	4b28      	ldr	r3, [pc, #160]	; (8001414 <MX_GPIO_Init+0x100>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001376:	f003 0304 	and.w	r3, r3, #4
 800137a:	60bb      	str	r3, [r7, #8]
 800137c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800137e:	2300      	movs	r3, #0
 8001380:	607b      	str	r3, [r7, #4]
 8001382:	4b24      	ldr	r3, [pc, #144]	; (8001414 <MX_GPIO_Init+0x100>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001386:	4a23      	ldr	r2, [pc, #140]	; (8001414 <MX_GPIO_Init+0x100>)
 8001388:	f043 0301 	orr.w	r3, r3, #1
 800138c:	6313      	str	r3, [r2, #48]	; 0x30
 800138e:	4b21      	ldr	r3, [pc, #132]	; (8001414 <MX_GPIO_Init+0x100>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001392:	f003 0301 	and.w	r3, r3, #1
 8001396:	607b      	str	r3, [r7, #4]
 8001398:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800139a:	2300      	movs	r3, #0
 800139c:	603b      	str	r3, [r7, #0]
 800139e:	4b1d      	ldr	r3, [pc, #116]	; (8001414 <MX_GPIO_Init+0x100>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a2:	4a1c      	ldr	r2, [pc, #112]	; (8001414 <MX_GPIO_Init+0x100>)
 80013a4:	f043 0308 	orr.w	r3, r3, #8
 80013a8:	6313      	str	r3, [r2, #48]	; 0x30
 80013aa:	4b1a      	ldr	r3, [pc, #104]	; (8001414 <MX_GPIO_Init+0x100>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ae:	f003 0308 	and.w	r3, r3, #8
 80013b2:	603b      	str	r3, [r7, #0]
 80013b4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LD1_Red_Pin|LD2_Green_Pin|LD3_Blue_Pin, GPIO_PIN_SET);
 80013b6:	2201      	movs	r2, #1
 80013b8:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 80013bc:	4816      	ldr	r0, [pc, #88]	; (8001418 <MX_GPIO_Init+0x104>)
 80013be:	f001 fbd5 	bl	8002b6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WIFI_EN_GPIO_Port, WIFI_EN_Pin, GPIO_PIN_RESET);
 80013c2:	2200      	movs	r2, #0
 80013c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013c8:	4814      	ldr	r0, [pc, #80]	; (800141c <MX_GPIO_Init+0x108>)
 80013ca:	f001 fbcf 	bl	8002b6c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD1_Red_Pin LD2_Green_Pin LD3_Blue_Pin */
  GPIO_InitStruct.Pin = LD1_Red_Pin|LD2_Green_Pin|LD3_Blue_Pin;
 80013ce:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80013d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d4:	2301      	movs	r3, #1
 80013d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d8:	2300      	movs	r3, #0
 80013da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013dc:	2300      	movs	r3, #0
 80013de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80013e0:	f107 0314 	add.w	r3, r7, #20
 80013e4:	4619      	mov	r1, r3
 80013e6:	480c      	ldr	r0, [pc, #48]	; (8001418 <MX_GPIO_Init+0x104>)
 80013e8:	f001 fa14 	bl	8002814 <HAL_GPIO_Init>

  /*Configure GPIO pin : WIFI_EN_Pin */
  GPIO_InitStruct.Pin = WIFI_EN_Pin;
 80013ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013f2:	2301      	movs	r3, #1
 80013f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f6:	2300      	movs	r3, #0
 80013f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fa:	2300      	movs	r3, #0
 80013fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(WIFI_EN_GPIO_Port, &GPIO_InitStruct);
 80013fe:	f107 0314 	add.w	r3, r7, #20
 8001402:	4619      	mov	r1, r3
 8001404:	4805      	ldr	r0, [pc, #20]	; (800141c <MX_GPIO_Init+0x108>)
 8001406:	f001 fa05 	bl	8002814 <HAL_GPIO_Init>

}
 800140a:	bf00      	nop
 800140c:	3728      	adds	r7, #40	; 0x28
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	40023800 	.word	0x40023800
 8001418:	40021c00 	.word	0x40021c00
 800141c:	40020400 	.word	0x40020400

08001420 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a04      	ldr	r2, [pc, #16]	; (8001440 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d101      	bne.n	8001436 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001432:	f000 fd2b 	bl	8001e8c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001436:	bf00      	nop
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	40001400 	.word	0x40001400

08001444 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	HAL_GPIO_TogglePin(LD1_Red_GPIO_Port, LD1_Red_Pin);
 8001448:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800144c:	4802      	ldr	r0, [pc, #8]	; (8001458 <Error_Handler+0x14>)
 800144e:	f001 fba6 	bl	8002b9e <HAL_GPIO_TogglePin>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001452:	b672      	cpsid	i
}
 8001454:	bf00      	nop
  __disable_irq();
  while (1)
 8001456:	e7fe      	b.n	8001456 <Error_Handler+0x12>
 8001458:	40021c00 	.word	0x40021c00

0800145c <SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
static uint8_t SD_IsDetected(void)
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
	__IO uint8_t status = SD_PRESENT;
 8001462:	2301      	movs	r3, #1
 8001464:	71fb      	strb	r3, [r7, #7]
#if defined(ENABLE_SD_DETECT)
	if (HAL_GPIO_ReadPin(SD_DETECT_Port, SD_DETECT_Pin) != GPIO_PIN_RESET)
		status = SD_NOT_PRESENT;
#endif /* ENABLE_SD_DETECT */

  return status;
 8001466:	79fb      	ldrb	r3, [r7, #7]
 8001468:	b2db      	uxtb	r3, r3
}
 800146a:	4618      	mov	r0, r3
 800146c:	370c      	adds	r7, #12
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
	...

08001478 <SD_Init>:
/**
  * @brief  Initializes the SD card device use HAL library.
  * @retval SD status
  */
static uint8_t SD_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800147e:	2300      	movs	r3, #0
 8001480:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (SD_IsDetected() != SD_PRESENT)
 8001482:	f7ff ffeb 	bl	800145c <SD_IsDetected>
 8001486:	4603      	mov	r3, r0
 8001488:	2b01      	cmp	r3, #1
 800148a:	d001      	beq.n	8001490 <SD_Init+0x18>
  {
    return MSD_ERROR;
 800148c:	2301      	movs	r3, #1
 800148e:	e015      	b.n	80014bc <SD_Init+0x44>
  }

  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8001490:	480c      	ldr	r0, [pc, #48]	; (80014c4 <SD_Init+0x4c>)
 8001492:	f002 f819 	bl	80034c8 <HAL_SD_Init>
 8001496:	4603      	mov	r3, r0
 8001498:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800149a:	79fb      	ldrb	r3, [r7, #7]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d10a      	bne.n	80014b6 <SD_Init+0x3e>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != MSD_OK)
 80014a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014a4:	4807      	ldr	r0, [pc, #28]	; (80014c4 <SD_Init+0x4c>)
 80014a6:	f002 fddb 	bl	8004060 <HAL_SD_ConfigWideBusOperation>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d004      	beq.n	80014ba <SD_Init+0x42>
    {
      sd_state = MSD_ERROR;
 80014b0:	2301      	movs	r3, #1
 80014b2:	71fb      	strb	r3, [r7, #7]
 80014b4:	e001      	b.n	80014ba <SD_Init+0x42>
    }
  }
  else
  {
	  sd_state = MSD_ERROR;
 80014b6:	2301      	movs	r3, #1
 80014b8:	71fb      	strb	r3, [r7, #7]
  }

  return sd_state;
 80014ba:	79fb      	ldrb	r3, [r7, #7]
}
 80014bc:	4618      	mov	r0, r3
 80014be:	3708      	adds	r7, #8
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	20001238 	.word	0x20001238

080014c8 <SD_CheckStatus>:
/**
  * @brief check sd card status use HAL_SD_GetCardState()
  * @retval DSTATUS: Operation status
  */
static DSTATUS SD_CheckStatus(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0

	Stat = STA_NOINIT;
 80014ce:	4b0f      	ldr	r3, [pc, #60]	; (800150c <SD_CheckStatus+0x44>)
 80014d0:	2201      	movs	r2, #1
 80014d2:	701a      	strb	r2, [r3, #0]

	uint8_t cardState = ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ?
 80014d4:	480e      	ldr	r0, [pc, #56]	; (8001510 <SD_CheckStatus+0x48>)
 80014d6:	f002 fe5d 	bl	8004194 <HAL_SD_GetCardState>
 80014da:	4603      	mov	r3, r0
														SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80014dc:	2b04      	cmp	r3, #4
 80014de:	bf14      	ite	ne
 80014e0:	2301      	movne	r3, #1
 80014e2:	2300      	moveq	r3, #0
 80014e4:	b2db      	uxtb	r3, r3
	uint8_t cardState = ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ?
 80014e6:	71fb      	strb	r3, [r7, #7]

	if(cardState == MSD_OK)
 80014e8:	79fb      	ldrb	r3, [r7, #7]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d107      	bne.n	80014fe <SD_CheckStatus+0x36>
	{
		Stat &= ~STA_NOINIT;
 80014ee:	4b07      	ldr	r3, [pc, #28]	; (800150c <SD_CheckStatus+0x44>)
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	b2db      	uxtb	r3, r3
 80014f4:	f023 0301 	bic.w	r3, r3, #1
 80014f8:	b2da      	uxtb	r2, r3
 80014fa:	4b04      	ldr	r3, [pc, #16]	; (800150c <SD_CheckStatus+0x44>)
 80014fc:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 80014fe:	4b03      	ldr	r3, [pc, #12]	; (800150c <SD_CheckStatus+0x44>)
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	b2db      	uxtb	r3, r3
}
 8001504:	4618      	mov	r0, r3
 8001506:	3708      	adds	r7, #8
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	20000000 	.word	0x20000000
 8001510:	20001238 	.word	0x20001238

08001514 <SD_CheckStatusWithTimeout>:
  * @brief check status and wait time,used DMA read and write
  * @param timeout: max wait time value
  * @retval int 0:ok /-1:error
  */
static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b084      	sub	sp, #16
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
	uint32_t timer = HAL_GetTick();
 800151c:	f000 fcca 	bl	8001eb4 <HAL_GetTick>
 8001520:	60f8      	str	r0, [r7, #12]
	/* block until SDIO IP is ready again or a timeout occur */
	while(HAL_GetTick() - timer < timeout)
 8001522:	e00e      	b.n	8001542 <SD_CheckStatusWithTimeout+0x2e>
	{
	  uint8_t cardState = ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ?
 8001524:	480e      	ldr	r0, [pc, #56]	; (8001560 <SD_CheckStatusWithTimeout+0x4c>)
 8001526:	f002 fe35 	bl	8004194 <HAL_SD_GetCardState>
 800152a:	4603      	mov	r3, r0
	  														SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800152c:	2b04      	cmp	r3, #4
 800152e:	bf14      	ite	ne
 8001530:	2301      	movne	r3, #1
 8001532:	2300      	moveq	r3, #0
 8001534:	b2db      	uxtb	r3, r3
	  uint8_t cardState = ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ?
 8001536:	72fb      	strb	r3, [r7, #11]
	  if (cardState == SD_TRANSFER_OK)
 8001538:	7afb      	ldrb	r3, [r7, #11]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d101      	bne.n	8001542 <SD_CheckStatusWithTimeout+0x2e>
	  {
		  return 0;
 800153e:	2300      	movs	r3, #0
 8001540:	e009      	b.n	8001556 <SD_CheckStatusWithTimeout+0x42>
	while(HAL_GetTick() - timer < timeout)
 8001542:	f000 fcb7 	bl	8001eb4 <HAL_GetTick>
 8001546:	4602      	mov	r2, r0
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	1ad3      	subs	r3, r2, r3
 800154c:	687a      	ldr	r2, [r7, #4]
 800154e:	429a      	cmp	r2, r3
 8001550:	d8e8      	bhi.n	8001524 <SD_CheckStatusWithTimeout+0x10>
	  }
	}

	return -1;
 8001552:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001556:	4618      	mov	r0, r3
 8001558:	3710      	adds	r7, #16
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	20001238 	.word	0x20001238

08001564 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
static uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b086      	sub	sp, #24
 8001568:	af00      	add	r7, sp, #0
 800156a:	60f8      	str	r0, [r7, #12]
 800156c:	60b9      	str	r1, [r7, #8]
 800156e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8001570:	2300      	movs	r3, #0
 8001572:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	68ba      	ldr	r2, [r7, #8]
 8001578:	68f9      	ldr	r1, [r7, #12]
 800157a:	4806      	ldr	r0, [pc, #24]	; (8001594 <BSP_SD_ReadBlocks_DMA+0x30>)
 800157c:	f002 f852 	bl	8003624 <HAL_SD_ReadBlocks_DMA>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800158a:	7dfb      	ldrb	r3, [r7, #23]
}
 800158c:	4618      	mov	r0, r3
 800158e:	3718      	adds	r7, #24
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	20001238 	.word	0x20001238

08001598 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
static uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b086      	sub	sp, #24
 800159c:	af00      	add	r7, sp, #0
 800159e:	60f8      	str	r0, [r7, #12]
 80015a0:	60b9      	str	r1, [r7, #8]
 80015a2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80015a4:	2300      	movs	r3, #0
 80015a6:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	68ba      	ldr	r2, [r7, #8]
 80015ac:	68f9      	ldr	r1, [r7, #12]
 80015ae:	4806      	ldr	r0, [pc, #24]	; (80015c8 <BSP_SD_WriteBlocks_DMA+0x30>)
 80015b0:	f002 f91a 	bl	80037e8 <HAL_SD_WriteBlocks_DMA>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80015be:	7dfb      	ldrb	r3, [r7, #23]
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3718      	adds	r7, #24
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	20001238 	.word	0x20001238

080015cc <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
static void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 80015d4:	6879      	ldr	r1, [r7, #4]
 80015d6:	4803      	ldr	r0, [pc, #12]	; (80015e4 <BSP_SD_GetCardInfo+0x18>)
 80015d8:	f002 fd16 	bl	8004008 <HAL_SD_GetCardInfo>
}
 80015dc:	bf00      	nop
 80015de:	3708      	adds	r7, #8
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	20001238 	.word	0x20001238

080015e8 <SD_initialize>:
/**
  * @brief  Initializes a Drive
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
#if !defined(DISABLE_SD_INIT)

	if(SD_Init() == MSD_OK)
 80015ec:	f7ff ff44 	bl	8001478 <SD_Init>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d105      	bne.n	8001602 <SD_initialize+0x1a>
	{
		Stat = SD_CheckStatus();
 80015f6:	f7ff ff67 	bl	80014c8 <SD_CheckStatus>
 80015fa:	4603      	mov	r3, r0
 80015fc:	461a      	mov	r2, r3
 80015fe:	4b03      	ldr	r3, [pc, #12]	; (800160c <SD_initialize+0x24>)
 8001600:	701a      	strb	r2, [r3, #0]

#else
	Stat = SD_CheckStatus();
#endif

	return Stat;
 8001602:	4b02      	ldr	r3, [pc, #8]	; (800160c <SD_initialize+0x24>)
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	b2db      	uxtb	r3, r3
}
 8001608:	4618      	mov	r0, r3
 800160a:	bd80      	pop	{r7, pc}
 800160c:	20000000 	.word	0x20000000

08001610 <SD_status>:
/**
  * @brief  Gets Disk Status
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
	return SD_CheckStatus();
 8001614:	f7ff ff58 	bl	80014c8 <SD_CheckStatus>
 8001618:	4603      	mov	r3, r0
}
 800161a:	4618      	mov	r0, r3
 800161c:	bd80      	pop	{r7, pc}
	...

08001620 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE *buff, DWORD sector, UINT count)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b088      	sub	sp, #32
 8001624:	af00      	add	r7, sp, #0
 8001626:	60f8      	str	r0, [r7, #12]
 8001628:	60b9      	str	r1, [r7, #8]
 800162a:	607a      	str	r2, [r7, #4]
	DRESULT res = RES_ERROR;
 800162c:	2301      	movs	r3, #1
 800162e:	77fb      	strb	r3, [r7, #31]

	/*
	 * ensure the SDCard is ready for a new operation
	 */

	if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8001630:	f247 5030 	movw	r0, #30000	; 0x7530
 8001634:	f7ff ff6e 	bl	8001514 <SD_CheckStatusWithTimeout>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	da01      	bge.n	8001642 <SD_read+0x22>
	{
		return res;
 800163e:	7ffb      	ldrb	r3, [r7, #31]
 8001640:	e043      	b.n	80016ca <SD_read+0xaa>
	}
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8001642:	687a      	ldr	r2, [r7, #4]
 8001644:	68b9      	ldr	r1, [r7, #8]
 8001646:	68f8      	ldr	r0, [r7, #12]
 8001648:	f7ff ff8c 	bl	8001564 <BSP_SD_ReadBlocks_DMA>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d13a      	bne.n	80016c8 <SD_read+0xa8>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8001652:	4b20      	ldr	r3, [pc, #128]	; (80016d4 <SD_read+0xb4>)
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8001658:	f000 fc2c 	bl	8001eb4 <HAL_GetTick>
 800165c:	61b8      	str	r0, [r7, #24]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800165e:	bf00      	nop
 8001660:	4b1c      	ldr	r3, [pc, #112]	; (80016d4 <SD_read+0xb4>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d108      	bne.n	800167a <SD_read+0x5a>
 8001668:	f000 fc24 	bl	8001eb4 <HAL_GetTick>
 800166c:	4602      	mov	r2, r0
 800166e:	69bb      	ldr	r3, [r7, #24]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	f247 522f 	movw	r2, #29999	; 0x752f
 8001676:	4293      	cmp	r3, r2
 8001678:	d9f2      	bls.n	8001660 <SD_read+0x40>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800167a:	4b16      	ldr	r3, [pc, #88]	; (80016d4 <SD_read+0xb4>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d102      	bne.n	8001688 <SD_read+0x68>
      {
        res = RES_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	77fb      	strb	r3, [r7, #31]
 8001686:	e01f      	b.n	80016c8 <SD_read+0xa8>
      }
      else
      {
        ReadStatus = 0;
 8001688:	4b12      	ldr	r3, [pc, #72]	; (80016d4 <SD_read+0xb4>)
 800168a:	2200      	movs	r2, #0
 800168c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800168e:	f000 fc11 	bl	8001eb4 <HAL_GetTick>
 8001692:	61b8      	str	r0, [r7, #24]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8001694:	e00f      	b.n	80016b6 <SD_read+0x96>
        {
        	uint8_t cardState = ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ?
 8001696:	4810      	ldr	r0, [pc, #64]	; (80016d8 <SD_read+0xb8>)
 8001698:	f002 fd7c 	bl	8004194 <HAL_SD_GetCardState>
 800169c:	4603      	mov	r3, r0
        		  														SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800169e:	2b04      	cmp	r3, #4
 80016a0:	bf14      	ite	ne
 80016a2:	2301      	movne	r3, #1
 80016a4:	2300      	moveq	r3, #0
 80016a6:	b2db      	uxtb	r3, r3
        	uint8_t cardState = ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ?
 80016a8:	75fb      	strb	r3, [r7, #23]
          if (cardState == SD_TRANSFER_OK)
 80016aa:	7dfb      	ldrb	r3, [r7, #23]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d102      	bne.n	80016b6 <SD_read+0x96>
          {
            res = RES_OK;
 80016b0:	2300      	movs	r3, #0
 80016b2:	77fb      	strb	r3, [r7, #31]
            break;
 80016b4:	e008      	b.n	80016c8 <SD_read+0xa8>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80016b6:	f000 fbfd 	bl	8001eb4 <HAL_GetTick>
 80016ba:	4602      	mov	r2, r0
 80016bc:	69bb      	ldr	r3, [r7, #24]
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	f247 522f 	movw	r2, #29999	; 0x752f
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d9e6      	bls.n	8001696 <SD_read+0x76>
          }
        }
      }
    }

  return res;
 80016c8:	7ffb      	ldrb	r3, [r7, #31]
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3720      	adds	r7, #32
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	200000c0 	.word	0x200000c0
 80016d8:	20001238 	.word	0x20001238

080016dc <SD_write>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_write(const BYTE *buff, DWORD sector, UINT count)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b088      	sub	sp, #32
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	60f8      	str	r0, [r7, #12]
 80016e4:	60b9      	str	r1, [r7, #8]
 80016e6:	607a      	str	r2, [r7, #4]
	DRESULT res = RES_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	77fb      	strb	r3, [r7, #31]
	uint32_t timeout;

	WriteStatus = 0;
 80016ec:	4b28      	ldr	r3, [pc, #160]	; (8001790 <SD_write+0xb4>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	601a      	str	r2, [r3, #0]

	if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80016f2:	f247 5030 	movw	r0, #30000	; 0x7530
 80016f6:	f7ff ff0d 	bl	8001514 <SD_CheckStatusWithTimeout>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	da01      	bge.n	8001704 <SD_write+0x28>
	{
		return res;
 8001700:	7ffb      	ldrb	r3, [r7, #31]
 8001702:	e040      	b.n	8001786 <SD_write+0xaa>
	}


    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8001704:	687a      	ldr	r2, [r7, #4]
 8001706:	68b9      	ldr	r1, [r7, #8]
 8001708:	68f8      	ldr	r0, [r7, #12]
 800170a:	f7ff ff45 	bl	8001598 <BSP_SD_WriteBlocks_DMA>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d137      	bne.n	8001784 <SD_write+0xa8>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8001714:	f000 fbce 	bl	8001eb4 <HAL_GetTick>
 8001718:	61b8      	str	r0, [r7, #24]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800171a:	bf00      	nop
 800171c:	4b1c      	ldr	r3, [pc, #112]	; (8001790 <SD_write+0xb4>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d108      	bne.n	8001736 <SD_write+0x5a>
 8001724:	f000 fbc6 	bl	8001eb4 <HAL_GetTick>
 8001728:	4602      	mov	r2, r0
 800172a:	69bb      	ldr	r3, [r7, #24]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	f247 522f 	movw	r2, #29999	; 0x752f
 8001732:	4293      	cmp	r3, r2
 8001734:	d9f2      	bls.n	800171c <SD_write+0x40>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8001736:	4b16      	ldr	r3, [pc, #88]	; (8001790 <SD_write+0xb4>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d102      	bne.n	8001744 <SD_write+0x68>
      {
        res = RES_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	77fb      	strb	r3, [r7, #31]
 8001742:	e01f      	b.n	8001784 <SD_write+0xa8>
      }
      else
      {
        WriteStatus = 0;
 8001744:	4b12      	ldr	r3, [pc, #72]	; (8001790 <SD_write+0xb4>)
 8001746:	2200      	movs	r2, #0
 8001748:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800174a:	f000 fbb3 	bl	8001eb4 <HAL_GetTick>
 800174e:	61b8      	str	r0, [r7, #24]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8001750:	e00f      	b.n	8001772 <SD_write+0x96>
        {
        	uint8_t cardState = ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ?
 8001752:	4810      	ldr	r0, [pc, #64]	; (8001794 <SD_write+0xb8>)
 8001754:	f002 fd1e 	bl	8004194 <HAL_SD_GetCardState>
 8001758:	4603      	mov	r3, r0
        	        		  						SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800175a:	2b04      	cmp	r3, #4
 800175c:	bf14      	ite	ne
 800175e:	2301      	movne	r3, #1
 8001760:	2300      	moveq	r3, #0
 8001762:	b2db      	uxtb	r3, r3
        	uint8_t cardState = ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ?
 8001764:	75fb      	strb	r3, [r7, #23]
          if (cardState == SD_TRANSFER_OK)
 8001766:	7dfb      	ldrb	r3, [r7, #23]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d102      	bne.n	8001772 <SD_write+0x96>
          {
            res = RES_OK;
 800176c:	2300      	movs	r3, #0
 800176e:	77fb      	strb	r3, [r7, #31]
            break;
 8001770:	e008      	b.n	8001784 <SD_write+0xa8>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8001772:	f000 fb9f 	bl	8001eb4 <HAL_GetTick>
 8001776:	4602      	mov	r2, r0
 8001778:	69bb      	ldr	r3, [r7, #24]
 800177a:	1ad3      	subs	r3, r2, r3
 800177c:	f247 522f 	movw	r2, #29999	; 0x752f
 8001780:	4293      	cmp	r3, r2
 8001782:	d9e6      	bls.n	8001752 <SD_write+0x76>
          }
        }
      }
    }
  return res;
 8001784:	7ffb      	ldrb	r3, [r7, #31]
}
 8001786:	4618      	mov	r0, r3
 8001788:	3720      	adds	r7, #32
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	200000bc 	.word	0x200000bc
 8001794:	20001238 	.word	0x20001238

08001798 <SD_ioctl>:
  * @param  cmd: Control code
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
DRESULT SD_ioctl(BYTE cmd, void *buff)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b08c      	sub	sp, #48	; 0x30
 800179c:	af00      	add	r7, sp, #0
 800179e:	4603      	mov	r3, r0
 80017a0:	6039      	str	r1, [r7, #0]
 80017a2:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  HAL_SD_CardInfoTypeDef CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80017aa:	4b25      	ldr	r3, [pc, #148]	; (8001840 <SD_ioctl+0xa8>)
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	b2db      	uxtb	r3, r3
 80017b0:	f003 0301 	and.w	r3, r3, #1
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <SD_ioctl+0x24>
 80017b8:	2303      	movs	r3, #3
 80017ba:	e03c      	b.n	8001836 <SD_ioctl+0x9e>

  switch (cmd)
 80017bc:	79fb      	ldrb	r3, [r7, #7]
 80017be:	2b03      	cmp	r3, #3
 80017c0:	d834      	bhi.n	800182c <SD_ioctl+0x94>
 80017c2:	a201      	add	r2, pc, #4	; (adr r2, 80017c8 <SD_ioctl+0x30>)
 80017c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017c8:	080017d9 	.word	0x080017d9
 80017cc:	080017e1 	.word	0x080017e1
 80017d0:	080017f9 	.word	0x080017f9
 80017d4:	08001813 	.word	0x08001813
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80017d8:	2300      	movs	r3, #0
 80017da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80017de:	e028      	b.n	8001832 <SD_ioctl+0x9a>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80017e0:	f107 030c 	add.w	r3, r7, #12
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7ff fef1 	bl	80015cc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80017ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80017f0:	2300      	movs	r3, #0
 80017f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80017f6:	e01c      	b.n	8001832 <SD_ioctl+0x9a>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80017f8:	f107 030c 	add.w	r3, r7, #12
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7ff fee5 	bl	80015cc <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8001802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001804:	b29a      	uxth	r2, r3
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800180a:	2300      	movs	r3, #0
 800180c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8001810:	e00f      	b.n	8001832 <SD_ioctl+0x9a>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8001812:	f107 030c 	add.w	r3, r7, #12
 8001816:	4618      	mov	r0, r3
 8001818:	f7ff fed8 	bl	80015cc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800181c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800181e:	0a5a      	lsrs	r2, r3, #9
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8001824:	2300      	movs	r3, #0
 8001826:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800182a:	e002      	b.n	8001832 <SD_ioctl+0x9a>

  default:
    res = RES_PARERR;
 800182c:	2304      	movs	r3, #4
 800182e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8001832:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001836:	4618      	mov	r0, r3
 8001838:	3730      	adds	r7, #48	; 0x30
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	20000000 	.word	0x20000000

08001844 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
	ReadStatus = 1;
 800184c:	4b04      	ldr	r3, [pc, #16]	; (8001860 <HAL_SD_RxCpltCallback+0x1c>)
 800184e:	2201      	movs	r2, #1
 8001850:	601a      	str	r2, [r3, #0]
}
 8001852:	bf00      	nop
 8001854:	370c      	adds	r7, #12
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	200000c0 	.word	0x200000c0

08001864 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
	WriteStatus = 1;
 800186c:	4b04      	ldr	r3, [pc, #16]	; (8001880 <HAL_SD_TxCpltCallback+0x1c>)
 800186e:	2201      	movs	r2, #1
 8001870:	601a      	str	r2, [r3, #0]
}
 8001872:	bf00      	nop
 8001874:	370c      	adds	r7, #12
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	200000bc 	.word	0x200000bc

08001884 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  /* user code BEGIN */

  /* user code END */
}
 800188c:	bf00      	nop
 800188e:	370c      	adds	r7, #12
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr

08001898 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
	/* user code BEGIN */

	/* user code END */
}
 80018a0:	bf00      	nop
 80018a2:	370c      	adds	r7, #12
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr

080018ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018b2:	2300      	movs	r3, #0
 80018b4:	607b      	str	r3, [r7, #4]
 80018b6:	4b10      	ldr	r3, [pc, #64]	; (80018f8 <HAL_MspInit+0x4c>)
 80018b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ba:	4a0f      	ldr	r2, [pc, #60]	; (80018f8 <HAL_MspInit+0x4c>)
 80018bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018c0:	6453      	str	r3, [r2, #68]	; 0x44
 80018c2:	4b0d      	ldr	r3, [pc, #52]	; (80018f8 <HAL_MspInit+0x4c>)
 80018c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018ca:	607b      	str	r3, [r7, #4]
 80018cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018ce:	2300      	movs	r3, #0
 80018d0:	603b      	str	r3, [r7, #0]
 80018d2:	4b09      	ldr	r3, [pc, #36]	; (80018f8 <HAL_MspInit+0x4c>)
 80018d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d6:	4a08      	ldr	r2, [pc, #32]	; (80018f8 <HAL_MspInit+0x4c>)
 80018d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018dc:	6413      	str	r3, [r2, #64]	; 0x40
 80018de:	4b06      	ldr	r3, [pc, #24]	; (80018f8 <HAL_MspInit+0x4c>)
 80018e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018e6:	603b      	str	r3, [r7, #0]
 80018e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018ea:	bf00      	nop
 80018ec:	370c      	adds	r7, #12
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	40023800 	.word	0x40023800

080018fc <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b08a      	sub	sp, #40	; 0x28
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001904:	f107 0314 	add.w	r3, r7, #20
 8001908:	2200      	movs	r2, #0
 800190a:	601a      	str	r2, [r3, #0]
 800190c:	605a      	str	r2, [r3, #4]
 800190e:	609a      	str	r2, [r3, #8]
 8001910:	60da      	str	r2, [r3, #12]
 8001912:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a66      	ldr	r2, [pc, #408]	; (8001ab4 <HAL_SD_MspInit+0x1b8>)
 800191a:	4293      	cmp	r3, r2
 800191c:	f040 80c5 	bne.w	8001aaa <HAL_SD_MspInit+0x1ae>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8001920:	2300      	movs	r3, #0
 8001922:	613b      	str	r3, [r7, #16]
 8001924:	4b64      	ldr	r3, [pc, #400]	; (8001ab8 <HAL_SD_MspInit+0x1bc>)
 8001926:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001928:	4a63      	ldr	r2, [pc, #396]	; (8001ab8 <HAL_SD_MspInit+0x1bc>)
 800192a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800192e:	6453      	str	r3, [r2, #68]	; 0x44
 8001930:	4b61      	ldr	r3, [pc, #388]	; (8001ab8 <HAL_SD_MspInit+0x1bc>)
 8001932:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001934:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001938:	613b      	str	r3, [r7, #16]
 800193a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800193c:	2300      	movs	r3, #0
 800193e:	60fb      	str	r3, [r7, #12]
 8001940:	4b5d      	ldr	r3, [pc, #372]	; (8001ab8 <HAL_SD_MspInit+0x1bc>)
 8001942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001944:	4a5c      	ldr	r2, [pc, #368]	; (8001ab8 <HAL_SD_MspInit+0x1bc>)
 8001946:	f043 0304 	orr.w	r3, r3, #4
 800194a:	6313      	str	r3, [r2, #48]	; 0x30
 800194c:	4b5a      	ldr	r3, [pc, #360]	; (8001ab8 <HAL_SD_MspInit+0x1bc>)
 800194e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001950:	f003 0304 	and.w	r3, r3, #4
 8001954:	60fb      	str	r3, [r7, #12]
 8001956:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001958:	2300      	movs	r3, #0
 800195a:	60bb      	str	r3, [r7, #8]
 800195c:	4b56      	ldr	r3, [pc, #344]	; (8001ab8 <HAL_SD_MspInit+0x1bc>)
 800195e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001960:	4a55      	ldr	r2, [pc, #340]	; (8001ab8 <HAL_SD_MspInit+0x1bc>)
 8001962:	f043 0308 	orr.w	r3, r3, #8
 8001966:	6313      	str	r3, [r2, #48]	; 0x30
 8001968:	4b53      	ldr	r3, [pc, #332]	; (8001ab8 <HAL_SD_MspInit+0x1bc>)
 800196a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196c:	f003 0308 	and.w	r3, r3, #8
 8001970:	60bb      	str	r3, [r7, #8]
 8001972:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001974:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001978:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800197a:	2302      	movs	r3, #2
 800197c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197e:	2300      	movs	r3, #0
 8001980:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001982:	2303      	movs	r3, #3
 8001984:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001986:	230c      	movs	r3, #12
 8001988:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800198a:	f107 0314 	add.w	r3, r7, #20
 800198e:	4619      	mov	r1, r3
 8001990:	484a      	ldr	r0, [pc, #296]	; (8001abc <HAL_SD_MspInit+0x1c0>)
 8001992:	f000 ff3f 	bl	8002814 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001996:	2304      	movs	r3, #4
 8001998:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800199a:	2302      	movs	r3, #2
 800199c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199e:	2300      	movs	r3, #0
 80019a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019a2:	2303      	movs	r3, #3
 80019a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80019a6:	230c      	movs	r3, #12
 80019a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019aa:	f107 0314 	add.w	r3, r7, #20
 80019ae:	4619      	mov	r1, r3
 80019b0:	4843      	ldr	r0, [pc, #268]	; (8001ac0 <HAL_SD_MspInit+0x1c4>)
 80019b2:	f000 ff2f 	bl	8002814 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 80019b6:	4b43      	ldr	r3, [pc, #268]	; (8001ac4 <HAL_SD_MspInit+0x1c8>)
 80019b8:	4a43      	ldr	r2, [pc, #268]	; (8001ac8 <HAL_SD_MspInit+0x1cc>)
 80019ba:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 80019bc:	4b41      	ldr	r3, [pc, #260]	; (8001ac4 <HAL_SD_MspInit+0x1c8>)
 80019be:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80019c2:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019c4:	4b3f      	ldr	r3, [pc, #252]	; (8001ac4 <HAL_SD_MspInit+0x1c8>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019ca:	4b3e      	ldr	r3, [pc, #248]	; (8001ac4 <HAL_SD_MspInit+0x1c8>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 80019d0:	4b3c      	ldr	r3, [pc, #240]	; (8001ac4 <HAL_SD_MspInit+0x1c8>)
 80019d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019d6:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80019d8:	4b3a      	ldr	r3, [pc, #232]	; (8001ac4 <HAL_SD_MspInit+0x1c8>)
 80019da:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80019de:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019e0:	4b38      	ldr	r3, [pc, #224]	; (8001ac4 <HAL_SD_MspInit+0x1c8>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 80019e6:	4b37      	ldr	r3, [pc, #220]	; (8001ac4 <HAL_SD_MspInit+0x1c8>)
 80019e8:	2220      	movs	r2, #32
 80019ea:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 80019ec:	4b35      	ldr	r3, [pc, #212]	; (8001ac4 <HAL_SD_MspInit+0x1c8>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80019f2:	4b34      	ldr	r3, [pc, #208]	; (8001ac4 <HAL_SD_MspInit+0x1c8>)
 80019f4:	2204      	movs	r2, #4
 80019f6:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80019f8:	4b32      	ldr	r3, [pc, #200]	; (8001ac4 <HAL_SD_MspInit+0x1c8>)
 80019fa:	2203      	movs	r2, #3
 80019fc:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 80019fe:	4b31      	ldr	r3, [pc, #196]	; (8001ac4 <HAL_SD_MspInit+0x1c8>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001a04:	4b2f      	ldr	r3, [pc, #188]	; (8001ac4 <HAL_SD_MspInit+0x1c8>)
 8001a06:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001a0a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8001a0c:	482d      	ldr	r0, [pc, #180]	; (8001ac4 <HAL_SD_MspInit+0x1c8>)
 8001a0e:	f000 fb63 	bl	80020d8 <HAL_DMA_Init>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d001      	beq.n	8001a1c <HAL_SD_MspInit+0x120>
    {
      Error_Handler();
 8001a18:	f7ff fd14 	bl	8001444 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	4a29      	ldr	r2, [pc, #164]	; (8001ac4 <HAL_SD_MspInit+0x1c8>)
 8001a20:	641a      	str	r2, [r3, #64]	; 0x40
 8001a22:	4a28      	ldr	r2, [pc, #160]	; (8001ac4 <HAL_SD_MspInit+0x1c8>)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8001a28:	4b28      	ldr	r3, [pc, #160]	; (8001acc <HAL_SD_MspInit+0x1d0>)
 8001a2a:	4a29      	ldr	r2, [pc, #164]	; (8001ad0 <HAL_SD_MspInit+0x1d4>)
 8001a2c:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8001a2e:	4b27      	ldr	r3, [pc, #156]	; (8001acc <HAL_SD_MspInit+0x1d0>)
 8001a30:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a34:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a36:	4b25      	ldr	r3, [pc, #148]	; (8001acc <HAL_SD_MspInit+0x1d0>)
 8001a38:	2240      	movs	r2, #64	; 0x40
 8001a3a:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a3c:	4b23      	ldr	r3, [pc, #140]	; (8001acc <HAL_SD_MspInit+0x1d0>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001a42:	4b22      	ldr	r3, [pc, #136]	; (8001acc <HAL_SD_MspInit+0x1d0>)
 8001a44:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a48:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001a4a:	4b20      	ldr	r3, [pc, #128]	; (8001acc <HAL_SD_MspInit+0x1d0>)
 8001a4c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001a50:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a52:	4b1e      	ldr	r3, [pc, #120]	; (8001acc <HAL_SD_MspInit+0x1d0>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8001a58:	4b1c      	ldr	r3, [pc, #112]	; (8001acc <HAL_SD_MspInit+0x1d0>)
 8001a5a:	2220      	movs	r2, #32
 8001a5c:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001a5e:	4b1b      	ldr	r3, [pc, #108]	; (8001acc <HAL_SD_MspInit+0x1d0>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001a64:	4b19      	ldr	r3, [pc, #100]	; (8001acc <HAL_SD_MspInit+0x1d0>)
 8001a66:	2204      	movs	r2, #4
 8001a68:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001a6a:	4b18      	ldr	r3, [pc, #96]	; (8001acc <HAL_SD_MspInit+0x1d0>)
 8001a6c:	2203      	movs	r2, #3
 8001a6e:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001a70:	4b16      	ldr	r3, [pc, #88]	; (8001acc <HAL_SD_MspInit+0x1d0>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001a76:	4b15      	ldr	r3, [pc, #84]	; (8001acc <HAL_SD_MspInit+0x1d0>)
 8001a78:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001a7c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8001a7e:	4813      	ldr	r0, [pc, #76]	; (8001acc <HAL_SD_MspInit+0x1d0>)
 8001a80:	f000 fb2a 	bl	80020d8 <HAL_DMA_Init>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <HAL_SD_MspInit+0x192>
    {
      Error_Handler();
 8001a8a:	f7ff fcdb 	bl	8001444 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4a0e      	ldr	r2, [pc, #56]	; (8001acc <HAL_SD_MspInit+0x1d0>)
 8001a92:	63da      	str	r2, [r3, #60]	; 0x3c
 8001a94:	4a0d      	ldr	r2, [pc, #52]	; (8001acc <HAL_SD_MspInit+0x1d0>)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	2031      	movs	r0, #49	; 0x31
 8001aa0:	f000 faf0 	bl	8002084 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8001aa4:	2031      	movs	r0, #49	; 0x31
 8001aa6:	f000 fb09 	bl	80020bc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8001aaa:	bf00      	nop
 8001aac:	3728      	adds	r7, #40	; 0x28
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	40012c00 	.word	0x40012c00
 8001ab8:	40023800 	.word	0x40023800
 8001abc:	40020800 	.word	0x40020800
 8001ac0:	40020c00 	.word	0x40020c00
 8001ac4:	20000104 	.word	0x20000104
 8001ac8:	40026458 	.word	0x40026458
 8001acc:	200011d8 	.word	0x200011d8
 8001ad0:	400264a0 	.word	0x400264a0

08001ad4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b08a      	sub	sp, #40	; 0x28
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001adc:	f107 0314 	add.w	r3, r7, #20
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	601a      	str	r2, [r3, #0]
 8001ae4:	605a      	str	r2, [r3, #4]
 8001ae6:	609a      	str	r2, [r3, #8]
 8001ae8:	60da      	str	r2, [r3, #12]
 8001aea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a19      	ldr	r2, [pc, #100]	; (8001b58 <HAL_UART_MspInit+0x84>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d12c      	bne.n	8001b50 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001af6:	2300      	movs	r3, #0
 8001af8:	613b      	str	r3, [r7, #16]
 8001afa:	4b18      	ldr	r3, [pc, #96]	; (8001b5c <HAL_UART_MspInit+0x88>)
 8001afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001afe:	4a17      	ldr	r2, [pc, #92]	; (8001b5c <HAL_UART_MspInit+0x88>)
 8001b00:	f043 0310 	orr.w	r3, r3, #16
 8001b04:	6453      	str	r3, [r2, #68]	; 0x44
 8001b06:	4b15      	ldr	r3, [pc, #84]	; (8001b5c <HAL_UART_MspInit+0x88>)
 8001b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b0a:	f003 0310 	and.w	r3, r3, #16
 8001b0e:	613b      	str	r3, [r7, #16]
 8001b10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b12:	2300      	movs	r3, #0
 8001b14:	60fb      	str	r3, [r7, #12]
 8001b16:	4b11      	ldr	r3, [pc, #68]	; (8001b5c <HAL_UART_MspInit+0x88>)
 8001b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1a:	4a10      	ldr	r2, [pc, #64]	; (8001b5c <HAL_UART_MspInit+0x88>)
 8001b1c:	f043 0301 	orr.w	r3, r3, #1
 8001b20:	6313      	str	r3, [r2, #48]	; 0x30
 8001b22:	4b0e      	ldr	r3, [pc, #56]	; (8001b5c <HAL_UART_MspInit+0x88>)
 8001b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b26:	f003 0301 	and.w	r3, r3, #1
 8001b2a:	60fb      	str	r3, [r7, #12]
 8001b2c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001b2e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001b32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b34:	2302      	movs	r3, #2
 8001b36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b40:	2307      	movs	r3, #7
 8001b42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b44:	f107 0314 	add.w	r3, r7, #20
 8001b48:	4619      	mov	r1, r3
 8001b4a:	4805      	ldr	r0, [pc, #20]	; (8001b60 <HAL_UART_MspInit+0x8c>)
 8001b4c:	f000 fe62 	bl	8002814 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001b50:	bf00      	nop
 8001b52:	3728      	adds	r7, #40	; 0x28
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	40011000 	.word	0x40011000
 8001b5c:	40023800 	.word	0x40023800
 8001b60:	40020000 	.word	0x40020000

08001b64 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b08c      	sub	sp, #48	; 0x30
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001b70:	2300      	movs	r3, #0
 8001b72:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8001b74:	2200      	movs	r2, #0
 8001b76:	6879      	ldr	r1, [r7, #4]
 8001b78:	2037      	movs	r0, #55	; 0x37
 8001b7a:	f000 fa83 	bl	8002084 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001b7e:	2037      	movs	r0, #55	; 0x37
 8001b80:	f000 fa9c 	bl	80020bc <HAL_NVIC_EnableIRQ>

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8001b84:	2300      	movs	r3, #0
 8001b86:	60fb      	str	r3, [r7, #12]
 8001b88:	4b1f      	ldr	r3, [pc, #124]	; (8001c08 <HAL_InitTick+0xa4>)
 8001b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8c:	4a1e      	ldr	r2, [pc, #120]	; (8001c08 <HAL_InitTick+0xa4>)
 8001b8e:	f043 0320 	orr.w	r3, r3, #32
 8001b92:	6413      	str	r3, [r2, #64]	; 0x40
 8001b94:	4b1c      	ldr	r3, [pc, #112]	; (8001c08 <HAL_InitTick+0xa4>)
 8001b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b98:	f003 0320 	and.w	r3, r3, #32
 8001b9c:	60fb      	str	r3, [r7, #12]
 8001b9e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001ba0:	f107 0210 	add.w	r2, r7, #16
 8001ba4:	f107 0314 	add.w	r3, r7, #20
 8001ba8:	4611      	mov	r1, r2
 8001baa:	4618      	mov	r0, r3
 8001bac:	f001 fc5a 	bl	8003464 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001bb0:	f001 fc30 	bl	8003414 <HAL_RCC_GetPCLK1Freq>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	005b      	lsls	r3, r3, #1
 8001bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bbc:	4a13      	ldr	r2, [pc, #76]	; (8001c0c <HAL_InitTick+0xa8>)
 8001bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8001bc2:	0c9b      	lsrs	r3, r3, #18
 8001bc4:	3b01      	subs	r3, #1
 8001bc6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8001bc8:	4b11      	ldr	r3, [pc, #68]	; (8001c10 <HAL_InitTick+0xac>)
 8001bca:	4a12      	ldr	r2, [pc, #72]	; (8001c14 <HAL_InitTick+0xb0>)
 8001bcc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8001bce:	4b10      	ldr	r3, [pc, #64]	; (8001c10 <HAL_InitTick+0xac>)
 8001bd0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001bd4:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8001bd6:	4a0e      	ldr	r2, [pc, #56]	; (8001c10 <HAL_InitTick+0xac>)
 8001bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bda:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8001bdc:	4b0c      	ldr	r3, [pc, #48]	; (8001c10 <HAL_InitTick+0xac>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001be2:	4b0b      	ldr	r3, [pc, #44]	; (8001c10 <HAL_InitTick+0xac>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8001be8:	4809      	ldr	r0, [pc, #36]	; (8001c10 <HAL_InitTick+0xac>)
 8001bea:	f002 ff92 	bl	8004b12 <HAL_TIM_Base_Init>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d104      	bne.n	8001bfe <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8001bf4:	4806      	ldr	r0, [pc, #24]	; (8001c10 <HAL_InitTick+0xac>)
 8001bf6:	f002 ffe5 	bl	8004bc4 <HAL_TIM_Base_Start_IT>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	e000      	b.n	8001c00 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	3730      	adds	r7, #48	; 0x30
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	40023800 	.word	0x40023800
 8001c0c:	431bde83 	.word	0x431bde83
 8001c10:	200022bc 	.word	0x200022bc
 8001c14:	40001400 	.word	0x40001400

08001c18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c1c:	e7fe      	b.n	8001c1c <NMI_Handler+0x4>

08001c1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c1e:	b480      	push	{r7}
 8001c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c22:	e7fe      	b.n	8001c22 <HardFault_Handler+0x4>

08001c24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c28:	e7fe      	b.n	8001c28 <MemManage_Handler+0x4>

08001c2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c2a:	b480      	push	{r7}
 8001c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c2e:	e7fe      	b.n	8001c2e <BusFault_Handler+0x4>

08001c30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c34:	e7fe      	b.n	8001c34 <UsageFault_Handler+0x4>

08001c36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c36:	b480      	push	{r7}
 8001c38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c3a:	bf00      	nop
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr

08001c44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c48:	bf00      	nop
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr

08001c52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c52:	b480      	push	{r7}
 8001c54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c56:	bf00      	nop
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr

08001c60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c64:	bf00      	nop
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
	...

08001c70 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8001c74:	4802      	ldr	r0, [pc, #8]	; (8001c80 <SDIO_IRQHandler+0x10>)
 8001c76:	f001 fe9d 	bl	80039b4 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8001c7a:	bf00      	nop
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	20001238 	.word	0x20001238

08001c84 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001c88:	4802      	ldr	r0, [pc, #8]	; (8001c94 <TIM7_IRQHandler+0x10>)
 8001c8a:	f003 f80b 	bl	8004ca4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001c8e:	bf00      	nop
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	200022bc 	.word	0x200022bc

08001c98 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8001c9c:	4802      	ldr	r0, [pc, #8]	; (8001ca8 <DMA2_Stream3_IRQHandler+0x10>)
 8001c9e:	f000 fb43 	bl	8002328 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001ca2:	bf00      	nop
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	20000104 	.word	0x20000104

08001cac <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8001cb0:	4802      	ldr	r0, [pc, #8]	; (8001cbc <DMA2_Stream6_IRQHandler+0x10>)
 8001cb2:	f000 fb39 	bl	8002328 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001cb6:	bf00      	nop
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	200011d8 	.word	0x200011d8

08001cc0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b086      	sub	sp, #24
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	60f8      	str	r0, [r7, #12]
 8001cc8:	60b9      	str	r1, [r7, #8]
 8001cca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ccc:	2300      	movs	r3, #0
 8001cce:	617b      	str	r3, [r7, #20]
 8001cd0:	e00a      	b.n	8001ce8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001cd2:	f3af 8000 	nop.w
 8001cd6:	4601      	mov	r1, r0
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	1c5a      	adds	r2, r3, #1
 8001cdc:	60ba      	str	r2, [r7, #8]
 8001cde:	b2ca      	uxtb	r2, r1
 8001ce0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	617b      	str	r3, [r7, #20]
 8001ce8:	697a      	ldr	r2, [r7, #20]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	dbf0      	blt.n	8001cd2 <_read+0x12>
	}

return len;
 8001cf0:	687b      	ldr	r3, [r7, #4]
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3718      	adds	r7, #24
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}

08001cfa <_close>:
	}
	return len;
}

int _close(int file)
{
 8001cfa:	b480      	push	{r7}
 8001cfc:	b083      	sub	sp, #12
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	6078      	str	r0, [r7, #4]
	return -1;
 8001d02:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	370c      	adds	r7, #12
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr

08001d12 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d12:	b480      	push	{r7}
 8001d14:	b083      	sub	sp, #12
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	6078      	str	r0, [r7, #4]
 8001d1a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d22:	605a      	str	r2, [r3, #4]
	return 0;
 8001d24:	2300      	movs	r3, #0
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	370c      	adds	r7, #12
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr

08001d32 <_isatty>:

int _isatty(int file)
{
 8001d32:	b480      	push	{r7}
 8001d34:	b083      	sub	sp, #12
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	6078      	str	r0, [r7, #4]
	return 1;
 8001d3a:	2301      	movs	r3, #1
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	370c      	adds	r7, #12
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr

08001d48 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b085      	sub	sp, #20
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	60f8      	str	r0, [r7, #12]
 8001d50:	60b9      	str	r1, [r7, #8]
 8001d52:	607a      	str	r2, [r7, #4]
	return 0;
 8001d54:	2300      	movs	r3, #0
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3714      	adds	r7, #20
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
	...

08001d64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b086      	sub	sp, #24
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d6c:	4a14      	ldr	r2, [pc, #80]	; (8001dc0 <_sbrk+0x5c>)
 8001d6e:	4b15      	ldr	r3, [pc, #84]	; (8001dc4 <_sbrk+0x60>)
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d78:	4b13      	ldr	r3, [pc, #76]	; (8001dc8 <_sbrk+0x64>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d102      	bne.n	8001d86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d80:	4b11      	ldr	r3, [pc, #68]	; (8001dc8 <_sbrk+0x64>)
 8001d82:	4a12      	ldr	r2, [pc, #72]	; (8001dcc <_sbrk+0x68>)
 8001d84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d86:	4b10      	ldr	r3, [pc, #64]	; (8001dc8 <_sbrk+0x64>)
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4413      	add	r3, r2
 8001d8e:	693a      	ldr	r2, [r7, #16]
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d207      	bcs.n	8001da4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d94:	f007 faa4 	bl	80092e0 <__errno>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	220c      	movs	r2, #12
 8001d9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d9e:	f04f 33ff 	mov.w	r3, #4294967295
 8001da2:	e009      	b.n	8001db8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001da4:	4b08      	ldr	r3, [pc, #32]	; (8001dc8 <_sbrk+0x64>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001daa:	4b07      	ldr	r3, [pc, #28]	; (8001dc8 <_sbrk+0x64>)
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4413      	add	r3, r2
 8001db2:	4a05      	ldr	r2, [pc, #20]	; (8001dc8 <_sbrk+0x64>)
 8001db4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001db6:	68fb      	ldr	r3, [r7, #12]
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3718      	adds	r7, #24
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	20030000 	.word	0x20030000
 8001dc4:	00000400 	.word	0x00000400
 8001dc8:	200000c4 	.word	0x200000c4
 8001dcc:	20004388 	.word	0x20004388

08001dd0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001dd4:	4b06      	ldr	r3, [pc, #24]	; (8001df0 <SystemInit+0x20>)
 8001dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dda:	4a05      	ldr	r2, [pc, #20]	; (8001df0 <SystemInit+0x20>)
 8001ddc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001de0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001de4:	bf00      	nop
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	e000ed00 	.word	0xe000ed00

08001df4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001df4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e2c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001df8:	480d      	ldr	r0, [pc, #52]	; (8001e30 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001dfa:	490e      	ldr	r1, [pc, #56]	; (8001e34 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001dfc:	4a0e      	ldr	r2, [pc, #56]	; (8001e38 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001dfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e00:	e002      	b.n	8001e08 <LoopCopyDataInit>

08001e02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e06:	3304      	adds	r3, #4

08001e08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e0c:	d3f9      	bcc.n	8001e02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e0e:	4a0b      	ldr	r2, [pc, #44]	; (8001e3c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e10:	4c0b      	ldr	r4, [pc, #44]	; (8001e40 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e14:	e001      	b.n	8001e1a <LoopFillZerobss>

08001e16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e18:	3204      	adds	r2, #4

08001e1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e1c:	d3fb      	bcc.n	8001e16 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001e1e:	f7ff ffd7 	bl	8001dd0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e22:	f007 fa63 	bl	80092ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e26:	f7ff f885 	bl	8000f34 <main>
  bx  lr    
 8001e2a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001e2c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001e30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e34:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001e38:	0800a92c 	.word	0x0800a92c
  ldr r2, =_sbss
 8001e3c:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001e40:	20004384 	.word	0x20004384

08001e44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e44:	e7fe      	b.n	8001e44 <ADC_IRQHandler>
	...

08001e48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e4c:	4b0e      	ldr	r3, [pc, #56]	; (8001e88 <HAL_Init+0x40>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a0d      	ldr	r2, [pc, #52]	; (8001e88 <HAL_Init+0x40>)
 8001e52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e56:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e58:	4b0b      	ldr	r3, [pc, #44]	; (8001e88 <HAL_Init+0x40>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a0a      	ldr	r2, [pc, #40]	; (8001e88 <HAL_Init+0x40>)
 8001e5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e62:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e64:	4b08      	ldr	r3, [pc, #32]	; (8001e88 <HAL_Init+0x40>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a07      	ldr	r2, [pc, #28]	; (8001e88 <HAL_Init+0x40>)
 8001e6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e70:	2003      	movs	r0, #3
 8001e72:	f000 f8fc 	bl	800206e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e76:	200f      	movs	r0, #15
 8001e78:	f7ff fe74 	bl	8001b64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e7c:	f7ff fd16 	bl	80018ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e80:	2300      	movs	r3, #0
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	40023c00 	.word	0x40023c00

08001e8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e90:	4b06      	ldr	r3, [pc, #24]	; (8001eac <HAL_IncTick+0x20>)
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	461a      	mov	r2, r3
 8001e96:	4b06      	ldr	r3, [pc, #24]	; (8001eb0 <HAL_IncTick+0x24>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4413      	add	r3, r2
 8001e9c:	4a04      	ldr	r2, [pc, #16]	; (8001eb0 <HAL_IncTick+0x24>)
 8001e9e:	6013      	str	r3, [r2, #0]
}
 8001ea0:	bf00      	nop
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	2000000c 	.word	0x2000000c
 8001eb0:	20002304 	.word	0x20002304

08001eb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  return uwTick;
 8001eb8:	4b03      	ldr	r3, [pc, #12]	; (8001ec8 <HAL_GetTick+0x14>)
 8001eba:	681b      	ldr	r3, [r3, #0]
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	20002304 	.word	0x20002304

08001ecc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b084      	sub	sp, #16
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ed4:	f7ff ffee 	bl	8001eb4 <HAL_GetTick>
 8001ed8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ee4:	d005      	beq.n	8001ef2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ee6:	4b0a      	ldr	r3, [pc, #40]	; (8001f10 <HAL_Delay+0x44>)
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	461a      	mov	r2, r3
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	4413      	add	r3, r2
 8001ef0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ef2:	bf00      	nop
 8001ef4:	f7ff ffde 	bl	8001eb4 <HAL_GetTick>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	68fa      	ldr	r2, [r7, #12]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d8f7      	bhi.n	8001ef4 <HAL_Delay+0x28>
  {
  }
}
 8001f04:	bf00      	nop
 8001f06:	bf00      	nop
 8001f08:	3710      	adds	r7, #16
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	2000000c 	.word	0x2000000c

08001f14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b085      	sub	sp, #20
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	f003 0307 	and.w	r3, r3, #7
 8001f22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f24:	4b0c      	ldr	r3, [pc, #48]	; (8001f58 <__NVIC_SetPriorityGrouping+0x44>)
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f2a:	68ba      	ldr	r2, [r7, #8]
 8001f2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f30:	4013      	ands	r3, r2
 8001f32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f46:	4a04      	ldr	r2, [pc, #16]	; (8001f58 <__NVIC_SetPriorityGrouping+0x44>)
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	60d3      	str	r3, [r2, #12]
}
 8001f4c:	bf00      	nop
 8001f4e:	3714      	adds	r7, #20
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr
 8001f58:	e000ed00 	.word	0xe000ed00

08001f5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f60:	4b04      	ldr	r3, [pc, #16]	; (8001f74 <__NVIC_GetPriorityGrouping+0x18>)
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	0a1b      	lsrs	r3, r3, #8
 8001f66:	f003 0307 	and.w	r3, r3, #7
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr
 8001f74:	e000ed00 	.word	0xe000ed00

08001f78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	4603      	mov	r3, r0
 8001f80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	db0b      	blt.n	8001fa2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f8a:	79fb      	ldrb	r3, [r7, #7]
 8001f8c:	f003 021f 	and.w	r2, r3, #31
 8001f90:	4907      	ldr	r1, [pc, #28]	; (8001fb0 <__NVIC_EnableIRQ+0x38>)
 8001f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f96:	095b      	lsrs	r3, r3, #5
 8001f98:	2001      	movs	r0, #1
 8001f9a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fa2:	bf00      	nop
 8001fa4:	370c      	adds	r7, #12
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop
 8001fb0:	e000e100 	.word	0xe000e100

08001fb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	4603      	mov	r3, r0
 8001fbc:	6039      	str	r1, [r7, #0]
 8001fbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	db0a      	blt.n	8001fde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	b2da      	uxtb	r2, r3
 8001fcc:	490c      	ldr	r1, [pc, #48]	; (8002000 <__NVIC_SetPriority+0x4c>)
 8001fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd2:	0112      	lsls	r2, r2, #4
 8001fd4:	b2d2      	uxtb	r2, r2
 8001fd6:	440b      	add	r3, r1
 8001fd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fdc:	e00a      	b.n	8001ff4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	b2da      	uxtb	r2, r3
 8001fe2:	4908      	ldr	r1, [pc, #32]	; (8002004 <__NVIC_SetPriority+0x50>)
 8001fe4:	79fb      	ldrb	r3, [r7, #7]
 8001fe6:	f003 030f 	and.w	r3, r3, #15
 8001fea:	3b04      	subs	r3, #4
 8001fec:	0112      	lsls	r2, r2, #4
 8001fee:	b2d2      	uxtb	r2, r2
 8001ff0:	440b      	add	r3, r1
 8001ff2:	761a      	strb	r2, [r3, #24]
}
 8001ff4:	bf00      	nop
 8001ff6:	370c      	adds	r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr
 8002000:	e000e100 	.word	0xe000e100
 8002004:	e000ed00 	.word	0xe000ed00

08002008 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002008:	b480      	push	{r7}
 800200a:	b089      	sub	sp, #36	; 0x24
 800200c:	af00      	add	r7, sp, #0
 800200e:	60f8      	str	r0, [r7, #12]
 8002010:	60b9      	str	r1, [r7, #8]
 8002012:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	f003 0307 	and.w	r3, r3, #7
 800201a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800201c:	69fb      	ldr	r3, [r7, #28]
 800201e:	f1c3 0307 	rsb	r3, r3, #7
 8002022:	2b04      	cmp	r3, #4
 8002024:	bf28      	it	cs
 8002026:	2304      	movcs	r3, #4
 8002028:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	3304      	adds	r3, #4
 800202e:	2b06      	cmp	r3, #6
 8002030:	d902      	bls.n	8002038 <NVIC_EncodePriority+0x30>
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	3b03      	subs	r3, #3
 8002036:	e000      	b.n	800203a <NVIC_EncodePriority+0x32>
 8002038:	2300      	movs	r3, #0
 800203a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800203c:	f04f 32ff 	mov.w	r2, #4294967295
 8002040:	69bb      	ldr	r3, [r7, #24]
 8002042:	fa02 f303 	lsl.w	r3, r2, r3
 8002046:	43da      	mvns	r2, r3
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	401a      	ands	r2, r3
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002050:	f04f 31ff 	mov.w	r1, #4294967295
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	fa01 f303 	lsl.w	r3, r1, r3
 800205a:	43d9      	mvns	r1, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002060:	4313      	orrs	r3, r2
         );
}
 8002062:	4618      	mov	r0, r3
 8002064:	3724      	adds	r7, #36	; 0x24
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr

0800206e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800206e:	b580      	push	{r7, lr}
 8002070:	b082      	sub	sp, #8
 8002072:	af00      	add	r7, sp, #0
 8002074:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f7ff ff4c 	bl	8001f14 <__NVIC_SetPriorityGrouping>
}
 800207c:	bf00      	nop
 800207e:	3708      	adds	r7, #8
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}

08002084 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002084:	b580      	push	{r7, lr}
 8002086:	b086      	sub	sp, #24
 8002088:	af00      	add	r7, sp, #0
 800208a:	4603      	mov	r3, r0
 800208c:	60b9      	str	r1, [r7, #8]
 800208e:	607a      	str	r2, [r7, #4]
 8002090:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002092:	2300      	movs	r3, #0
 8002094:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002096:	f7ff ff61 	bl	8001f5c <__NVIC_GetPriorityGrouping>
 800209a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800209c:	687a      	ldr	r2, [r7, #4]
 800209e:	68b9      	ldr	r1, [r7, #8]
 80020a0:	6978      	ldr	r0, [r7, #20]
 80020a2:	f7ff ffb1 	bl	8002008 <NVIC_EncodePriority>
 80020a6:	4602      	mov	r2, r0
 80020a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020ac:	4611      	mov	r1, r2
 80020ae:	4618      	mov	r0, r3
 80020b0:	f7ff ff80 	bl	8001fb4 <__NVIC_SetPriority>
}
 80020b4:	bf00      	nop
 80020b6:	3718      	adds	r7, #24
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}

080020bc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	4603      	mov	r3, r0
 80020c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ca:	4618      	mov	r0, r3
 80020cc:	f7ff ff54 	bl	8001f78 <__NVIC_EnableIRQ>
}
 80020d0:	bf00      	nop
 80020d2:	3708      	adds	r7, #8
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}

080020d8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b086      	sub	sp, #24
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80020e0:	2300      	movs	r3, #0
 80020e2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80020e4:	f7ff fee6 	bl	8001eb4 <HAL_GetTick>
 80020e8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d101      	bne.n	80020f4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e099      	b.n	8002228 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2202      	movs	r2, #2
 80020f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2200      	movs	r2, #0
 8002100:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f022 0201 	bic.w	r2, r2, #1
 8002112:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002114:	e00f      	b.n	8002136 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002116:	f7ff fecd 	bl	8001eb4 <HAL_GetTick>
 800211a:	4602      	mov	r2, r0
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	1ad3      	subs	r3, r2, r3
 8002120:	2b05      	cmp	r3, #5
 8002122:	d908      	bls.n	8002136 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2220      	movs	r2, #32
 8002128:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2203      	movs	r2, #3
 800212e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002132:	2303      	movs	r3, #3
 8002134:	e078      	b.n	8002228 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 0301 	and.w	r3, r3, #1
 8002140:	2b00      	cmp	r3, #0
 8002142:	d1e8      	bne.n	8002116 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800214c:	697a      	ldr	r2, [r7, #20]
 800214e:	4b38      	ldr	r3, [pc, #224]	; (8002230 <HAL_DMA_Init+0x158>)
 8002150:	4013      	ands	r3, r2
 8002152:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	685a      	ldr	r2, [r3, #4]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002162:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	691b      	ldr	r3, [r3, #16]
 8002168:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800216e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	699b      	ldr	r3, [r3, #24]
 8002174:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800217a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6a1b      	ldr	r3, [r3, #32]
 8002180:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002182:	697a      	ldr	r2, [r7, #20]
 8002184:	4313      	orrs	r3, r2
 8002186:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800218c:	2b04      	cmp	r3, #4
 800218e:	d107      	bne.n	80021a0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002198:	4313      	orrs	r3, r2
 800219a:	697a      	ldr	r2, [r7, #20]
 800219c:	4313      	orrs	r3, r2
 800219e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	697a      	ldr	r2, [r7, #20]
 80021a6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	695b      	ldr	r3, [r3, #20]
 80021ae:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	f023 0307 	bic.w	r3, r3, #7
 80021b6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021bc:	697a      	ldr	r2, [r7, #20]
 80021be:	4313      	orrs	r3, r2
 80021c0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c6:	2b04      	cmp	r3, #4
 80021c8:	d117      	bne.n	80021fa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ce:	697a      	ldr	r2, [r7, #20]
 80021d0:	4313      	orrs	r3, r2
 80021d2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d00e      	beq.n	80021fa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	f000 fa9d 	bl	800271c <DMA_CheckFifoParam>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d008      	beq.n	80021fa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2240      	movs	r2, #64	; 0x40
 80021ec:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2201      	movs	r2, #1
 80021f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80021f6:	2301      	movs	r3, #1
 80021f8:	e016      	b.n	8002228 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	697a      	ldr	r2, [r7, #20]
 8002200:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f000 fa54 	bl	80026b0 <DMA_CalcBaseAndBitshift>
 8002208:	4603      	mov	r3, r0
 800220a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002210:	223f      	movs	r2, #63	; 0x3f
 8002212:	409a      	lsls	r2, r3
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2200      	movs	r2, #0
 800221c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2201      	movs	r2, #1
 8002222:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002226:	2300      	movs	r3, #0
}
 8002228:	4618      	mov	r0, r3
 800222a:	3718      	adds	r7, #24
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}
 8002230:	f010803f 	.word	0xf010803f

08002234 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b086      	sub	sp, #24
 8002238:	af00      	add	r7, sp, #0
 800223a:	60f8      	str	r0, [r7, #12]
 800223c:	60b9      	str	r1, [r7, #8]
 800223e:	607a      	str	r2, [r7, #4]
 8002240:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002242:	2300      	movs	r3, #0
 8002244:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800224a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002252:	2b01      	cmp	r3, #1
 8002254:	d101      	bne.n	800225a <HAL_DMA_Start_IT+0x26>
 8002256:	2302      	movs	r3, #2
 8002258:	e040      	b.n	80022dc <HAL_DMA_Start_IT+0xa8>
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2201      	movs	r2, #1
 800225e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002268:	b2db      	uxtb	r3, r3
 800226a:	2b01      	cmp	r3, #1
 800226c:	d12f      	bne.n	80022ce <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2202      	movs	r2, #2
 8002272:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2200      	movs	r2, #0
 800227a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	687a      	ldr	r2, [r7, #4]
 8002280:	68b9      	ldr	r1, [r7, #8]
 8002282:	68f8      	ldr	r0, [r7, #12]
 8002284:	f000 f9e6 	bl	8002654 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800228c:	223f      	movs	r2, #63	; 0x3f
 800228e:	409a      	lsls	r2, r3
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f042 0216 	orr.w	r2, r2, #22
 80022a2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d007      	beq.n	80022bc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f042 0208 	orr.w	r2, r2, #8
 80022ba:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f042 0201 	orr.w	r2, r2, #1
 80022ca:	601a      	str	r2, [r3, #0]
 80022cc:	e005      	b.n	80022da <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2200      	movs	r2, #0
 80022d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80022d6:	2302      	movs	r3, #2
 80022d8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80022da:	7dfb      	ldrb	r3, [r7, #23]
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3718      	adds	r7, #24
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}

080022e4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	2b02      	cmp	r3, #2
 80022f6:	d004      	beq.n	8002302 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2280      	movs	r2, #128	; 0x80
 80022fc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e00c      	b.n	800231c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2205      	movs	r2, #5
 8002306:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f022 0201 	bic.w	r2, r2, #1
 8002318:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800231a:	2300      	movs	r3, #0
}
 800231c:	4618      	mov	r0, r3
 800231e:	370c      	adds	r7, #12
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr

08002328 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b086      	sub	sp, #24
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002330:	2300      	movs	r3, #0
 8002332:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002334:	4b92      	ldr	r3, [pc, #584]	; (8002580 <HAL_DMA_IRQHandler+0x258>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a92      	ldr	r2, [pc, #584]	; (8002584 <HAL_DMA_IRQHandler+0x25c>)
 800233a:	fba2 2303 	umull	r2, r3, r2, r3
 800233e:	0a9b      	lsrs	r3, r3, #10
 8002340:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002346:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002352:	2208      	movs	r2, #8
 8002354:	409a      	lsls	r2, r3
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	4013      	ands	r3, r2
 800235a:	2b00      	cmp	r3, #0
 800235c:	d01a      	beq.n	8002394 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 0304 	and.w	r3, r3, #4
 8002368:	2b00      	cmp	r3, #0
 800236a:	d013      	beq.n	8002394 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f022 0204 	bic.w	r2, r2, #4
 800237a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002380:	2208      	movs	r2, #8
 8002382:	409a      	lsls	r2, r3
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800238c:	f043 0201 	orr.w	r2, r3, #1
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002398:	2201      	movs	r2, #1
 800239a:	409a      	lsls	r2, r3
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	4013      	ands	r3, r2
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d012      	beq.n	80023ca <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	695b      	ldr	r3, [r3, #20]
 80023aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d00b      	beq.n	80023ca <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023b6:	2201      	movs	r2, #1
 80023b8:	409a      	lsls	r2, r3
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023c2:	f043 0202 	orr.w	r2, r3, #2
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023ce:	2204      	movs	r2, #4
 80023d0:	409a      	lsls	r2, r3
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	4013      	ands	r3, r2
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d012      	beq.n	8002400 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0302 	and.w	r3, r3, #2
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d00b      	beq.n	8002400 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023ec:	2204      	movs	r2, #4
 80023ee:	409a      	lsls	r2, r3
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023f8:	f043 0204 	orr.w	r2, r3, #4
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002404:	2210      	movs	r2, #16
 8002406:	409a      	lsls	r2, r3
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	4013      	ands	r3, r2
 800240c:	2b00      	cmp	r3, #0
 800240e:	d043      	beq.n	8002498 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0308 	and.w	r3, r3, #8
 800241a:	2b00      	cmp	r3, #0
 800241c:	d03c      	beq.n	8002498 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002422:	2210      	movs	r2, #16
 8002424:	409a      	lsls	r2, r3
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002434:	2b00      	cmp	r3, #0
 8002436:	d018      	beq.n	800246a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d108      	bne.n	8002458 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244a:	2b00      	cmp	r3, #0
 800244c:	d024      	beq.n	8002498 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	4798      	blx	r3
 8002456:	e01f      	b.n	8002498 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800245c:	2b00      	cmp	r3, #0
 800245e:	d01b      	beq.n	8002498 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	4798      	blx	r3
 8002468:	e016      	b.n	8002498 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002474:	2b00      	cmp	r3, #0
 8002476:	d107      	bne.n	8002488 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f022 0208 	bic.w	r2, r2, #8
 8002486:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248c:	2b00      	cmp	r3, #0
 800248e:	d003      	beq.n	8002498 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800249c:	2220      	movs	r2, #32
 800249e:	409a      	lsls	r2, r3
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	4013      	ands	r3, r2
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	f000 808e 	beq.w	80025c6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 0310 	and.w	r3, r3, #16
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	f000 8086 	beq.w	80025c6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024be:	2220      	movs	r2, #32
 80024c0:	409a      	lsls	r2, r3
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	2b05      	cmp	r3, #5
 80024d0:	d136      	bne.n	8002540 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f022 0216 	bic.w	r2, r2, #22
 80024e0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	695a      	ldr	r2, [r3, #20]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024f0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d103      	bne.n	8002502 <HAL_DMA_IRQHandler+0x1da>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d007      	beq.n	8002512 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f022 0208 	bic.w	r2, r2, #8
 8002510:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002516:	223f      	movs	r2, #63	; 0x3f
 8002518:	409a      	lsls	r2, r3
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2201      	movs	r2, #1
 8002522:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2200      	movs	r2, #0
 800252a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002532:	2b00      	cmp	r3, #0
 8002534:	d07d      	beq.n	8002632 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	4798      	blx	r3
        }
        return;
 800253e:	e078      	b.n	8002632 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d01c      	beq.n	8002588 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d108      	bne.n	800256e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002560:	2b00      	cmp	r3, #0
 8002562:	d030      	beq.n	80025c6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002568:	6878      	ldr	r0, [r7, #4]
 800256a:	4798      	blx	r3
 800256c:	e02b      	b.n	80025c6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002572:	2b00      	cmp	r3, #0
 8002574:	d027      	beq.n	80025c6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	4798      	blx	r3
 800257e:	e022      	b.n	80025c6 <HAL_DMA_IRQHandler+0x29e>
 8002580:	20000004 	.word	0x20000004
 8002584:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002592:	2b00      	cmp	r3, #0
 8002594:	d10f      	bne.n	80025b6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f022 0210 	bic.w	r2, r2, #16
 80025a4:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2201      	movs	r2, #1
 80025aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2200      	movs	r2, #0
 80025b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d003      	beq.n	80025c6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d032      	beq.n	8002634 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025d2:	f003 0301 	and.w	r3, r3, #1
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d022      	beq.n	8002620 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2205      	movs	r2, #5
 80025de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f022 0201 	bic.w	r2, r2, #1
 80025f0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	3301      	adds	r3, #1
 80025f6:	60bb      	str	r3, [r7, #8]
 80025f8:	697a      	ldr	r2, [r7, #20]
 80025fa:	429a      	cmp	r2, r3
 80025fc:	d307      	bcc.n	800260e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0301 	and.w	r3, r3, #1
 8002608:	2b00      	cmp	r3, #0
 800260a:	d1f2      	bne.n	80025f2 <HAL_DMA_IRQHandler+0x2ca>
 800260c:	e000      	b.n	8002610 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800260e:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2201      	movs	r2, #1
 8002614:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2200      	movs	r2, #0
 800261c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002624:	2b00      	cmp	r3, #0
 8002626:	d005      	beq.n	8002634 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	4798      	blx	r3
 8002630:	e000      	b.n	8002634 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002632:	bf00      	nop
    }
  }
}
 8002634:	3718      	adds	r7, #24
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop

0800263c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8002648:	4618      	mov	r0, r3
 800264a:	370c      	adds	r7, #12
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr

08002654 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002654:	b480      	push	{r7}
 8002656:	b085      	sub	sp, #20
 8002658:	af00      	add	r7, sp, #0
 800265a:	60f8      	str	r0, [r7, #12]
 800265c:	60b9      	str	r1, [r7, #8]
 800265e:	607a      	str	r2, [r7, #4]
 8002660:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002670:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	683a      	ldr	r2, [r7, #0]
 8002678:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	2b40      	cmp	r3, #64	; 0x40
 8002680:	d108      	bne.n	8002694 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	68ba      	ldr	r2, [r7, #8]
 8002690:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002692:	e007      	b.n	80026a4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	68ba      	ldr	r2, [r7, #8]
 800269a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	687a      	ldr	r2, [r7, #4]
 80026a2:	60da      	str	r2, [r3, #12]
}
 80026a4:	bf00      	nop
 80026a6:	3714      	adds	r7, #20
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr

080026b0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b085      	sub	sp, #20
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	3b10      	subs	r3, #16
 80026c0:	4a14      	ldr	r2, [pc, #80]	; (8002714 <DMA_CalcBaseAndBitshift+0x64>)
 80026c2:	fba2 2303 	umull	r2, r3, r2, r3
 80026c6:	091b      	lsrs	r3, r3, #4
 80026c8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80026ca:	4a13      	ldr	r2, [pc, #76]	; (8002718 <DMA_CalcBaseAndBitshift+0x68>)
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	4413      	add	r3, r2
 80026d0:	781b      	ldrb	r3, [r3, #0]
 80026d2:	461a      	mov	r2, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2b03      	cmp	r3, #3
 80026dc:	d909      	bls.n	80026f2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80026e6:	f023 0303 	bic.w	r3, r3, #3
 80026ea:	1d1a      	adds	r2, r3, #4
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	659a      	str	r2, [r3, #88]	; 0x58
 80026f0:	e007      	b.n	8002702 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80026fa:	f023 0303 	bic.w	r3, r3, #3
 80026fe:	687a      	ldr	r2, [r7, #4]
 8002700:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002706:	4618      	mov	r0, r3
 8002708:	3714      	adds	r7, #20
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop
 8002714:	aaaaaaab 	.word	0xaaaaaaab
 8002718:	0800a7fc 	.word	0x0800a7fc

0800271c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800271c:	b480      	push	{r7}
 800271e:	b085      	sub	sp, #20
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002724:	2300      	movs	r3, #0
 8002726:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800272c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	699b      	ldr	r3, [r3, #24]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d11f      	bne.n	8002776 <DMA_CheckFifoParam+0x5a>
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	2b03      	cmp	r3, #3
 800273a:	d856      	bhi.n	80027ea <DMA_CheckFifoParam+0xce>
 800273c:	a201      	add	r2, pc, #4	; (adr r2, 8002744 <DMA_CheckFifoParam+0x28>)
 800273e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002742:	bf00      	nop
 8002744:	08002755 	.word	0x08002755
 8002748:	08002767 	.word	0x08002767
 800274c:	08002755 	.word	0x08002755
 8002750:	080027eb 	.word	0x080027eb
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002758:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800275c:	2b00      	cmp	r3, #0
 800275e:	d046      	beq.n	80027ee <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002764:	e043      	b.n	80027ee <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800276a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800276e:	d140      	bne.n	80027f2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002774:	e03d      	b.n	80027f2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	699b      	ldr	r3, [r3, #24]
 800277a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800277e:	d121      	bne.n	80027c4 <DMA_CheckFifoParam+0xa8>
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	2b03      	cmp	r3, #3
 8002784:	d837      	bhi.n	80027f6 <DMA_CheckFifoParam+0xda>
 8002786:	a201      	add	r2, pc, #4	; (adr r2, 800278c <DMA_CheckFifoParam+0x70>)
 8002788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800278c:	0800279d 	.word	0x0800279d
 8002790:	080027a3 	.word	0x080027a3
 8002794:	0800279d 	.word	0x0800279d
 8002798:	080027b5 	.word	0x080027b5
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	73fb      	strb	r3, [r7, #15]
      break;
 80027a0:	e030      	b.n	8002804 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d025      	beq.n	80027fa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027b2:	e022      	b.n	80027fa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027b8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80027bc:	d11f      	bne.n	80027fe <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80027c2:	e01c      	b.n	80027fe <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	d903      	bls.n	80027d2 <DMA_CheckFifoParam+0xb6>
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	2b03      	cmp	r3, #3
 80027ce:	d003      	beq.n	80027d8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80027d0:	e018      	b.n	8002804 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	73fb      	strb	r3, [r7, #15]
      break;
 80027d6:	e015      	b.n	8002804 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d00e      	beq.n	8002802 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	73fb      	strb	r3, [r7, #15]
      break;
 80027e8:	e00b      	b.n	8002802 <DMA_CheckFifoParam+0xe6>
      break;
 80027ea:	bf00      	nop
 80027ec:	e00a      	b.n	8002804 <DMA_CheckFifoParam+0xe8>
      break;
 80027ee:	bf00      	nop
 80027f0:	e008      	b.n	8002804 <DMA_CheckFifoParam+0xe8>
      break;
 80027f2:	bf00      	nop
 80027f4:	e006      	b.n	8002804 <DMA_CheckFifoParam+0xe8>
      break;
 80027f6:	bf00      	nop
 80027f8:	e004      	b.n	8002804 <DMA_CheckFifoParam+0xe8>
      break;
 80027fa:	bf00      	nop
 80027fc:	e002      	b.n	8002804 <DMA_CheckFifoParam+0xe8>
      break;   
 80027fe:	bf00      	nop
 8002800:	e000      	b.n	8002804 <DMA_CheckFifoParam+0xe8>
      break;
 8002802:	bf00      	nop
    }
  } 
  
  return status; 
 8002804:	7bfb      	ldrb	r3, [r7, #15]
}
 8002806:	4618      	mov	r0, r3
 8002808:	3714      	adds	r7, #20
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr
 8002812:	bf00      	nop

08002814 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002814:	b480      	push	{r7}
 8002816:	b089      	sub	sp, #36	; 0x24
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
 800281c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800281e:	2300      	movs	r3, #0
 8002820:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002822:	2300      	movs	r3, #0
 8002824:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002826:	2300      	movs	r3, #0
 8002828:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800282a:	2300      	movs	r3, #0
 800282c:	61fb      	str	r3, [r7, #28]
 800282e:	e177      	b.n	8002b20 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002830:	2201      	movs	r2, #1
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	fa02 f303 	lsl.w	r3, r2, r3
 8002838:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	697a      	ldr	r2, [r7, #20]
 8002840:	4013      	ands	r3, r2
 8002842:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002844:	693a      	ldr	r2, [r7, #16]
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	429a      	cmp	r2, r3
 800284a:	f040 8166 	bne.w	8002b1a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	f003 0303 	and.w	r3, r3, #3
 8002856:	2b01      	cmp	r3, #1
 8002858:	d005      	beq.n	8002866 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002862:	2b02      	cmp	r3, #2
 8002864:	d130      	bne.n	80028c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	005b      	lsls	r3, r3, #1
 8002870:	2203      	movs	r2, #3
 8002872:	fa02 f303 	lsl.w	r3, r2, r3
 8002876:	43db      	mvns	r3, r3
 8002878:	69ba      	ldr	r2, [r7, #24]
 800287a:	4013      	ands	r3, r2
 800287c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	68da      	ldr	r2, [r3, #12]
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	005b      	lsls	r3, r3, #1
 8002886:	fa02 f303 	lsl.w	r3, r2, r3
 800288a:	69ba      	ldr	r2, [r7, #24]
 800288c:	4313      	orrs	r3, r2
 800288e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	69ba      	ldr	r2, [r7, #24]
 8002894:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800289c:	2201      	movs	r2, #1
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	fa02 f303 	lsl.w	r3, r2, r3
 80028a4:	43db      	mvns	r3, r3
 80028a6:	69ba      	ldr	r2, [r7, #24]
 80028a8:	4013      	ands	r3, r2
 80028aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	091b      	lsrs	r3, r3, #4
 80028b2:	f003 0201 	and.w	r2, r3, #1
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	fa02 f303 	lsl.w	r3, r2, r3
 80028bc:	69ba      	ldr	r2, [r7, #24]
 80028be:	4313      	orrs	r3, r2
 80028c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	69ba      	ldr	r2, [r7, #24]
 80028c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f003 0303 	and.w	r3, r3, #3
 80028d0:	2b03      	cmp	r3, #3
 80028d2:	d017      	beq.n	8002904 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	005b      	lsls	r3, r3, #1
 80028de:	2203      	movs	r2, #3
 80028e0:	fa02 f303 	lsl.w	r3, r2, r3
 80028e4:	43db      	mvns	r3, r3
 80028e6:	69ba      	ldr	r2, [r7, #24]
 80028e8:	4013      	ands	r3, r2
 80028ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	689a      	ldr	r2, [r3, #8]
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	005b      	lsls	r3, r3, #1
 80028f4:	fa02 f303 	lsl.w	r3, r2, r3
 80028f8:	69ba      	ldr	r2, [r7, #24]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	69ba      	ldr	r2, [r7, #24]
 8002902:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f003 0303 	and.w	r3, r3, #3
 800290c:	2b02      	cmp	r3, #2
 800290e:	d123      	bne.n	8002958 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	08da      	lsrs	r2, r3, #3
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	3208      	adds	r2, #8
 8002918:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800291c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	f003 0307 	and.w	r3, r3, #7
 8002924:	009b      	lsls	r3, r3, #2
 8002926:	220f      	movs	r2, #15
 8002928:	fa02 f303 	lsl.w	r3, r2, r3
 800292c:	43db      	mvns	r3, r3
 800292e:	69ba      	ldr	r2, [r7, #24]
 8002930:	4013      	ands	r3, r2
 8002932:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	691a      	ldr	r2, [r3, #16]
 8002938:	69fb      	ldr	r3, [r7, #28]
 800293a:	f003 0307 	and.w	r3, r3, #7
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	fa02 f303 	lsl.w	r3, r2, r3
 8002944:	69ba      	ldr	r2, [r7, #24]
 8002946:	4313      	orrs	r3, r2
 8002948:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	08da      	lsrs	r2, r3, #3
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	3208      	adds	r2, #8
 8002952:	69b9      	ldr	r1, [r7, #24]
 8002954:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800295e:	69fb      	ldr	r3, [r7, #28]
 8002960:	005b      	lsls	r3, r3, #1
 8002962:	2203      	movs	r2, #3
 8002964:	fa02 f303 	lsl.w	r3, r2, r3
 8002968:	43db      	mvns	r3, r3
 800296a:	69ba      	ldr	r2, [r7, #24]
 800296c:	4013      	ands	r3, r2
 800296e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	f003 0203 	and.w	r2, r3, #3
 8002978:	69fb      	ldr	r3, [r7, #28]
 800297a:	005b      	lsls	r3, r3, #1
 800297c:	fa02 f303 	lsl.w	r3, r2, r3
 8002980:	69ba      	ldr	r2, [r7, #24]
 8002982:	4313      	orrs	r3, r2
 8002984:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	69ba      	ldr	r2, [r7, #24]
 800298a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002994:	2b00      	cmp	r3, #0
 8002996:	f000 80c0 	beq.w	8002b1a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800299a:	2300      	movs	r3, #0
 800299c:	60fb      	str	r3, [r7, #12]
 800299e:	4b66      	ldr	r3, [pc, #408]	; (8002b38 <HAL_GPIO_Init+0x324>)
 80029a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029a2:	4a65      	ldr	r2, [pc, #404]	; (8002b38 <HAL_GPIO_Init+0x324>)
 80029a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029a8:	6453      	str	r3, [r2, #68]	; 0x44
 80029aa:	4b63      	ldr	r3, [pc, #396]	; (8002b38 <HAL_GPIO_Init+0x324>)
 80029ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029b2:	60fb      	str	r3, [r7, #12]
 80029b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029b6:	4a61      	ldr	r2, [pc, #388]	; (8002b3c <HAL_GPIO_Init+0x328>)
 80029b8:	69fb      	ldr	r3, [r7, #28]
 80029ba:	089b      	lsrs	r3, r3, #2
 80029bc:	3302      	adds	r3, #2
 80029be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	f003 0303 	and.w	r3, r3, #3
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	220f      	movs	r2, #15
 80029ce:	fa02 f303 	lsl.w	r3, r2, r3
 80029d2:	43db      	mvns	r3, r3
 80029d4:	69ba      	ldr	r2, [r7, #24]
 80029d6:	4013      	ands	r3, r2
 80029d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	4a58      	ldr	r2, [pc, #352]	; (8002b40 <HAL_GPIO_Init+0x32c>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d037      	beq.n	8002a52 <HAL_GPIO_Init+0x23e>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4a57      	ldr	r2, [pc, #348]	; (8002b44 <HAL_GPIO_Init+0x330>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d031      	beq.n	8002a4e <HAL_GPIO_Init+0x23a>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4a56      	ldr	r2, [pc, #344]	; (8002b48 <HAL_GPIO_Init+0x334>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d02b      	beq.n	8002a4a <HAL_GPIO_Init+0x236>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4a55      	ldr	r2, [pc, #340]	; (8002b4c <HAL_GPIO_Init+0x338>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d025      	beq.n	8002a46 <HAL_GPIO_Init+0x232>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4a54      	ldr	r2, [pc, #336]	; (8002b50 <HAL_GPIO_Init+0x33c>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d01f      	beq.n	8002a42 <HAL_GPIO_Init+0x22e>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4a53      	ldr	r2, [pc, #332]	; (8002b54 <HAL_GPIO_Init+0x340>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d019      	beq.n	8002a3e <HAL_GPIO_Init+0x22a>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4a52      	ldr	r2, [pc, #328]	; (8002b58 <HAL_GPIO_Init+0x344>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d013      	beq.n	8002a3a <HAL_GPIO_Init+0x226>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4a51      	ldr	r2, [pc, #324]	; (8002b5c <HAL_GPIO_Init+0x348>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d00d      	beq.n	8002a36 <HAL_GPIO_Init+0x222>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4a50      	ldr	r2, [pc, #320]	; (8002b60 <HAL_GPIO_Init+0x34c>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d007      	beq.n	8002a32 <HAL_GPIO_Init+0x21e>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4a4f      	ldr	r2, [pc, #316]	; (8002b64 <HAL_GPIO_Init+0x350>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d101      	bne.n	8002a2e <HAL_GPIO_Init+0x21a>
 8002a2a:	2309      	movs	r3, #9
 8002a2c:	e012      	b.n	8002a54 <HAL_GPIO_Init+0x240>
 8002a2e:	230a      	movs	r3, #10
 8002a30:	e010      	b.n	8002a54 <HAL_GPIO_Init+0x240>
 8002a32:	2308      	movs	r3, #8
 8002a34:	e00e      	b.n	8002a54 <HAL_GPIO_Init+0x240>
 8002a36:	2307      	movs	r3, #7
 8002a38:	e00c      	b.n	8002a54 <HAL_GPIO_Init+0x240>
 8002a3a:	2306      	movs	r3, #6
 8002a3c:	e00a      	b.n	8002a54 <HAL_GPIO_Init+0x240>
 8002a3e:	2305      	movs	r3, #5
 8002a40:	e008      	b.n	8002a54 <HAL_GPIO_Init+0x240>
 8002a42:	2304      	movs	r3, #4
 8002a44:	e006      	b.n	8002a54 <HAL_GPIO_Init+0x240>
 8002a46:	2303      	movs	r3, #3
 8002a48:	e004      	b.n	8002a54 <HAL_GPIO_Init+0x240>
 8002a4a:	2302      	movs	r3, #2
 8002a4c:	e002      	b.n	8002a54 <HAL_GPIO_Init+0x240>
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e000      	b.n	8002a54 <HAL_GPIO_Init+0x240>
 8002a52:	2300      	movs	r3, #0
 8002a54:	69fa      	ldr	r2, [r7, #28]
 8002a56:	f002 0203 	and.w	r2, r2, #3
 8002a5a:	0092      	lsls	r2, r2, #2
 8002a5c:	4093      	lsls	r3, r2
 8002a5e:	69ba      	ldr	r2, [r7, #24]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a64:	4935      	ldr	r1, [pc, #212]	; (8002b3c <HAL_GPIO_Init+0x328>)
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	089b      	lsrs	r3, r3, #2
 8002a6a:	3302      	adds	r3, #2
 8002a6c:	69ba      	ldr	r2, [r7, #24]
 8002a6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a72:	4b3d      	ldr	r3, [pc, #244]	; (8002b68 <HAL_GPIO_Init+0x354>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	43db      	mvns	r3, r3
 8002a7c:	69ba      	ldr	r2, [r7, #24]
 8002a7e:	4013      	ands	r3, r2
 8002a80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d003      	beq.n	8002a96 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002a8e:	69ba      	ldr	r2, [r7, #24]
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a96:	4a34      	ldr	r2, [pc, #208]	; (8002b68 <HAL_GPIO_Init+0x354>)
 8002a98:	69bb      	ldr	r3, [r7, #24]
 8002a9a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002a9c:	4b32      	ldr	r3, [pc, #200]	; (8002b68 <HAL_GPIO_Init+0x354>)
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	43db      	mvns	r3, r3
 8002aa6:	69ba      	ldr	r2, [r7, #24]
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d003      	beq.n	8002ac0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002ab8:	69ba      	ldr	r2, [r7, #24]
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ac0:	4a29      	ldr	r2, [pc, #164]	; (8002b68 <HAL_GPIO_Init+0x354>)
 8002ac2:	69bb      	ldr	r3, [r7, #24]
 8002ac4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ac6:	4b28      	ldr	r3, [pc, #160]	; (8002b68 <HAL_GPIO_Init+0x354>)
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	43db      	mvns	r3, r3
 8002ad0:	69ba      	ldr	r2, [r7, #24]
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d003      	beq.n	8002aea <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002ae2:	69ba      	ldr	r2, [r7, #24]
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002aea:	4a1f      	ldr	r2, [pc, #124]	; (8002b68 <HAL_GPIO_Init+0x354>)
 8002aec:	69bb      	ldr	r3, [r7, #24]
 8002aee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002af0:	4b1d      	ldr	r3, [pc, #116]	; (8002b68 <HAL_GPIO_Init+0x354>)
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	43db      	mvns	r3, r3
 8002afa:	69ba      	ldr	r2, [r7, #24]
 8002afc:	4013      	ands	r3, r2
 8002afe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d003      	beq.n	8002b14 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002b0c:	69ba      	ldr	r2, [r7, #24]
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b14:	4a14      	ldr	r2, [pc, #80]	; (8002b68 <HAL_GPIO_Init+0x354>)
 8002b16:	69bb      	ldr	r3, [r7, #24]
 8002b18:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	3301      	adds	r3, #1
 8002b1e:	61fb      	str	r3, [r7, #28]
 8002b20:	69fb      	ldr	r3, [r7, #28]
 8002b22:	2b0f      	cmp	r3, #15
 8002b24:	f67f ae84 	bls.w	8002830 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b28:	bf00      	nop
 8002b2a:	bf00      	nop
 8002b2c:	3724      	adds	r7, #36	; 0x24
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr
 8002b36:	bf00      	nop
 8002b38:	40023800 	.word	0x40023800
 8002b3c:	40013800 	.word	0x40013800
 8002b40:	40020000 	.word	0x40020000
 8002b44:	40020400 	.word	0x40020400
 8002b48:	40020800 	.word	0x40020800
 8002b4c:	40020c00 	.word	0x40020c00
 8002b50:	40021000 	.word	0x40021000
 8002b54:	40021400 	.word	0x40021400
 8002b58:	40021800 	.word	0x40021800
 8002b5c:	40021c00 	.word	0x40021c00
 8002b60:	40022000 	.word	0x40022000
 8002b64:	40022400 	.word	0x40022400
 8002b68:	40013c00 	.word	0x40013c00

08002b6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b083      	sub	sp, #12
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
 8002b74:	460b      	mov	r3, r1
 8002b76:	807b      	strh	r3, [r7, #2]
 8002b78:	4613      	mov	r3, r2
 8002b7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b7c:	787b      	ldrb	r3, [r7, #1]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d003      	beq.n	8002b8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b82:	887a      	ldrh	r2, [r7, #2]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b88:	e003      	b.n	8002b92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b8a:	887b      	ldrh	r3, [r7, #2]
 8002b8c:	041a      	lsls	r2, r3, #16
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	619a      	str	r2, [r3, #24]
}
 8002b92:	bf00      	nop
 8002b94:	370c      	adds	r7, #12
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr

08002b9e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b9e:	b480      	push	{r7}
 8002ba0:	b085      	sub	sp, #20
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	6078      	str	r0, [r7, #4]
 8002ba6:	460b      	mov	r3, r1
 8002ba8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	695b      	ldr	r3, [r3, #20]
 8002bae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002bb0:	887a      	ldrh	r2, [r7, #2]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	041a      	lsls	r2, r3, #16
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	43d9      	mvns	r1, r3
 8002bbc:	887b      	ldrh	r3, [r7, #2]
 8002bbe:	400b      	ands	r3, r1
 8002bc0:	431a      	orrs	r2, r3
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	619a      	str	r2, [r3, #24]
}
 8002bc6:	bf00      	nop
 8002bc8:	3714      	adds	r7, #20
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr
	...

08002bd4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b086      	sub	sp, #24
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d101      	bne.n	8002be6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e264      	b.n	80030b0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0301 	and.w	r3, r3, #1
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d075      	beq.n	8002cde <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002bf2:	4ba3      	ldr	r3, [pc, #652]	; (8002e80 <HAL_RCC_OscConfig+0x2ac>)
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	f003 030c 	and.w	r3, r3, #12
 8002bfa:	2b04      	cmp	r3, #4
 8002bfc:	d00c      	beq.n	8002c18 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bfe:	4ba0      	ldr	r3, [pc, #640]	; (8002e80 <HAL_RCC_OscConfig+0x2ac>)
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c06:	2b08      	cmp	r3, #8
 8002c08:	d112      	bne.n	8002c30 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c0a:	4b9d      	ldr	r3, [pc, #628]	; (8002e80 <HAL_RCC_OscConfig+0x2ac>)
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c16:	d10b      	bne.n	8002c30 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c18:	4b99      	ldr	r3, [pc, #612]	; (8002e80 <HAL_RCC_OscConfig+0x2ac>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d05b      	beq.n	8002cdc <HAL_RCC_OscConfig+0x108>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d157      	bne.n	8002cdc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e23f      	b.n	80030b0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c38:	d106      	bne.n	8002c48 <HAL_RCC_OscConfig+0x74>
 8002c3a:	4b91      	ldr	r3, [pc, #580]	; (8002e80 <HAL_RCC_OscConfig+0x2ac>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a90      	ldr	r2, [pc, #576]	; (8002e80 <HAL_RCC_OscConfig+0x2ac>)
 8002c40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c44:	6013      	str	r3, [r2, #0]
 8002c46:	e01d      	b.n	8002c84 <HAL_RCC_OscConfig+0xb0>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c50:	d10c      	bne.n	8002c6c <HAL_RCC_OscConfig+0x98>
 8002c52:	4b8b      	ldr	r3, [pc, #556]	; (8002e80 <HAL_RCC_OscConfig+0x2ac>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a8a      	ldr	r2, [pc, #552]	; (8002e80 <HAL_RCC_OscConfig+0x2ac>)
 8002c58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c5c:	6013      	str	r3, [r2, #0]
 8002c5e:	4b88      	ldr	r3, [pc, #544]	; (8002e80 <HAL_RCC_OscConfig+0x2ac>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a87      	ldr	r2, [pc, #540]	; (8002e80 <HAL_RCC_OscConfig+0x2ac>)
 8002c64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c68:	6013      	str	r3, [r2, #0]
 8002c6a:	e00b      	b.n	8002c84 <HAL_RCC_OscConfig+0xb0>
 8002c6c:	4b84      	ldr	r3, [pc, #528]	; (8002e80 <HAL_RCC_OscConfig+0x2ac>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a83      	ldr	r2, [pc, #524]	; (8002e80 <HAL_RCC_OscConfig+0x2ac>)
 8002c72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c76:	6013      	str	r3, [r2, #0]
 8002c78:	4b81      	ldr	r3, [pc, #516]	; (8002e80 <HAL_RCC_OscConfig+0x2ac>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a80      	ldr	r2, [pc, #512]	; (8002e80 <HAL_RCC_OscConfig+0x2ac>)
 8002c7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d013      	beq.n	8002cb4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c8c:	f7ff f912 	bl	8001eb4 <HAL_GetTick>
 8002c90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c92:	e008      	b.n	8002ca6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c94:	f7ff f90e 	bl	8001eb4 <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	2b64      	cmp	r3, #100	; 0x64
 8002ca0:	d901      	bls.n	8002ca6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e204      	b.n	80030b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ca6:	4b76      	ldr	r3, [pc, #472]	; (8002e80 <HAL_RCC_OscConfig+0x2ac>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d0f0      	beq.n	8002c94 <HAL_RCC_OscConfig+0xc0>
 8002cb2:	e014      	b.n	8002cde <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cb4:	f7ff f8fe 	bl	8001eb4 <HAL_GetTick>
 8002cb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cba:	e008      	b.n	8002cce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cbc:	f7ff f8fa 	bl	8001eb4 <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	2b64      	cmp	r3, #100	; 0x64
 8002cc8:	d901      	bls.n	8002cce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e1f0      	b.n	80030b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cce:	4b6c      	ldr	r3, [pc, #432]	; (8002e80 <HAL_RCC_OscConfig+0x2ac>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d1f0      	bne.n	8002cbc <HAL_RCC_OscConfig+0xe8>
 8002cda:	e000      	b.n	8002cde <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cdc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0302 	and.w	r3, r3, #2
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d063      	beq.n	8002db2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002cea:	4b65      	ldr	r3, [pc, #404]	; (8002e80 <HAL_RCC_OscConfig+0x2ac>)
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	f003 030c 	and.w	r3, r3, #12
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d00b      	beq.n	8002d0e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cf6:	4b62      	ldr	r3, [pc, #392]	; (8002e80 <HAL_RCC_OscConfig+0x2ac>)
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002cfe:	2b08      	cmp	r3, #8
 8002d00:	d11c      	bne.n	8002d3c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d02:	4b5f      	ldr	r3, [pc, #380]	; (8002e80 <HAL_RCC_OscConfig+0x2ac>)
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d116      	bne.n	8002d3c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d0e:	4b5c      	ldr	r3, [pc, #368]	; (8002e80 <HAL_RCC_OscConfig+0x2ac>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0302 	and.w	r3, r3, #2
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d005      	beq.n	8002d26 <HAL_RCC_OscConfig+0x152>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	68db      	ldr	r3, [r3, #12]
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d001      	beq.n	8002d26 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e1c4      	b.n	80030b0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d26:	4b56      	ldr	r3, [pc, #344]	; (8002e80 <HAL_RCC_OscConfig+0x2ac>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	691b      	ldr	r3, [r3, #16]
 8002d32:	00db      	lsls	r3, r3, #3
 8002d34:	4952      	ldr	r1, [pc, #328]	; (8002e80 <HAL_RCC_OscConfig+0x2ac>)
 8002d36:	4313      	orrs	r3, r2
 8002d38:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d3a:	e03a      	b.n	8002db2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d020      	beq.n	8002d86 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d44:	4b4f      	ldr	r3, [pc, #316]	; (8002e84 <HAL_RCC_OscConfig+0x2b0>)
 8002d46:	2201      	movs	r2, #1
 8002d48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d4a:	f7ff f8b3 	bl	8001eb4 <HAL_GetTick>
 8002d4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d50:	e008      	b.n	8002d64 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d52:	f7ff f8af 	bl	8001eb4 <HAL_GetTick>
 8002d56:	4602      	mov	r2, r0
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	1ad3      	subs	r3, r2, r3
 8002d5c:	2b02      	cmp	r3, #2
 8002d5e:	d901      	bls.n	8002d64 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002d60:	2303      	movs	r3, #3
 8002d62:	e1a5      	b.n	80030b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d64:	4b46      	ldr	r3, [pc, #280]	; (8002e80 <HAL_RCC_OscConfig+0x2ac>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 0302 	and.w	r3, r3, #2
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d0f0      	beq.n	8002d52 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d70:	4b43      	ldr	r3, [pc, #268]	; (8002e80 <HAL_RCC_OscConfig+0x2ac>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	691b      	ldr	r3, [r3, #16]
 8002d7c:	00db      	lsls	r3, r3, #3
 8002d7e:	4940      	ldr	r1, [pc, #256]	; (8002e80 <HAL_RCC_OscConfig+0x2ac>)
 8002d80:	4313      	orrs	r3, r2
 8002d82:	600b      	str	r3, [r1, #0]
 8002d84:	e015      	b.n	8002db2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d86:	4b3f      	ldr	r3, [pc, #252]	; (8002e84 <HAL_RCC_OscConfig+0x2b0>)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d8c:	f7ff f892 	bl	8001eb4 <HAL_GetTick>
 8002d90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d92:	e008      	b.n	8002da6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d94:	f7ff f88e 	bl	8001eb4 <HAL_GetTick>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d901      	bls.n	8002da6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002da2:	2303      	movs	r3, #3
 8002da4:	e184      	b.n	80030b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002da6:	4b36      	ldr	r3, [pc, #216]	; (8002e80 <HAL_RCC_OscConfig+0x2ac>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 0302 	and.w	r3, r3, #2
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d1f0      	bne.n	8002d94 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0308 	and.w	r3, r3, #8
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d030      	beq.n	8002e20 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	695b      	ldr	r3, [r3, #20]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d016      	beq.n	8002df4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dc6:	4b30      	ldr	r3, [pc, #192]	; (8002e88 <HAL_RCC_OscConfig+0x2b4>)
 8002dc8:	2201      	movs	r2, #1
 8002dca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dcc:	f7ff f872 	bl	8001eb4 <HAL_GetTick>
 8002dd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dd2:	e008      	b.n	8002de6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002dd4:	f7ff f86e 	bl	8001eb4 <HAL_GetTick>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d901      	bls.n	8002de6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	e164      	b.n	80030b0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002de6:	4b26      	ldr	r3, [pc, #152]	; (8002e80 <HAL_RCC_OscConfig+0x2ac>)
 8002de8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dea:	f003 0302 	and.w	r3, r3, #2
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d0f0      	beq.n	8002dd4 <HAL_RCC_OscConfig+0x200>
 8002df2:	e015      	b.n	8002e20 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002df4:	4b24      	ldr	r3, [pc, #144]	; (8002e88 <HAL_RCC_OscConfig+0x2b4>)
 8002df6:	2200      	movs	r2, #0
 8002df8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dfa:	f7ff f85b 	bl	8001eb4 <HAL_GetTick>
 8002dfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e00:	e008      	b.n	8002e14 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e02:	f7ff f857 	bl	8001eb4 <HAL_GetTick>
 8002e06:	4602      	mov	r2, r0
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	1ad3      	subs	r3, r2, r3
 8002e0c:	2b02      	cmp	r3, #2
 8002e0e:	d901      	bls.n	8002e14 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002e10:	2303      	movs	r3, #3
 8002e12:	e14d      	b.n	80030b0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e14:	4b1a      	ldr	r3, [pc, #104]	; (8002e80 <HAL_RCC_OscConfig+0x2ac>)
 8002e16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e18:	f003 0302 	and.w	r3, r3, #2
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d1f0      	bne.n	8002e02 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 0304 	and.w	r3, r3, #4
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	f000 80a0 	beq.w	8002f6e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e32:	4b13      	ldr	r3, [pc, #76]	; (8002e80 <HAL_RCC_OscConfig+0x2ac>)
 8002e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d10f      	bne.n	8002e5e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e3e:	2300      	movs	r3, #0
 8002e40:	60bb      	str	r3, [r7, #8]
 8002e42:	4b0f      	ldr	r3, [pc, #60]	; (8002e80 <HAL_RCC_OscConfig+0x2ac>)
 8002e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e46:	4a0e      	ldr	r2, [pc, #56]	; (8002e80 <HAL_RCC_OscConfig+0x2ac>)
 8002e48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e4c:	6413      	str	r3, [r2, #64]	; 0x40
 8002e4e:	4b0c      	ldr	r3, [pc, #48]	; (8002e80 <HAL_RCC_OscConfig+0x2ac>)
 8002e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e56:	60bb      	str	r3, [r7, #8]
 8002e58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e5e:	4b0b      	ldr	r3, [pc, #44]	; (8002e8c <HAL_RCC_OscConfig+0x2b8>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d121      	bne.n	8002eae <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e6a:	4b08      	ldr	r3, [pc, #32]	; (8002e8c <HAL_RCC_OscConfig+0x2b8>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a07      	ldr	r2, [pc, #28]	; (8002e8c <HAL_RCC_OscConfig+0x2b8>)
 8002e70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e76:	f7ff f81d 	bl	8001eb4 <HAL_GetTick>
 8002e7a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e7c:	e011      	b.n	8002ea2 <HAL_RCC_OscConfig+0x2ce>
 8002e7e:	bf00      	nop
 8002e80:	40023800 	.word	0x40023800
 8002e84:	42470000 	.word	0x42470000
 8002e88:	42470e80 	.word	0x42470e80
 8002e8c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e90:	f7ff f810 	bl	8001eb4 <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	2b02      	cmp	r3, #2
 8002e9c:	d901      	bls.n	8002ea2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e106      	b.n	80030b0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ea2:	4b85      	ldr	r3, [pc, #532]	; (80030b8 <HAL_RCC_OscConfig+0x4e4>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d0f0      	beq.n	8002e90 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d106      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x2f0>
 8002eb6:	4b81      	ldr	r3, [pc, #516]	; (80030bc <HAL_RCC_OscConfig+0x4e8>)
 8002eb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eba:	4a80      	ldr	r2, [pc, #512]	; (80030bc <HAL_RCC_OscConfig+0x4e8>)
 8002ebc:	f043 0301 	orr.w	r3, r3, #1
 8002ec0:	6713      	str	r3, [r2, #112]	; 0x70
 8002ec2:	e01c      	b.n	8002efe <HAL_RCC_OscConfig+0x32a>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	2b05      	cmp	r3, #5
 8002eca:	d10c      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x312>
 8002ecc:	4b7b      	ldr	r3, [pc, #492]	; (80030bc <HAL_RCC_OscConfig+0x4e8>)
 8002ece:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ed0:	4a7a      	ldr	r2, [pc, #488]	; (80030bc <HAL_RCC_OscConfig+0x4e8>)
 8002ed2:	f043 0304 	orr.w	r3, r3, #4
 8002ed6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ed8:	4b78      	ldr	r3, [pc, #480]	; (80030bc <HAL_RCC_OscConfig+0x4e8>)
 8002eda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002edc:	4a77      	ldr	r2, [pc, #476]	; (80030bc <HAL_RCC_OscConfig+0x4e8>)
 8002ede:	f043 0301 	orr.w	r3, r3, #1
 8002ee2:	6713      	str	r3, [r2, #112]	; 0x70
 8002ee4:	e00b      	b.n	8002efe <HAL_RCC_OscConfig+0x32a>
 8002ee6:	4b75      	ldr	r3, [pc, #468]	; (80030bc <HAL_RCC_OscConfig+0x4e8>)
 8002ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eea:	4a74      	ldr	r2, [pc, #464]	; (80030bc <HAL_RCC_OscConfig+0x4e8>)
 8002eec:	f023 0301 	bic.w	r3, r3, #1
 8002ef0:	6713      	str	r3, [r2, #112]	; 0x70
 8002ef2:	4b72      	ldr	r3, [pc, #456]	; (80030bc <HAL_RCC_OscConfig+0x4e8>)
 8002ef4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ef6:	4a71      	ldr	r2, [pc, #452]	; (80030bc <HAL_RCC_OscConfig+0x4e8>)
 8002ef8:	f023 0304 	bic.w	r3, r3, #4
 8002efc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d015      	beq.n	8002f32 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f06:	f7fe ffd5 	bl	8001eb4 <HAL_GetTick>
 8002f0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f0c:	e00a      	b.n	8002f24 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f0e:	f7fe ffd1 	bl	8001eb4 <HAL_GetTick>
 8002f12:	4602      	mov	r2, r0
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d901      	bls.n	8002f24 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002f20:	2303      	movs	r3, #3
 8002f22:	e0c5      	b.n	80030b0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f24:	4b65      	ldr	r3, [pc, #404]	; (80030bc <HAL_RCC_OscConfig+0x4e8>)
 8002f26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f28:	f003 0302 	and.w	r3, r3, #2
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d0ee      	beq.n	8002f0e <HAL_RCC_OscConfig+0x33a>
 8002f30:	e014      	b.n	8002f5c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f32:	f7fe ffbf 	bl	8001eb4 <HAL_GetTick>
 8002f36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f38:	e00a      	b.n	8002f50 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f3a:	f7fe ffbb 	bl	8001eb4 <HAL_GetTick>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	1ad3      	subs	r3, r2, r3
 8002f44:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d901      	bls.n	8002f50 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002f4c:	2303      	movs	r3, #3
 8002f4e:	e0af      	b.n	80030b0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f50:	4b5a      	ldr	r3, [pc, #360]	; (80030bc <HAL_RCC_OscConfig+0x4e8>)
 8002f52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f54:	f003 0302 	and.w	r3, r3, #2
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d1ee      	bne.n	8002f3a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f5c:	7dfb      	ldrb	r3, [r7, #23]
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d105      	bne.n	8002f6e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f62:	4b56      	ldr	r3, [pc, #344]	; (80030bc <HAL_RCC_OscConfig+0x4e8>)
 8002f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f66:	4a55      	ldr	r2, [pc, #340]	; (80030bc <HAL_RCC_OscConfig+0x4e8>)
 8002f68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f6c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	699b      	ldr	r3, [r3, #24]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	f000 809b 	beq.w	80030ae <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f78:	4b50      	ldr	r3, [pc, #320]	; (80030bc <HAL_RCC_OscConfig+0x4e8>)
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	f003 030c 	and.w	r3, r3, #12
 8002f80:	2b08      	cmp	r3, #8
 8002f82:	d05c      	beq.n	800303e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	699b      	ldr	r3, [r3, #24]
 8002f88:	2b02      	cmp	r3, #2
 8002f8a:	d141      	bne.n	8003010 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f8c:	4b4c      	ldr	r3, [pc, #304]	; (80030c0 <HAL_RCC_OscConfig+0x4ec>)
 8002f8e:	2200      	movs	r2, #0
 8002f90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f92:	f7fe ff8f 	bl	8001eb4 <HAL_GetTick>
 8002f96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f98:	e008      	b.n	8002fac <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f9a:	f7fe ff8b 	bl	8001eb4 <HAL_GetTick>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	2b02      	cmp	r3, #2
 8002fa6:	d901      	bls.n	8002fac <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	e081      	b.n	80030b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fac:	4b43      	ldr	r3, [pc, #268]	; (80030bc <HAL_RCC_OscConfig+0x4e8>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d1f0      	bne.n	8002f9a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	69da      	ldr	r2, [r3, #28]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6a1b      	ldr	r3, [r3, #32]
 8002fc0:	431a      	orrs	r2, r3
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc6:	019b      	lsls	r3, r3, #6
 8002fc8:	431a      	orrs	r2, r3
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fce:	085b      	lsrs	r3, r3, #1
 8002fd0:	3b01      	subs	r3, #1
 8002fd2:	041b      	lsls	r3, r3, #16
 8002fd4:	431a      	orrs	r2, r3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fda:	061b      	lsls	r3, r3, #24
 8002fdc:	4937      	ldr	r1, [pc, #220]	; (80030bc <HAL_RCC_OscConfig+0x4e8>)
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fe2:	4b37      	ldr	r3, [pc, #220]	; (80030c0 <HAL_RCC_OscConfig+0x4ec>)
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fe8:	f7fe ff64 	bl	8001eb4 <HAL_GetTick>
 8002fec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fee:	e008      	b.n	8003002 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ff0:	f7fe ff60 	bl	8001eb4 <HAL_GetTick>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	d901      	bls.n	8003002 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	e056      	b.n	80030b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003002:	4b2e      	ldr	r3, [pc, #184]	; (80030bc <HAL_RCC_OscConfig+0x4e8>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800300a:	2b00      	cmp	r3, #0
 800300c:	d0f0      	beq.n	8002ff0 <HAL_RCC_OscConfig+0x41c>
 800300e:	e04e      	b.n	80030ae <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003010:	4b2b      	ldr	r3, [pc, #172]	; (80030c0 <HAL_RCC_OscConfig+0x4ec>)
 8003012:	2200      	movs	r2, #0
 8003014:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003016:	f7fe ff4d 	bl	8001eb4 <HAL_GetTick>
 800301a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800301c:	e008      	b.n	8003030 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800301e:	f7fe ff49 	bl	8001eb4 <HAL_GetTick>
 8003022:	4602      	mov	r2, r0
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	1ad3      	subs	r3, r2, r3
 8003028:	2b02      	cmp	r3, #2
 800302a:	d901      	bls.n	8003030 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800302c:	2303      	movs	r3, #3
 800302e:	e03f      	b.n	80030b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003030:	4b22      	ldr	r3, [pc, #136]	; (80030bc <HAL_RCC_OscConfig+0x4e8>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003038:	2b00      	cmp	r3, #0
 800303a:	d1f0      	bne.n	800301e <HAL_RCC_OscConfig+0x44a>
 800303c:	e037      	b.n	80030ae <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	699b      	ldr	r3, [r3, #24]
 8003042:	2b01      	cmp	r3, #1
 8003044:	d101      	bne.n	800304a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e032      	b.n	80030b0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800304a:	4b1c      	ldr	r3, [pc, #112]	; (80030bc <HAL_RCC_OscConfig+0x4e8>)
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	699b      	ldr	r3, [r3, #24]
 8003054:	2b01      	cmp	r3, #1
 8003056:	d028      	beq.n	80030aa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003062:	429a      	cmp	r2, r3
 8003064:	d121      	bne.n	80030aa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003070:	429a      	cmp	r2, r3
 8003072:	d11a      	bne.n	80030aa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003074:	68fa      	ldr	r2, [r7, #12]
 8003076:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800307a:	4013      	ands	r3, r2
 800307c:	687a      	ldr	r2, [r7, #4]
 800307e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003080:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003082:	4293      	cmp	r3, r2
 8003084:	d111      	bne.n	80030aa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003090:	085b      	lsrs	r3, r3, #1
 8003092:	3b01      	subs	r3, #1
 8003094:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003096:	429a      	cmp	r2, r3
 8003098:	d107      	bne.n	80030aa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d001      	beq.n	80030ae <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e000      	b.n	80030b0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80030ae:	2300      	movs	r3, #0
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	3718      	adds	r7, #24
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}
 80030b8:	40007000 	.word	0x40007000
 80030bc:	40023800 	.word	0x40023800
 80030c0:	42470060 	.word	0x42470060

080030c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b084      	sub	sp, #16
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d101      	bne.n	80030d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e0cc      	b.n	8003272 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030d8:	4b68      	ldr	r3, [pc, #416]	; (800327c <HAL_RCC_ClockConfig+0x1b8>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 030f 	and.w	r3, r3, #15
 80030e0:	683a      	ldr	r2, [r7, #0]
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d90c      	bls.n	8003100 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030e6:	4b65      	ldr	r3, [pc, #404]	; (800327c <HAL_RCC_ClockConfig+0x1b8>)
 80030e8:	683a      	ldr	r2, [r7, #0]
 80030ea:	b2d2      	uxtb	r2, r2
 80030ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ee:	4b63      	ldr	r3, [pc, #396]	; (800327c <HAL_RCC_ClockConfig+0x1b8>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 030f 	and.w	r3, r3, #15
 80030f6:	683a      	ldr	r2, [r7, #0]
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d001      	beq.n	8003100 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	e0b8      	b.n	8003272 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 0302 	and.w	r3, r3, #2
 8003108:	2b00      	cmp	r3, #0
 800310a:	d020      	beq.n	800314e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0304 	and.w	r3, r3, #4
 8003114:	2b00      	cmp	r3, #0
 8003116:	d005      	beq.n	8003124 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003118:	4b59      	ldr	r3, [pc, #356]	; (8003280 <HAL_RCC_ClockConfig+0x1bc>)
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	4a58      	ldr	r2, [pc, #352]	; (8003280 <HAL_RCC_ClockConfig+0x1bc>)
 800311e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003122:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 0308 	and.w	r3, r3, #8
 800312c:	2b00      	cmp	r3, #0
 800312e:	d005      	beq.n	800313c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003130:	4b53      	ldr	r3, [pc, #332]	; (8003280 <HAL_RCC_ClockConfig+0x1bc>)
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	4a52      	ldr	r2, [pc, #328]	; (8003280 <HAL_RCC_ClockConfig+0x1bc>)
 8003136:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800313a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800313c:	4b50      	ldr	r3, [pc, #320]	; (8003280 <HAL_RCC_ClockConfig+0x1bc>)
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	494d      	ldr	r1, [pc, #308]	; (8003280 <HAL_RCC_ClockConfig+0x1bc>)
 800314a:	4313      	orrs	r3, r2
 800314c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0301 	and.w	r3, r3, #1
 8003156:	2b00      	cmp	r3, #0
 8003158:	d044      	beq.n	80031e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	2b01      	cmp	r3, #1
 8003160:	d107      	bne.n	8003172 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003162:	4b47      	ldr	r3, [pc, #284]	; (8003280 <HAL_RCC_ClockConfig+0x1bc>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800316a:	2b00      	cmp	r3, #0
 800316c:	d119      	bne.n	80031a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e07f      	b.n	8003272 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	2b02      	cmp	r3, #2
 8003178:	d003      	beq.n	8003182 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800317e:	2b03      	cmp	r3, #3
 8003180:	d107      	bne.n	8003192 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003182:	4b3f      	ldr	r3, [pc, #252]	; (8003280 <HAL_RCC_ClockConfig+0x1bc>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d109      	bne.n	80031a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e06f      	b.n	8003272 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003192:	4b3b      	ldr	r3, [pc, #236]	; (8003280 <HAL_RCC_ClockConfig+0x1bc>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 0302 	and.w	r3, r3, #2
 800319a:	2b00      	cmp	r3, #0
 800319c:	d101      	bne.n	80031a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e067      	b.n	8003272 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031a2:	4b37      	ldr	r3, [pc, #220]	; (8003280 <HAL_RCC_ClockConfig+0x1bc>)
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	f023 0203 	bic.w	r2, r3, #3
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	4934      	ldr	r1, [pc, #208]	; (8003280 <HAL_RCC_ClockConfig+0x1bc>)
 80031b0:	4313      	orrs	r3, r2
 80031b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031b4:	f7fe fe7e 	bl	8001eb4 <HAL_GetTick>
 80031b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031ba:	e00a      	b.n	80031d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031bc:	f7fe fe7a 	bl	8001eb4 <HAL_GetTick>
 80031c0:	4602      	mov	r2, r0
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d901      	bls.n	80031d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e04f      	b.n	8003272 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031d2:	4b2b      	ldr	r3, [pc, #172]	; (8003280 <HAL_RCC_ClockConfig+0x1bc>)
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	f003 020c 	and.w	r2, r3, #12
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d1eb      	bne.n	80031bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031e4:	4b25      	ldr	r3, [pc, #148]	; (800327c <HAL_RCC_ClockConfig+0x1b8>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 030f 	and.w	r3, r3, #15
 80031ec:	683a      	ldr	r2, [r7, #0]
 80031ee:	429a      	cmp	r2, r3
 80031f0:	d20c      	bcs.n	800320c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031f2:	4b22      	ldr	r3, [pc, #136]	; (800327c <HAL_RCC_ClockConfig+0x1b8>)
 80031f4:	683a      	ldr	r2, [r7, #0]
 80031f6:	b2d2      	uxtb	r2, r2
 80031f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031fa:	4b20      	ldr	r3, [pc, #128]	; (800327c <HAL_RCC_ClockConfig+0x1b8>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 030f 	and.w	r3, r3, #15
 8003202:	683a      	ldr	r2, [r7, #0]
 8003204:	429a      	cmp	r2, r3
 8003206:	d001      	beq.n	800320c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e032      	b.n	8003272 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 0304 	and.w	r3, r3, #4
 8003214:	2b00      	cmp	r3, #0
 8003216:	d008      	beq.n	800322a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003218:	4b19      	ldr	r3, [pc, #100]	; (8003280 <HAL_RCC_ClockConfig+0x1bc>)
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	4916      	ldr	r1, [pc, #88]	; (8003280 <HAL_RCC_ClockConfig+0x1bc>)
 8003226:	4313      	orrs	r3, r2
 8003228:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 0308 	and.w	r3, r3, #8
 8003232:	2b00      	cmp	r3, #0
 8003234:	d009      	beq.n	800324a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003236:	4b12      	ldr	r3, [pc, #72]	; (8003280 <HAL_RCC_ClockConfig+0x1bc>)
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	691b      	ldr	r3, [r3, #16]
 8003242:	00db      	lsls	r3, r3, #3
 8003244:	490e      	ldr	r1, [pc, #56]	; (8003280 <HAL_RCC_ClockConfig+0x1bc>)
 8003246:	4313      	orrs	r3, r2
 8003248:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800324a:	f000 f821 	bl	8003290 <HAL_RCC_GetSysClockFreq>
 800324e:	4602      	mov	r2, r0
 8003250:	4b0b      	ldr	r3, [pc, #44]	; (8003280 <HAL_RCC_ClockConfig+0x1bc>)
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	091b      	lsrs	r3, r3, #4
 8003256:	f003 030f 	and.w	r3, r3, #15
 800325a:	490a      	ldr	r1, [pc, #40]	; (8003284 <HAL_RCC_ClockConfig+0x1c0>)
 800325c:	5ccb      	ldrb	r3, [r1, r3]
 800325e:	fa22 f303 	lsr.w	r3, r2, r3
 8003262:	4a09      	ldr	r2, [pc, #36]	; (8003288 <HAL_RCC_ClockConfig+0x1c4>)
 8003264:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003266:	4b09      	ldr	r3, [pc, #36]	; (800328c <HAL_RCC_ClockConfig+0x1c8>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4618      	mov	r0, r3
 800326c:	f7fe fc7a 	bl	8001b64 <HAL_InitTick>

  return HAL_OK;
 8003270:	2300      	movs	r3, #0
}
 8003272:	4618      	mov	r0, r3
 8003274:	3710      	adds	r7, #16
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	40023c00 	.word	0x40023c00
 8003280:	40023800 	.word	0x40023800
 8003284:	0800a7e4 	.word	0x0800a7e4
 8003288:	20000004 	.word	0x20000004
 800328c:	20000008 	.word	0x20000008

08003290 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003290:	b5b0      	push	{r4, r5, r7, lr}
 8003292:	b084      	sub	sp, #16
 8003294:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003296:	2100      	movs	r1, #0
 8003298:	6079      	str	r1, [r7, #4]
 800329a:	2100      	movs	r1, #0
 800329c:	60f9      	str	r1, [r7, #12]
 800329e:	2100      	movs	r1, #0
 80032a0:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80032a2:	2100      	movs	r1, #0
 80032a4:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032a6:	4952      	ldr	r1, [pc, #328]	; (80033f0 <HAL_RCC_GetSysClockFreq+0x160>)
 80032a8:	6889      	ldr	r1, [r1, #8]
 80032aa:	f001 010c 	and.w	r1, r1, #12
 80032ae:	2908      	cmp	r1, #8
 80032b0:	d00d      	beq.n	80032ce <HAL_RCC_GetSysClockFreq+0x3e>
 80032b2:	2908      	cmp	r1, #8
 80032b4:	f200 8094 	bhi.w	80033e0 <HAL_RCC_GetSysClockFreq+0x150>
 80032b8:	2900      	cmp	r1, #0
 80032ba:	d002      	beq.n	80032c2 <HAL_RCC_GetSysClockFreq+0x32>
 80032bc:	2904      	cmp	r1, #4
 80032be:	d003      	beq.n	80032c8 <HAL_RCC_GetSysClockFreq+0x38>
 80032c0:	e08e      	b.n	80033e0 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80032c2:	4b4c      	ldr	r3, [pc, #304]	; (80033f4 <HAL_RCC_GetSysClockFreq+0x164>)
 80032c4:	60bb      	str	r3, [r7, #8]
       break;
 80032c6:	e08e      	b.n	80033e6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80032c8:	4b4b      	ldr	r3, [pc, #300]	; (80033f8 <HAL_RCC_GetSysClockFreq+0x168>)
 80032ca:	60bb      	str	r3, [r7, #8]
      break;
 80032cc:	e08b      	b.n	80033e6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032ce:	4948      	ldr	r1, [pc, #288]	; (80033f0 <HAL_RCC_GetSysClockFreq+0x160>)
 80032d0:	6849      	ldr	r1, [r1, #4]
 80032d2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80032d6:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80032d8:	4945      	ldr	r1, [pc, #276]	; (80033f0 <HAL_RCC_GetSysClockFreq+0x160>)
 80032da:	6849      	ldr	r1, [r1, #4]
 80032dc:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80032e0:	2900      	cmp	r1, #0
 80032e2:	d024      	beq.n	800332e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032e4:	4942      	ldr	r1, [pc, #264]	; (80033f0 <HAL_RCC_GetSysClockFreq+0x160>)
 80032e6:	6849      	ldr	r1, [r1, #4]
 80032e8:	0989      	lsrs	r1, r1, #6
 80032ea:	4608      	mov	r0, r1
 80032ec:	f04f 0100 	mov.w	r1, #0
 80032f0:	f240 14ff 	movw	r4, #511	; 0x1ff
 80032f4:	f04f 0500 	mov.w	r5, #0
 80032f8:	ea00 0204 	and.w	r2, r0, r4
 80032fc:	ea01 0305 	and.w	r3, r1, r5
 8003300:	493d      	ldr	r1, [pc, #244]	; (80033f8 <HAL_RCC_GetSysClockFreq+0x168>)
 8003302:	fb01 f003 	mul.w	r0, r1, r3
 8003306:	2100      	movs	r1, #0
 8003308:	fb01 f102 	mul.w	r1, r1, r2
 800330c:	1844      	adds	r4, r0, r1
 800330e:	493a      	ldr	r1, [pc, #232]	; (80033f8 <HAL_RCC_GetSysClockFreq+0x168>)
 8003310:	fba2 0101 	umull	r0, r1, r2, r1
 8003314:	1863      	adds	r3, r4, r1
 8003316:	4619      	mov	r1, r3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	461a      	mov	r2, r3
 800331c:	f04f 0300 	mov.w	r3, #0
 8003320:	f7fd fbac 	bl	8000a7c <__aeabi_uldivmod>
 8003324:	4602      	mov	r2, r0
 8003326:	460b      	mov	r3, r1
 8003328:	4613      	mov	r3, r2
 800332a:	60fb      	str	r3, [r7, #12]
 800332c:	e04a      	b.n	80033c4 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800332e:	4b30      	ldr	r3, [pc, #192]	; (80033f0 <HAL_RCC_GetSysClockFreq+0x160>)
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	099b      	lsrs	r3, r3, #6
 8003334:	461a      	mov	r2, r3
 8003336:	f04f 0300 	mov.w	r3, #0
 800333a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800333e:	f04f 0100 	mov.w	r1, #0
 8003342:	ea02 0400 	and.w	r4, r2, r0
 8003346:	ea03 0501 	and.w	r5, r3, r1
 800334a:	4620      	mov	r0, r4
 800334c:	4629      	mov	r1, r5
 800334e:	f04f 0200 	mov.w	r2, #0
 8003352:	f04f 0300 	mov.w	r3, #0
 8003356:	014b      	lsls	r3, r1, #5
 8003358:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800335c:	0142      	lsls	r2, r0, #5
 800335e:	4610      	mov	r0, r2
 8003360:	4619      	mov	r1, r3
 8003362:	1b00      	subs	r0, r0, r4
 8003364:	eb61 0105 	sbc.w	r1, r1, r5
 8003368:	f04f 0200 	mov.w	r2, #0
 800336c:	f04f 0300 	mov.w	r3, #0
 8003370:	018b      	lsls	r3, r1, #6
 8003372:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003376:	0182      	lsls	r2, r0, #6
 8003378:	1a12      	subs	r2, r2, r0
 800337a:	eb63 0301 	sbc.w	r3, r3, r1
 800337e:	f04f 0000 	mov.w	r0, #0
 8003382:	f04f 0100 	mov.w	r1, #0
 8003386:	00d9      	lsls	r1, r3, #3
 8003388:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800338c:	00d0      	lsls	r0, r2, #3
 800338e:	4602      	mov	r2, r0
 8003390:	460b      	mov	r3, r1
 8003392:	1912      	adds	r2, r2, r4
 8003394:	eb45 0303 	adc.w	r3, r5, r3
 8003398:	f04f 0000 	mov.w	r0, #0
 800339c:	f04f 0100 	mov.w	r1, #0
 80033a0:	0299      	lsls	r1, r3, #10
 80033a2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80033a6:	0290      	lsls	r0, r2, #10
 80033a8:	4602      	mov	r2, r0
 80033aa:	460b      	mov	r3, r1
 80033ac:	4610      	mov	r0, r2
 80033ae:	4619      	mov	r1, r3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	461a      	mov	r2, r3
 80033b4:	f04f 0300 	mov.w	r3, #0
 80033b8:	f7fd fb60 	bl	8000a7c <__aeabi_uldivmod>
 80033bc:	4602      	mov	r2, r0
 80033be:	460b      	mov	r3, r1
 80033c0:	4613      	mov	r3, r2
 80033c2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80033c4:	4b0a      	ldr	r3, [pc, #40]	; (80033f0 <HAL_RCC_GetSysClockFreq+0x160>)
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	0c1b      	lsrs	r3, r3, #16
 80033ca:	f003 0303 	and.w	r3, r3, #3
 80033ce:	3301      	adds	r3, #1
 80033d0:	005b      	lsls	r3, r3, #1
 80033d2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80033d4:	68fa      	ldr	r2, [r7, #12]
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80033dc:	60bb      	str	r3, [r7, #8]
      break;
 80033de:	e002      	b.n	80033e6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80033e0:	4b04      	ldr	r3, [pc, #16]	; (80033f4 <HAL_RCC_GetSysClockFreq+0x164>)
 80033e2:	60bb      	str	r3, [r7, #8]
      break;
 80033e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033e6:	68bb      	ldr	r3, [r7, #8]
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3710      	adds	r7, #16
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bdb0      	pop	{r4, r5, r7, pc}
 80033f0:	40023800 	.word	0x40023800
 80033f4:	00f42400 	.word	0x00f42400
 80033f8:	017d7840 	.word	0x017d7840

080033fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033fc:	b480      	push	{r7}
 80033fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003400:	4b03      	ldr	r3, [pc, #12]	; (8003410 <HAL_RCC_GetHCLKFreq+0x14>)
 8003402:	681b      	ldr	r3, [r3, #0]
}
 8003404:	4618      	mov	r0, r3
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr
 800340e:	bf00      	nop
 8003410:	20000004 	.word	0x20000004

08003414 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003418:	f7ff fff0 	bl	80033fc <HAL_RCC_GetHCLKFreq>
 800341c:	4602      	mov	r2, r0
 800341e:	4b05      	ldr	r3, [pc, #20]	; (8003434 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	0a9b      	lsrs	r3, r3, #10
 8003424:	f003 0307 	and.w	r3, r3, #7
 8003428:	4903      	ldr	r1, [pc, #12]	; (8003438 <HAL_RCC_GetPCLK1Freq+0x24>)
 800342a:	5ccb      	ldrb	r3, [r1, r3]
 800342c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003430:	4618      	mov	r0, r3
 8003432:	bd80      	pop	{r7, pc}
 8003434:	40023800 	.word	0x40023800
 8003438:	0800a7f4 	.word	0x0800a7f4

0800343c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003440:	f7ff ffdc 	bl	80033fc <HAL_RCC_GetHCLKFreq>
 8003444:	4602      	mov	r2, r0
 8003446:	4b05      	ldr	r3, [pc, #20]	; (800345c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	0b5b      	lsrs	r3, r3, #13
 800344c:	f003 0307 	and.w	r3, r3, #7
 8003450:	4903      	ldr	r1, [pc, #12]	; (8003460 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003452:	5ccb      	ldrb	r3, [r1, r3]
 8003454:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003458:	4618      	mov	r0, r3
 800345a:	bd80      	pop	{r7, pc}
 800345c:	40023800 	.word	0x40023800
 8003460:	0800a7f4 	.word	0x0800a7f4

08003464 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003464:	b480      	push	{r7}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	220f      	movs	r2, #15
 8003472:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003474:	4b12      	ldr	r3, [pc, #72]	; (80034c0 <HAL_RCC_GetClockConfig+0x5c>)
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	f003 0203 	and.w	r2, r3, #3
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003480:	4b0f      	ldr	r3, [pc, #60]	; (80034c0 <HAL_RCC_GetClockConfig+0x5c>)
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800348c:	4b0c      	ldr	r3, [pc, #48]	; (80034c0 <HAL_RCC_GetClockConfig+0x5c>)
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003498:	4b09      	ldr	r3, [pc, #36]	; (80034c0 <HAL_RCC_GetClockConfig+0x5c>)
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	08db      	lsrs	r3, r3, #3
 800349e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80034a6:	4b07      	ldr	r3, [pc, #28]	; (80034c4 <HAL_RCC_GetClockConfig+0x60>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 020f 	and.w	r2, r3, #15
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	601a      	str	r2, [r3, #0]
}
 80034b2:	bf00      	nop
 80034b4:	370c      	adds	r7, #12
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr
 80034be:	bf00      	nop
 80034c0:	40023800 	.word	0x40023800
 80034c4:	40023c00 	.word	0x40023c00

080034c8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b082      	sub	sp, #8
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d101      	bne.n	80034da <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e022      	b.n	8003520 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d105      	bne.n	80034f2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f7fe fa05 	bl	80018fc <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2203      	movs	r2, #3
 80034f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f000 f814 	bl	8003528 <HAL_SD_InitCard>
 8003500:	4603      	mov	r3, r0
 8003502:	2b00      	cmp	r3, #0
 8003504:	d001      	beq.n	800350a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e00a      	b.n	8003520 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2200      	movs	r2, #0
 8003514:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2201      	movs	r2, #1
 800351a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800351e:	2300      	movs	r3, #0
}
 8003520:	4618      	mov	r0, r3
 8003522:	3708      	adds	r7, #8
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}

08003528 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003528:	b5b0      	push	{r4, r5, r7, lr}
 800352a:	b08e      	sub	sp, #56	; 0x38
 800352c:	af04      	add	r7, sp, #16
 800352e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8003530:	2300      	movs	r3, #0
 8003532:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8003534:	2300      	movs	r3, #0
 8003536:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8003538:	2300      	movs	r3, #0
 800353a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800353c:	2300      	movs	r3, #0
 800353e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8003540:	2300      	movs	r3, #0
 8003542:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8003544:	2376      	movs	r3, #118	; 0x76
 8003546:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681d      	ldr	r5, [r3, #0]
 800354c:	466c      	mov	r4, sp
 800354e:	f107 0314 	add.w	r3, r7, #20
 8003552:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003556:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800355a:	f107 0308 	add.w	r3, r7, #8
 800355e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003560:	4628      	mov	r0, r5
 8003562:	f002 f899 	bl	8005698 <SDIO_Init>
 8003566:	4603      	mov	r3, r0
 8003568:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800356c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003570:	2b00      	cmp	r3, #0
 8003572:	d001      	beq.n	8003578 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	e04c      	b.n	8003612 <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8003578:	4b28      	ldr	r3, [pc, #160]	; (800361c <HAL_SD_InitCard+0xf4>)
 800357a:	2200      	movs	r2, #0
 800357c:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4618      	mov	r0, r3
 8003584:	f002 f8d1 	bl	800572a <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8003588:	4b24      	ldr	r3, [pc, #144]	; (800361c <HAL_SD_InitCard+0xf4>)
 800358a:	2201      	movs	r2, #1
 800358c:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f000 fffa 	bl	8004588 <SD_PowerON>
 8003594:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003596:	6a3b      	ldr	r3, [r7, #32]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d00b      	beq.n	80035b4 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2201      	movs	r2, #1
 80035a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035a8:	6a3b      	ldr	r3, [r7, #32]
 80035aa:	431a      	orrs	r2, r3
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e02e      	b.n	8003612 <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	f000 ff1b 	bl	80043f0 <SD_InitCard>
 80035ba:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80035bc:	6a3b      	ldr	r3, [r7, #32]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d00b      	beq.n	80035da <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2201      	movs	r2, #1
 80035c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035ce:	6a3b      	ldr	r3, [r7, #32]
 80035d0:	431a      	orrs	r2, r3
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e01b      	b.n	8003612 <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80035e2:	4618      	mov	r0, r3
 80035e4:	f002 f934 	bl	8005850 <SDMMC_CmdBlockLength>
 80035e8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80035ea:	6a3b      	ldr	r3, [r7, #32]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d00f      	beq.n	8003610 <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a0a      	ldr	r2, [pc, #40]	; (8003620 <HAL_SD_InitCard+0xf8>)
 80035f6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035fc:	6a3b      	ldr	r3, [r7, #32]
 80035fe:	431a      	orrs	r2, r3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2201      	movs	r2, #1
 8003608:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	e000      	b.n	8003612 <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 8003610:	2300      	movs	r3, #0
}
 8003612:	4618      	mov	r0, r3
 8003614:	3728      	adds	r7, #40	; 0x28
 8003616:	46bd      	mov	sp, r7
 8003618:	bdb0      	pop	{r4, r5, r7, pc}
 800361a:	bf00      	nop
 800361c:	422580a0 	.word	0x422580a0
 8003620:	004005ff 	.word	0x004005ff

08003624 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b08c      	sub	sp, #48	; 0x30
 8003628:	af00      	add	r7, sp, #0
 800362a:	60f8      	str	r0, [r7, #12]
 800362c:	60b9      	str	r1, [r7, #8]
 800362e:	607a      	str	r2, [r7, #4]
 8003630:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d107      	bne.n	800364c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003640:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	e0c0      	b.n	80037ce <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003652:	b2db      	uxtb	r3, r3
 8003654:	2b01      	cmp	r3, #1
 8003656:	f040 80b9 	bne.w	80037cc <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2200      	movs	r2, #0
 800365e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003660:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	441a      	add	r2, r3
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800366a:	429a      	cmp	r2, r3
 800366c:	d907      	bls.n	800367e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003672:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e0a7      	b.n	80037ce <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2203      	movs	r2, #3
 8003682:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	2200      	movs	r2, #0
 800368c:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003694:	68fa      	ldr	r2, [r7, #12]
 8003696:	6812      	ldr	r2, [r2, #0]
 8003698:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 800369c:	f043 0302 	orr.w	r3, r3, #2
 80036a0:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a6:	4a4c      	ldr	r2, [pc, #304]	; (80037d8 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 80036a8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ae:	4a4b      	ldr	r2, [pc, #300]	; (80037dc <HAL_SD_ReadBlocks_DMA+0x1b8>)
 80036b0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b6:	2200      	movs	r2, #0
 80036b8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036be:	2200      	movs	r2, #0
 80036c0:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d2:	689a      	ldr	r2, [r3, #8]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	430a      	orrs	r2, r1
 80036dc:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	3380      	adds	r3, #128	; 0x80
 80036e8:	4619      	mov	r1, r3
 80036ea:	68ba      	ldr	r2, [r7, #8]
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	025b      	lsls	r3, r3, #9
 80036f0:	089b      	lsrs	r3, r3, #2
 80036f2:	f7fe fd9f 	bl	8002234 <HAL_DMA_Start_IT>
 80036f6:	4603      	mov	r3, r0
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d017      	beq.n	800372c <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800370a:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a33      	ldr	r2, [pc, #204]	; (80037e0 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8003712:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003718:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2201      	movs	r2, #1
 8003724:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	e050      	b.n	80037ce <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800372c:	4b2d      	ldr	r3, [pc, #180]	; (80037e4 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800372e:	2201      	movs	r2, #1
 8003730:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003736:	2b01      	cmp	r3, #1
 8003738:	d002      	beq.n	8003740 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 800373a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800373c:	025b      	lsls	r3, r3, #9
 800373e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003740:	f04f 33ff 	mov.w	r3, #4294967295
 8003744:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	025b      	lsls	r3, r3, #9
 800374a:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800374c:	2390      	movs	r3, #144	; 0x90
 800374e:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003750:	2302      	movs	r3, #2
 8003752:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003754:	2300      	movs	r3, #0
 8003756:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8003758:	2301      	movs	r3, #1
 800375a:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f107 0210 	add.w	r2, r7, #16
 8003764:	4611      	mov	r1, r2
 8003766:	4618      	mov	r0, r3
 8003768:	f002 f846 	bl	80057f8 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	2b01      	cmp	r3, #1
 8003770:	d90a      	bls.n	8003788 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2282      	movs	r2, #130	; 0x82
 8003776:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800377e:	4618      	mov	r0, r3
 8003780:	f002 f8aa 	bl	80058d8 <SDMMC_CmdReadMultiBlock>
 8003784:	62f8      	str	r0, [r7, #44]	; 0x2c
 8003786:	e009      	b.n	800379c <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2281      	movs	r2, #129	; 0x81
 800378c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003794:	4618      	mov	r0, r3
 8003796:	f002 f87d 	bl	8005894 <SDMMC_CmdReadSingleBlock>
 800379a:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800379c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d012      	beq.n	80037c8 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a0e      	ldr	r2, [pc, #56]	; (80037e0 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 80037a8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037b0:	431a      	orrs	r2, r3
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2201      	movs	r2, #1
 80037ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2200      	movs	r2, #0
 80037c2:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	e002      	b.n	80037ce <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 80037c8:	2300      	movs	r3, #0
 80037ca:	e000      	b.n	80037ce <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 80037cc:	2302      	movs	r3, #2
  }
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3730      	adds	r7, #48	; 0x30
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	bf00      	nop
 80037d8:	080041ff 	.word	0x080041ff
 80037dc:	08004271 	.word	0x08004271
 80037e0:	004005ff 	.word	0x004005ff
 80037e4:	4225858c 	.word	0x4225858c

080037e8 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b08c      	sub	sp, #48	; 0x30
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	60f8      	str	r0, [r7, #12]
 80037f0:	60b9      	str	r1, [r7, #8]
 80037f2:	607a      	str	r2, [r7, #4]
 80037f4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d107      	bne.n	8003810 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003804:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	e0c5      	b.n	800399c <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003816:	b2db      	uxtb	r3, r3
 8003818:	2b01      	cmp	r3, #1
 800381a:	f040 80be 	bne.w	800399a <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2200      	movs	r2, #0
 8003822:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003824:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	441a      	add	r2, r3
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800382e:	429a      	cmp	r2, r3
 8003830:	d907      	bls.n	8003842 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003836:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e0ac      	b.n	800399c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2203      	movs	r2, #3
 8003846:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	2200      	movs	r2, #0
 8003850:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003858:	68fa      	ldr	r2, [r7, #12]
 800385a:	6812      	ldr	r2, [r2, #0]
 800385c:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 8003860:	f043 0302 	orr.w	r3, r3, #2
 8003864:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800386a:	4a4e      	ldr	r2, [pc, #312]	; (80039a4 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 800386c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003872:	4a4d      	ldr	r2, [pc, #308]	; (80039a8 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8003874:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800387a:	2200      	movs	r2, #0
 800387c:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003882:	2b01      	cmp	r3, #1
 8003884:	d002      	beq.n	800388c <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 8003886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003888:	025b      	lsls	r3, r3, #9
 800388a:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	2b01      	cmp	r3, #1
 8003890:	d90a      	bls.n	80038a8 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	22a0      	movs	r2, #160	; 0xa0
 8003896:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800389e:	4618      	mov	r0, r3
 80038a0:	f002 f85e 	bl	8005960 <SDMMC_CmdWriteMultiBlock>
 80038a4:	62f8      	str	r0, [r7, #44]	; 0x2c
 80038a6:	e009      	b.n	80038bc <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2290      	movs	r2, #144	; 0x90
 80038ac:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80038b4:	4618      	mov	r0, r3
 80038b6:	f002 f831 	bl	800591c <SDMMC_CmdWriteSingleBlock>
 80038ba:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80038bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d012      	beq.n	80038e8 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a39      	ldr	r2, [pc, #228]	; (80039ac <HAL_SD_WriteBlocks_DMA+0x1c4>)
 80038c8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038d0:	431a      	orrs	r2, r3
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2201      	movs	r2, #1
 80038da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2200      	movs	r2, #0
 80038e2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e059      	b.n	800399c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 80038e8:	4b31      	ldr	r3, [pc, #196]	; (80039b0 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 80038ea:	2201      	movs	r2, #1
 80038ec:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038f2:	2240      	movs	r2, #64	; 0x40
 80038f4:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003906:	689a      	ldr	r2, [r3, #8]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	430a      	orrs	r2, r1
 8003910:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8003916:	68b9      	ldr	r1, [r7, #8]
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	3380      	adds	r3, #128	; 0x80
 800391e:	461a      	mov	r2, r3
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	025b      	lsls	r3, r3, #9
 8003924:	089b      	lsrs	r3, r3, #2
 8003926:	f7fe fc85 	bl	8002234 <HAL_DMA_Start_IT>
 800392a:	4603      	mov	r3, r0
 800392c:	2b00      	cmp	r3, #0
 800392e:	d01c      	beq.n	800396a <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003936:	68fa      	ldr	r2, [r7, #12]
 8003938:	6812      	ldr	r2, [r2, #0]
 800393a:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 800393e:	f023 0302 	bic.w	r3, r3, #2
 8003942:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a18      	ldr	r2, [pc, #96]	; (80039ac <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800394a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003950:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2201      	movs	r2, #1
 800395c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2200      	movs	r2, #0
 8003964:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e018      	b.n	800399c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800396a:	f04f 33ff 	mov.w	r3, #4294967295
 800396e:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	025b      	lsls	r3, r3, #9
 8003974:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003976:	2390      	movs	r3, #144	; 0x90
 8003978:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800397a:	2300      	movs	r3, #0
 800397c:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800397e:	2300      	movs	r3, #0
 8003980:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8003982:	2301      	movs	r3, #1
 8003984:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f107 0210 	add.w	r2, r7, #16
 800398e:	4611      	mov	r1, r2
 8003990:	4618      	mov	r0, r3
 8003992:	f001 ff31 	bl	80057f8 <SDIO_ConfigData>

      return HAL_OK;
 8003996:	2300      	movs	r3, #0
 8003998:	e000      	b.n	800399c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 800399a:	2302      	movs	r3, #2
  }
}
 800399c:	4618      	mov	r0, r3
 800399e:	3730      	adds	r7, #48	; 0x30
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}
 80039a4:	080041d5 	.word	0x080041d5
 80039a8:	08004271 	.word	0x08004271
 80039ac:	004005ff 	.word	0x004005ff
 80039b0:	4225858c 	.word	0x4225858c

080039b4 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b084      	sub	sp, #16
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c0:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d008      	beq.n	80039e2 <HAL_SD_IRQHandler+0x2e>
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f003 0308 	and.w	r3, r3, #8
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d003      	beq.n	80039e2 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f000 fff3 	bl	80049c6 <SD_Read_IT>
 80039e0:	e165      	b.n	8003cae <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	f000 808f 	beq.w	8003b10 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80039fa:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	6812      	ldr	r2, [r2, #0]
 8003a06:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 8003a0a:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8003a0e:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f022 0201 	bic.w	r2, r2, #1
 8003a1e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	f003 0308 	and.w	r3, r3, #8
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d039      	beq.n	8003a9e <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	f003 0302 	and.w	r3, r3, #2
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d104      	bne.n	8003a3e <HAL_SD_IRQHandler+0x8a>
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	f003 0320 	and.w	r3, r3, #32
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d011      	beq.n	8003a62 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4618      	mov	r0, r3
 8003a44:	f001 ffae 	bl	80059a4 <SDMMC_CmdStopTransfer>
 8003a48:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d008      	beq.n	8003a62 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	431a      	orrs	r2, r3
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	f7fd ff1b 	bl	8001898 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f240 523a 	movw	r2, #1338	; 0x53a
 8003a6a:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	f003 0301 	and.w	r3, r3, #1
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d104      	bne.n	8003a8e <HAL_SD_IRQHandler+0xda>
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	f003 0302 	and.w	r3, r3, #2
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d003      	beq.n	8003a96 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f7fd fed8 	bl	8001844 <HAL_SD_RxCpltCallback>
 8003a94:	e10b      	b.n	8003cae <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f7fd fee4 	bl	8001864 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003a9c:	e107      	b.n	8003cae <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	f000 8102 	beq.w	8003cae <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	f003 0320 	and.w	r3, r3, #32
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d011      	beq.n	8003ad8 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f001 ff73 	bl	80059a4 <SDMMC_CmdStopTransfer>
 8003abe:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d008      	beq.n	8003ad8 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	431a      	orrs	r2, r3
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f7fd fee0 	bl	8001898 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f003 0301 	and.w	r3, r3, #1
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	f040 80e5 	bne.w	8003cae <HAL_SD_IRQHandler+0x2fa>
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	f003 0302 	and.w	r3, r3, #2
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	f040 80df 	bne.w	8003cae <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f022 0208 	bic.w	r2, r2, #8
 8003afe:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2201      	movs	r2, #1
 8003b04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	f7fd feab 	bl	8001864 <HAL_SD_TxCpltCallback>
}
 8003b0e:	e0ce      	b.n	8003cae <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d008      	beq.n	8003b30 <HAL_SD_IRQHandler+0x17c>
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	f003 0308 	and.w	r3, r3, #8
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d003      	beq.n	8003b30 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	f000 ff9d 	bl	8004a68 <SD_Write_IT>
 8003b2e:	e0be      	b.n	8003cae <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b36:	f240 233a 	movw	r3, #570	; 0x23a
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	f000 80b6 	beq.w	8003cae <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b48:	f003 0302 	and.w	r3, r3, #2
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d005      	beq.n	8003b5c <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b54:	f043 0202 	orr.w	r2, r3, #2
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b62:	f003 0308 	and.w	r3, r3, #8
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d005      	beq.n	8003b76 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b6e:	f043 0208 	orr.w	r2, r3, #8
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b7c:	f003 0320 	and.w	r3, r3, #32
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d005      	beq.n	8003b90 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b88:	f043 0220 	orr.w	r2, r3, #32
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b96:	f003 0310 	and.w	r3, r3, #16
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d005      	beq.n	8003baa <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ba2:	f043 0210 	orr.w	r2, r3, #16
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bb0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d005      	beq.n	8003bc4 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bbc:	f043 0208 	orr.w	r2, r3, #8
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f240 723a 	movw	r2, #1850	; 0x73a
 8003bcc:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bd4:	687a      	ldr	r2, [r7, #4]
 8003bd6:	6812      	ldr	r2, [r2, #0]
 8003bd8:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8003bdc:	f023 0302 	bic.w	r3, r3, #2
 8003be0:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4618      	mov	r0, r3
 8003be8:	f001 fedc 	bl	80059a4 <SDMMC_CmdStopTransfer>
 8003bec:	4602      	mov	r2, r0
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bf2:	431a      	orrs	r2, r3
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	f003 0308 	and.w	r3, r3, #8
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d00a      	beq.n	8003c18 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2201      	movs	r2, #1
 8003c06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	f7fd fe41 	bl	8001898 <HAL_SD_ErrorCallback>
}
 8003c16:	e04a      	b.n	8003cae <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d045      	beq.n	8003cae <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	f003 0310 	and.w	r3, r3, #16
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d104      	bne.n	8003c36 <HAL_SD_IRQHandler+0x282>
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f003 0320 	and.w	r3, r3, #32
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d011      	beq.n	8003c5a <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c3a:	4a1f      	ldr	r2, [pc, #124]	; (8003cb8 <HAL_SD_IRQHandler+0x304>)
 8003c3c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c42:	4618      	mov	r0, r3
 8003c44:	f7fe fb4e 	bl	80022e4 <HAL_DMA_Abort_IT>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d02f      	beq.n	8003cae <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c52:	4618      	mov	r0, r3
 8003c54:	f000 fb5e 	bl	8004314 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8003c58:	e029      	b.n	8003cae <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	f003 0301 	and.w	r3, r3, #1
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d104      	bne.n	8003c6e <HAL_SD_IRQHandler+0x2ba>
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	f003 0302 	and.w	r3, r3, #2
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d011      	beq.n	8003c92 <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c72:	4a12      	ldr	r2, [pc, #72]	; (8003cbc <HAL_SD_IRQHandler+0x308>)
 8003c74:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f7fe fb32 	bl	80022e4 <HAL_DMA_Abort_IT>
 8003c80:	4603      	mov	r3, r0
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d013      	beq.n	8003cae <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f000 fb79 	bl	8004382 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8003c90:	e00d      	b.n	8003cae <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2200      	movs	r2, #0
 8003c96:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f7fd fdec 	bl	8001884 <HAL_SD_AbortCallback>
}
 8003cac:	e7ff      	b.n	8003cae <HAL_SD_IRQHandler+0x2fa>
 8003cae:	bf00      	nop
 8003cb0:	3710      	adds	r7, #16
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}
 8003cb6:	bf00      	nop
 8003cb8:	08004315 	.word	0x08004315
 8003cbc:	08004383 	.word	0x08004383

08003cc0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b083      	sub	sp, #12
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
 8003cc8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003cce:	0f9b      	lsrs	r3, r3, #30
 8003cd0:	b2da      	uxtb	r2, r3
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003cda:	0e9b      	lsrs	r3, r3, #26
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	f003 030f 	and.w	r3, r3, #15
 8003ce2:	b2da      	uxtb	r2, r3
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003cec:	0e1b      	lsrs	r3, r3, #24
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	f003 0303 	and.w	r3, r3, #3
 8003cf4:	b2da      	uxtb	r2, r3
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003cfe:	0c1b      	lsrs	r3, r3, #16
 8003d00:	b2da      	uxtb	r2, r3
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d0a:	0a1b      	lsrs	r3, r3, #8
 8003d0c:	b2da      	uxtb	r2, r3
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d16:	b2da      	uxtb	r2, r3
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d20:	0d1b      	lsrs	r3, r3, #20
 8003d22:	b29a      	uxth	r2, r3
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d2c:	0c1b      	lsrs	r3, r3, #16
 8003d2e:	b2db      	uxtb	r3, r3
 8003d30:	f003 030f 	and.w	r3, r3, #15
 8003d34:	b2da      	uxtb	r2, r3
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d3e:	0bdb      	lsrs	r3, r3, #15
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	f003 0301 	and.w	r3, r3, #1
 8003d46:	b2da      	uxtb	r2, r3
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d50:	0b9b      	lsrs	r3, r3, #14
 8003d52:	b2db      	uxtb	r3, r3
 8003d54:	f003 0301 	and.w	r3, r3, #1
 8003d58:	b2da      	uxtb	r2, r3
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d62:	0b5b      	lsrs	r3, r3, #13
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	f003 0301 	and.w	r3, r3, #1
 8003d6a:	b2da      	uxtb	r2, r3
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d74:	0b1b      	lsrs	r3, r3, #12
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	f003 0301 	and.w	r3, r3, #1
 8003d7c:	b2da      	uxtb	r2, r3
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	2200      	movs	r2, #0
 8003d86:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d163      	bne.n	8003e58 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d94:	009a      	lsls	r2, r3, #2
 8003d96:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003d9a:	4013      	ands	r3, r2
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8003da0:	0f92      	lsrs	r2, r2, #30
 8003da2:	431a      	orrs	r2, r3
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003dac:	0edb      	lsrs	r3, r3, #27
 8003dae:	b2db      	uxtb	r3, r3
 8003db0:	f003 0307 	and.w	r3, r3, #7
 8003db4:	b2da      	uxtb	r2, r3
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003dbe:	0e1b      	lsrs	r3, r3, #24
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	f003 0307 	and.w	r3, r3, #7
 8003dc6:	b2da      	uxtb	r2, r3
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003dd0:	0d5b      	lsrs	r3, r3, #21
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	f003 0307 	and.w	r3, r3, #7
 8003dd8:	b2da      	uxtb	r2, r3
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003de2:	0c9b      	lsrs	r3, r3, #18
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	f003 0307 	and.w	r3, r3, #7
 8003dea:	b2da      	uxtb	r2, r3
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003df4:	0bdb      	lsrs	r3, r3, #15
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	f003 0307 	and.w	r3, r3, #7
 8003dfc:	b2da      	uxtb	r2, r3
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	691b      	ldr	r3, [r3, #16]
 8003e06:	1c5a      	adds	r2, r3, #1
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	7e1b      	ldrb	r3, [r3, #24]
 8003e10:	b2db      	uxtb	r3, r3
 8003e12:	f003 0307 	and.w	r3, r3, #7
 8003e16:	3302      	adds	r3, #2
 8003e18:	2201      	movs	r2, #1
 8003e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e1e:	687a      	ldr	r2, [r7, #4]
 8003e20:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003e22:	fb02 f203 	mul.w	r2, r2, r3
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	7a1b      	ldrb	r3, [r3, #8]
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	f003 030f 	and.w	r3, r3, #15
 8003e34:	2201      	movs	r2, #1
 8003e36:	409a      	lsls	r2, r3
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e40:	687a      	ldr	r2, [r7, #4]
 8003e42:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003e44:	0a52      	lsrs	r2, r2, #9
 8003e46:	fb02 f203 	mul.w	r2, r2, r3
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e54:	661a      	str	r2, [r3, #96]	; 0x60
 8003e56:	e031      	b.n	8003ebc <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d11d      	bne.n	8003e9c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e64:	041b      	lsls	r3, r3, #16
 8003e66:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e6e:	0c1b      	lsrs	r3, r3, #16
 8003e70:	431a      	orrs	r2, r3
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	691b      	ldr	r3, [r3, #16]
 8003e7a:	3301      	adds	r3, #1
 8003e7c:	029a      	lsls	r2, r3, #10
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e90:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	661a      	str	r2, [r3, #96]	; 0x60
 8003e9a:	e00f      	b.n	8003ebc <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a58      	ldr	r2, [pc, #352]	; (8004004 <HAL_SD_GetCardCSD+0x344>)
 8003ea2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ea8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e09d      	b.n	8003ff8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ec0:	0b9b      	lsrs	r3, r3, #14
 8003ec2:	b2db      	uxtb	r3, r3
 8003ec4:	f003 0301 	and.w	r3, r3, #1
 8003ec8:	b2da      	uxtb	r2, r3
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ed2:	09db      	lsrs	r3, r3, #7
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003eda:	b2da      	uxtb	r2, r3
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003eea:	b2da      	uxtb	r2, r3
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ef4:	0fdb      	lsrs	r3, r3, #31
 8003ef6:	b2da      	uxtb	r2, r3
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f00:	0f5b      	lsrs	r3, r3, #29
 8003f02:	b2db      	uxtb	r3, r3
 8003f04:	f003 0303 	and.w	r3, r3, #3
 8003f08:	b2da      	uxtb	r2, r3
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f12:	0e9b      	lsrs	r3, r3, #26
 8003f14:	b2db      	uxtb	r3, r3
 8003f16:	f003 0307 	and.w	r3, r3, #7
 8003f1a:	b2da      	uxtb	r2, r3
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f24:	0d9b      	lsrs	r3, r3, #22
 8003f26:	b2db      	uxtb	r3, r3
 8003f28:	f003 030f 	and.w	r3, r3, #15
 8003f2c:	b2da      	uxtb	r2, r3
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f36:	0d5b      	lsrs	r3, r3, #21
 8003f38:	b2db      	uxtb	r3, r3
 8003f3a:	f003 0301 	and.w	r3, r3, #1
 8003f3e:	b2da      	uxtb	r2, r3
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f52:	0c1b      	lsrs	r3, r3, #16
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	f003 0301 	and.w	r3, r3, #1
 8003f5a:	b2da      	uxtb	r2, r3
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f66:	0bdb      	lsrs	r3, r3, #15
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	f003 0301 	and.w	r3, r3, #1
 8003f6e:	b2da      	uxtb	r2, r3
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f7a:	0b9b      	lsrs	r3, r3, #14
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	f003 0301 	and.w	r3, r3, #1
 8003f82:	b2da      	uxtb	r2, r3
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f8e:	0b5b      	lsrs	r3, r3, #13
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	f003 0301 	and.w	r3, r3, #1
 8003f96:	b2da      	uxtb	r2, r3
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fa2:	0b1b      	lsrs	r3, r3, #12
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	f003 0301 	and.w	r3, r3, #1
 8003faa:	b2da      	uxtb	r2, r3
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fb6:	0a9b      	lsrs	r3, r3, #10
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	f003 0303 	and.w	r3, r3, #3
 8003fbe:	b2da      	uxtb	r2, r3
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fca:	0a1b      	lsrs	r3, r3, #8
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	f003 0303 	and.w	r3, r3, #3
 8003fd2:	b2da      	uxtb	r2, r3
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fde:	085b      	lsrs	r3, r3, #1
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003fe6:	b2da      	uxtb	r2, r3
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8003ff6:	2300      	movs	r3, #0
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	370c      	adds	r7, #12
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004002:	4770      	bx	lr
 8004004:	004005ff 	.word	0x004005ff

08004008 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8004008:	b480      	push	{r7}
 800400a:	b083      	sub	sp, #12
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
 8004010:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8004052:	2300      	movs	r3, #0
}
 8004054:	4618      	mov	r0, r3
 8004056:	370c      	adds	r7, #12
 8004058:	46bd      	mov	sp, r7
 800405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405e:	4770      	bx	lr

08004060 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8004060:	b5b0      	push	{r4, r5, r7, lr}
 8004062:	b08e      	sub	sp, #56	; 0x38
 8004064:	af04      	add	r7, sp, #16
 8004066:	6078      	str	r0, [r7, #4]
 8004068:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800406a:	2300      	movs	r3, #0
 800406c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2203      	movs	r2, #3
 8004074:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800407c:	2b03      	cmp	r3, #3
 800407e:	d02e      	beq.n	80040de <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004086:	d106      	bne.n	8004096 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800408c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	639a      	str	r2, [r3, #56]	; 0x38
 8004094:	e029      	b.n	80040ea <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800409c:	d10a      	bne.n	80040b4 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f000 fb28 	bl	80046f4 <SD_WideBus_Enable>
 80040a4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040aa:	6a3b      	ldr	r3, [r7, #32]
 80040ac:	431a      	orrs	r2, r3
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	639a      	str	r2, [r3, #56]	; 0x38
 80040b2:	e01a      	b.n	80040ea <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d10a      	bne.n	80040d0 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f000 fb65 	bl	800478a <SD_WideBus_Disable>
 80040c0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040c6:	6a3b      	ldr	r3, [r7, #32]
 80040c8:	431a      	orrs	r2, r3
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	639a      	str	r2, [r3, #56]	; 0x38
 80040ce:	e00c      	b.n	80040ea <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040d4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	639a      	str	r2, [r3, #56]	; 0x38
 80040dc:	e005      	b.n	80040ea <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040e2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d00b      	beq.n	800410a <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a26      	ldr	r2, [pc, #152]	; (8004190 <HAL_SD_ConfigWideBusOperation+0x130>)
 80040f8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2201      	movs	r2, #1
 80040fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004108:	e01f      	b.n	800414a <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	68db      	ldr	r3, [r3, #12]
 800411a:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	695b      	ldr	r3, [r3, #20]
 8004124:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	699b      	ldr	r3, [r3, #24]
 800412a:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681d      	ldr	r5, [r3, #0]
 8004130:	466c      	mov	r4, sp
 8004132:	f107 0314 	add.w	r3, r7, #20
 8004136:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800413a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800413e:	f107 0308 	add.w	r3, r7, #8
 8004142:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004144:	4628      	mov	r0, r5
 8004146:	f001 faa7 	bl	8005698 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004152:	4618      	mov	r0, r3
 8004154:	f001 fb7c 	bl	8005850 <SDMMC_CmdBlockLength>
 8004158:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800415a:	6a3b      	ldr	r3, [r7, #32]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d00c      	beq.n	800417a <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a0a      	ldr	r2, [pc, #40]	; (8004190 <HAL_SD_ConfigWideBusOperation+0x130>)
 8004166:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800416c:	6a3b      	ldr	r3, [r7, #32]
 800416e:	431a      	orrs	r2, r3
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2201      	movs	r2, #1
 800417e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8004182:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004186:	4618      	mov	r0, r3
 8004188:	3728      	adds	r7, #40	; 0x28
 800418a:	46bd      	mov	sp, r7
 800418c:	bdb0      	pop	{r4, r5, r7, pc}
 800418e:	bf00      	nop
 8004190:	004005ff 	.word	0x004005ff

08004194 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b086      	sub	sp, #24
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800419c:	2300      	movs	r3, #0
 800419e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80041a0:	f107 030c 	add.w	r3, r7, #12
 80041a4:	4619      	mov	r1, r3
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f000 fa7c 	bl	80046a4 <SD_SendStatus>
 80041ac:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d005      	beq.n	80041c0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	431a      	orrs	r2, r3
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	0a5b      	lsrs	r3, r3, #9
 80041c4:	f003 030f 	and.w	r3, r3, #15
 80041c8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80041ca:	693b      	ldr	r3, [r7, #16]
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3718      	adds	r7, #24
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}

080041d4 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b085      	sub	sp, #20
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041e0:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041f0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80041f2:	bf00      	nop
 80041f4:	3714      	adds	r7, #20
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr

080041fe <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80041fe:	b580      	push	{r7, lr}
 8004200:	b084      	sub	sp, #16
 8004202:	af00      	add	r7, sp, #0
 8004204:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800420a:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004210:	2b82      	cmp	r3, #130	; 0x82
 8004212:	d111      	bne.n	8004238 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4618      	mov	r0, r3
 800421a:	f001 fbc3 	bl	80059a4 <SDMMC_CmdStopTransfer>
 800421e:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d008      	beq.n	8004238 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	431a      	orrs	r2, r3
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8004232:	68f8      	ldr	r0, [r7, #12]
 8004234:	f7fd fb30 	bl	8001898 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f022 0208 	bic.w	r2, r2, #8
 8004246:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f240 523a 	movw	r2, #1338	; 0x53a
 8004250:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2201      	movs	r2, #1
 8004256:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2200      	movs	r2, #0
 800425e:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8004260:	68f8      	ldr	r0, [r7, #12]
 8004262:	f7fd faef 	bl	8001844 <HAL_SD_RxCpltCallback>
#endif
}
 8004266:	bf00      	nop
 8004268:	3710      	adds	r7, #16
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}
	...

08004270 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b086      	sub	sp, #24
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800427c:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f7fe f9dc 	bl	800263c <HAL_DMA_GetError>
 8004284:	4603      	mov	r3, r0
 8004286:	2b02      	cmp	r3, #2
 8004288:	d03e      	beq.n	8004308 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004290:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004296:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004298:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	2b01      	cmp	r3, #1
 800429e:	d002      	beq.n	80042a6 <SD_DMAError+0x36>
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	d12d      	bne.n	8004302 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a19      	ldr	r2, [pc, #100]	; (8004310 <SD_DMAError+0xa0>)
 80042ac:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80042bc:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042c2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 80042ca:	6978      	ldr	r0, [r7, #20]
 80042cc:	f7ff ff62 	bl	8004194 <HAL_SD_GetCardState>
 80042d0:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	2b06      	cmp	r3, #6
 80042d6:	d002      	beq.n	80042de <SD_DMAError+0x6e>
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	2b05      	cmp	r3, #5
 80042dc:	d10a      	bne.n	80042f4 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4618      	mov	r0, r3
 80042e4:	f001 fb5e 	bl	80059a4 <SDMMC_CmdStopTransfer>
 80042e8:	4602      	mov	r2, r0
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ee:	431a      	orrs	r2, r3
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	2201      	movs	r2, #1
 80042f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	2200      	movs	r2, #0
 8004300:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8004302:	6978      	ldr	r0, [r7, #20]
 8004304:	f7fd fac8 	bl	8001898 <HAL_SD_ErrorCallback>
#endif
  }
}
 8004308:	bf00      	nop
 800430a:	3718      	adds	r7, #24
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}
 8004310:	004005ff 	.word	0x004005ff

08004314 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b084      	sub	sp, #16
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004320:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f240 523a 	movw	r2, #1338	; 0x53a
 800432a:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800432c:	68f8      	ldr	r0, [r7, #12]
 800432e:	f7ff ff31 	bl	8004194 <HAL_SD_GetCardState>
 8004332:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2201      	movs	r2, #1
 8004338:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2200      	movs	r2, #0
 8004340:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	2b06      	cmp	r3, #6
 8004346:	d002      	beq.n	800434e <SD_DMATxAbort+0x3a>
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	2b05      	cmp	r3, #5
 800434c:	d10a      	bne.n	8004364 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4618      	mov	r0, r3
 8004354:	f001 fb26 	bl	80059a4 <SDMMC_CmdStopTransfer>
 8004358:	4602      	mov	r2, r0
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800435e:	431a      	orrs	r2, r3
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004368:	2b00      	cmp	r3, #0
 800436a:	d103      	bne.n	8004374 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800436c:	68f8      	ldr	r0, [r7, #12]
 800436e:	f7fd fa89 	bl	8001884 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8004372:	e002      	b.n	800437a <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8004374:	68f8      	ldr	r0, [r7, #12]
 8004376:	f7fd fa8f 	bl	8001898 <HAL_SD_ErrorCallback>
}
 800437a:	bf00      	nop
 800437c:	3710      	adds	r7, #16
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}

08004382 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8004382:	b580      	push	{r7, lr}
 8004384:	b084      	sub	sp, #16
 8004386:	af00      	add	r7, sp, #0
 8004388:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800438e:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f240 523a 	movw	r2, #1338	; 0x53a
 8004398:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800439a:	68f8      	ldr	r0, [r7, #12]
 800439c:	f7ff fefa 	bl	8004194 <HAL_SD_GetCardState>
 80043a0:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	2201      	movs	r2, #1
 80043a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2200      	movs	r2, #0
 80043ae:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	2b06      	cmp	r3, #6
 80043b4:	d002      	beq.n	80043bc <SD_DMARxAbort+0x3a>
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	2b05      	cmp	r3, #5
 80043ba:	d10a      	bne.n	80043d2 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4618      	mov	r0, r3
 80043c2:	f001 faef 	bl	80059a4 <SDMMC_CmdStopTransfer>
 80043c6:	4602      	mov	r2, r0
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043cc:	431a      	orrs	r2, r3
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d103      	bne.n	80043e2 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80043da:	68f8      	ldr	r0, [r7, #12]
 80043dc:	f7fd fa52 	bl	8001884 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80043e0:	e002      	b.n	80043e8 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80043e2:	68f8      	ldr	r0, [r7, #12]
 80043e4:	f7fd fa58 	bl	8001898 <HAL_SD_ErrorCallback>
}
 80043e8:	bf00      	nop
 80043ea:	3710      	adds	r7, #16
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}

080043f0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80043f0:	b5b0      	push	{r4, r5, r7, lr}
 80043f2:	b094      	sub	sp, #80	; 0x50
 80043f4:	af04      	add	r7, sp, #16
 80043f6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80043f8:	2301      	movs	r3, #1
 80043fa:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4618      	mov	r0, r3
 8004402:	f001 f9a1 	bl	8005748 <SDIO_GetPowerState>
 8004406:	4603      	mov	r3, r0
 8004408:	2b00      	cmp	r3, #0
 800440a:	d102      	bne.n	8004412 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800440c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004410:	e0b6      	b.n	8004580 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004416:	2b03      	cmp	r3, #3
 8004418:	d02f      	beq.n	800447a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4618      	mov	r0, r3
 8004420:	f001 fbca 	bl	8005bb8 <SDMMC_CmdSendCID>
 8004424:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004426:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004428:	2b00      	cmp	r3, #0
 800442a:	d001      	beq.n	8004430 <SD_InitCard+0x40>
    {
      return errorstate;
 800442c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800442e:	e0a7      	b.n	8004580 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	2100      	movs	r1, #0
 8004436:	4618      	mov	r0, r3
 8004438:	f001 f9cb 	bl	80057d2 <SDIO_GetResponse>
 800443c:	4602      	mov	r2, r0
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	2104      	movs	r1, #4
 8004448:	4618      	mov	r0, r3
 800444a:	f001 f9c2 	bl	80057d2 <SDIO_GetResponse>
 800444e:	4602      	mov	r2, r0
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	2108      	movs	r1, #8
 800445a:	4618      	mov	r0, r3
 800445c:	f001 f9b9 	bl	80057d2 <SDIO_GetResponse>
 8004460:	4602      	mov	r2, r0
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	210c      	movs	r1, #12
 800446c:	4618      	mov	r0, r3
 800446e:	f001 f9b0 	bl	80057d2 <SDIO_GetResponse>
 8004472:	4602      	mov	r2, r0
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800447e:	2b03      	cmp	r3, #3
 8004480:	d00d      	beq.n	800449e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f107 020e 	add.w	r2, r7, #14
 800448a:	4611      	mov	r1, r2
 800448c:	4618      	mov	r0, r3
 800448e:	f001 fbd0 	bl	8005c32 <SDMMC_CmdSetRelAdd>
 8004492:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004494:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004496:	2b00      	cmp	r3, #0
 8004498:	d001      	beq.n	800449e <SD_InitCard+0xae>
    {
      return errorstate;
 800449a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800449c:	e070      	b.n	8004580 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044a2:	2b03      	cmp	r3, #3
 80044a4:	d036      	beq.n	8004514 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80044a6:	89fb      	ldrh	r3, [r7, #14]
 80044a8:	461a      	mov	r2, r3
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044b6:	041b      	lsls	r3, r3, #16
 80044b8:	4619      	mov	r1, r3
 80044ba:	4610      	mov	r0, r2
 80044bc:	f001 fb9a 	bl	8005bf4 <SDMMC_CmdSendCSD>
 80044c0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80044c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d001      	beq.n	80044cc <SD_InitCard+0xdc>
    {
      return errorstate;
 80044c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044ca:	e059      	b.n	8004580 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	2100      	movs	r1, #0
 80044d2:	4618      	mov	r0, r3
 80044d4:	f001 f97d 	bl	80057d2 <SDIO_GetResponse>
 80044d8:	4602      	mov	r2, r0
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	2104      	movs	r1, #4
 80044e4:	4618      	mov	r0, r3
 80044e6:	f001 f974 	bl	80057d2 <SDIO_GetResponse>
 80044ea:	4602      	mov	r2, r0
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	2108      	movs	r1, #8
 80044f6:	4618      	mov	r0, r3
 80044f8:	f001 f96b 	bl	80057d2 <SDIO_GetResponse>
 80044fc:	4602      	mov	r2, r0
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	210c      	movs	r1, #12
 8004508:	4618      	mov	r0, r3
 800450a:	f001 f962 	bl	80057d2 <SDIO_GetResponse>
 800450e:	4602      	mov	r2, r0
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	2104      	movs	r1, #4
 800451a:	4618      	mov	r0, r3
 800451c:	f001 f959 	bl	80057d2 <SDIO_GetResponse>
 8004520:	4603      	mov	r3, r0
 8004522:	0d1a      	lsrs	r2, r3, #20
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8004528:	f107 0310 	add.w	r3, r7, #16
 800452c:	4619      	mov	r1, r3
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f7ff fbc6 	bl	8003cc0 <HAL_SD_GetCardCSD>
 8004534:	4603      	mov	r3, r0
 8004536:	2b00      	cmp	r3, #0
 8004538:	d002      	beq.n	8004540 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800453a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800453e:	e01f      	b.n	8004580 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6819      	ldr	r1, [r3, #0]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004548:	041b      	lsls	r3, r3, #16
 800454a:	461a      	mov	r2, r3
 800454c:	f04f 0300 	mov.w	r3, #0
 8004550:	4608      	mov	r0, r1
 8004552:	f001 fa49 	bl	80059e8 <SDMMC_CmdSelDesel>
 8004556:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8004558:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800455a:	2b00      	cmp	r3, #0
 800455c:	d001      	beq.n	8004562 <SD_InitCard+0x172>
  {
    return errorstate;
 800455e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004560:	e00e      	b.n	8004580 <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681d      	ldr	r5, [r3, #0]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	466c      	mov	r4, sp
 800456a:	f103 0210 	add.w	r2, r3, #16
 800456e:	ca07      	ldmia	r2, {r0, r1, r2}
 8004570:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004574:	3304      	adds	r3, #4
 8004576:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004578:	4628      	mov	r0, r5
 800457a:	f001 f88d 	bl	8005698 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800457e:	2300      	movs	r3, #0
}
 8004580:	4618      	mov	r0, r3
 8004582:	3740      	adds	r7, #64	; 0x40
 8004584:	46bd      	mov	sp, r7
 8004586:	bdb0      	pop	{r4, r5, r7, pc}

08004588 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b086      	sub	sp, #24
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004590:	2300      	movs	r3, #0
 8004592:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8004594:	2300      	movs	r3, #0
 8004596:	617b      	str	r3, [r7, #20]
 8004598:	2300      	movs	r3, #0
 800459a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4618      	mov	r0, r3
 80045a2:	f001 fa44 	bl	8005a2e <SDMMC_CmdGoIdleState>
 80045a6:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d001      	beq.n	80045b2 <SD_PowerON+0x2a>
  {
    return errorstate;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	e072      	b.n	8004698 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4618      	mov	r0, r3
 80045b8:	f001 fa57 	bl	8005a6a <SDMMC_CmdOperCond>
 80045bc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d00d      	beq.n	80045e0 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2200      	movs	r2, #0
 80045c8:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4618      	mov	r0, r3
 80045d0:	f001 fa2d 	bl	8005a2e <SDMMC_CmdGoIdleState>
 80045d4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d004      	beq.n	80045e6 <SD_PowerON+0x5e>
    {
      return errorstate;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	e05b      	b.n	8004698 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2201      	movs	r2, #1
 80045e4:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045ea:	2b01      	cmp	r3, #1
 80045ec:	d137      	bne.n	800465e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	2100      	movs	r1, #0
 80045f4:	4618      	mov	r0, r3
 80045f6:	f001 fa57 	bl	8005aa8 <SDMMC_CmdAppCommand>
 80045fa:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d02d      	beq.n	800465e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004602:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004606:	e047      	b.n	8004698 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	2100      	movs	r1, #0
 800460e:	4618      	mov	r0, r3
 8004610:	f001 fa4a 	bl	8005aa8 <SDMMC_CmdAppCommand>
 8004614:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d001      	beq.n	8004620 <SD_PowerON+0x98>
    {
      return errorstate;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	e03b      	b.n	8004698 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	491e      	ldr	r1, [pc, #120]	; (80046a0 <SD_PowerON+0x118>)
 8004626:	4618      	mov	r0, r3
 8004628:	f001 fa60 	bl	8005aec <SDMMC_CmdAppOperCommand>
 800462c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d002      	beq.n	800463a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004634:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004638:	e02e      	b.n	8004698 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	2100      	movs	r1, #0
 8004640:	4618      	mov	r0, r3
 8004642:	f001 f8c6 	bl	80057d2 <SDIO_GetResponse>
 8004646:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	0fdb      	lsrs	r3, r3, #31
 800464c:	2b01      	cmp	r3, #1
 800464e:	d101      	bne.n	8004654 <SD_PowerON+0xcc>
 8004650:	2301      	movs	r3, #1
 8004652:	e000      	b.n	8004656 <SD_PowerON+0xce>
 8004654:	2300      	movs	r3, #0
 8004656:	613b      	str	r3, [r7, #16]

    count++;
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	3301      	adds	r3, #1
 800465c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004664:	4293      	cmp	r3, r2
 8004666:	d802      	bhi.n	800466e <SD_PowerON+0xe6>
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d0cc      	beq.n	8004608 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004674:	4293      	cmp	r3, r2
 8004676:	d902      	bls.n	800467e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8004678:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800467c:	e00c      	b.n	8004698 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004684:	2b00      	cmp	r3, #0
 8004686:	d003      	beq.n	8004690 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2201      	movs	r2, #1
 800468c:	645a      	str	r2, [r3, #68]	; 0x44
 800468e:	e002      	b.n	8004696 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2200      	movs	r2, #0
 8004694:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8004696:	2300      	movs	r3, #0
}
 8004698:	4618      	mov	r0, r3
 800469a:	3718      	adds	r7, #24
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}
 80046a0:	c1100000 	.word	0xc1100000

080046a4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b084      	sub	sp, #16
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d102      	bne.n	80046ba <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80046b4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80046b8:	e018      	b.n	80046ec <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046c2:	041b      	lsls	r3, r3, #16
 80046c4:	4619      	mov	r1, r3
 80046c6:	4610      	mov	r0, r2
 80046c8:	f001 fad4 	bl	8005c74 <SDMMC_CmdSendStatus>
 80046cc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d001      	beq.n	80046d8 <SD_SendStatus+0x34>
  {
    return errorstate;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	e009      	b.n	80046ec <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	2100      	movs	r1, #0
 80046de:	4618      	mov	r0, r3
 80046e0:	f001 f877 	bl	80057d2 <SDIO_GetResponse>
 80046e4:	4602      	mov	r2, r0
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80046ea:	2300      	movs	r3, #0
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	3710      	adds	r7, #16
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}

080046f4 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b086      	sub	sp, #24
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80046fc:	2300      	movs	r3, #0
 80046fe:	60fb      	str	r3, [r7, #12]
 8004700:	2300      	movs	r3, #0
 8004702:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	2100      	movs	r1, #0
 800470a:	4618      	mov	r0, r3
 800470c:	f001 f861 	bl	80057d2 <SDIO_GetResponse>
 8004710:	4603      	mov	r3, r0
 8004712:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004716:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800471a:	d102      	bne.n	8004722 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800471c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004720:	e02f      	b.n	8004782 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004722:	f107 030c 	add.w	r3, r7, #12
 8004726:	4619      	mov	r1, r3
 8004728:	6878      	ldr	r0, [r7, #4]
 800472a:	f000 f879 	bl	8004820 <SD_FindSCR>
 800472e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d001      	beq.n	800473a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	e023      	b.n	8004782 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004740:	2b00      	cmp	r3, #0
 8004742:	d01c      	beq.n	800477e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800474c:	041b      	lsls	r3, r3, #16
 800474e:	4619      	mov	r1, r3
 8004750:	4610      	mov	r0, r2
 8004752:	f001 f9a9 	bl	8005aa8 <SDMMC_CmdAppCommand>
 8004756:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d001      	beq.n	8004762 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	e00f      	b.n	8004782 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	2102      	movs	r1, #2
 8004768:	4618      	mov	r0, r3
 800476a:	f001 f9e2 	bl	8005b32 <SDMMC_CmdBusWidth>
 800476e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d001      	beq.n	800477a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	e003      	b.n	8004782 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800477a:	2300      	movs	r3, #0
 800477c:	e001      	b.n	8004782 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800477e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004782:	4618      	mov	r0, r3
 8004784:	3718      	adds	r7, #24
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}

0800478a <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800478a:	b580      	push	{r7, lr}
 800478c:	b086      	sub	sp, #24
 800478e:	af00      	add	r7, sp, #0
 8004790:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8004792:	2300      	movs	r3, #0
 8004794:	60fb      	str	r3, [r7, #12]
 8004796:	2300      	movs	r3, #0
 8004798:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	2100      	movs	r1, #0
 80047a0:	4618      	mov	r0, r3
 80047a2:	f001 f816 	bl	80057d2 <SDIO_GetResponse>
 80047a6:	4603      	mov	r3, r0
 80047a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80047b0:	d102      	bne.n	80047b8 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80047b2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80047b6:	e02f      	b.n	8004818 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80047b8:	f107 030c 	add.w	r3, r7, #12
 80047bc:	4619      	mov	r1, r3
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f000 f82e 	bl	8004820 <SD_FindSCR>
 80047c4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d001      	beq.n	80047d0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	e023      	b.n	8004818 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d01c      	beq.n	8004814 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681a      	ldr	r2, [r3, #0]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047e2:	041b      	lsls	r3, r3, #16
 80047e4:	4619      	mov	r1, r3
 80047e6:	4610      	mov	r0, r2
 80047e8:	f001 f95e 	bl	8005aa8 <SDMMC_CmdAppCommand>
 80047ec:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d001      	beq.n	80047f8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	e00f      	b.n	8004818 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	2100      	movs	r1, #0
 80047fe:	4618      	mov	r0, r3
 8004800:	f001 f997 	bl	8005b32 <SDMMC_CmdBusWidth>
 8004804:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d001      	beq.n	8004810 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	e003      	b.n	8004818 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8004810:	2300      	movs	r3, #0
 8004812:	e001      	b.n	8004818 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004814:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004818:	4618      	mov	r0, r3
 800481a:	3718      	adds	r7, #24
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}

08004820 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8004820:	b590      	push	{r4, r7, lr}
 8004822:	b08f      	sub	sp, #60	; 0x3c
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
 8004828:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800482a:	f7fd fb43 	bl	8001eb4 <HAL_GetTick>
 800482e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8004830:	2300      	movs	r3, #0
 8004832:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8004834:	2300      	movs	r3, #0
 8004836:	60bb      	str	r3, [r7, #8]
 8004838:	2300      	movs	r3, #0
 800483a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	2108      	movs	r1, #8
 8004846:	4618      	mov	r0, r3
 8004848:	f001 f802 	bl	8005850 <SDMMC_CmdBlockLength>
 800484c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800484e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004850:	2b00      	cmp	r3, #0
 8004852:	d001      	beq.n	8004858 <SD_FindSCR+0x38>
  {
    return errorstate;
 8004854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004856:	e0b2      	b.n	80049be <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004860:	041b      	lsls	r3, r3, #16
 8004862:	4619      	mov	r1, r3
 8004864:	4610      	mov	r0, r2
 8004866:	f001 f91f 	bl	8005aa8 <SDMMC_CmdAppCommand>
 800486a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800486c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800486e:	2b00      	cmp	r3, #0
 8004870:	d001      	beq.n	8004876 <SD_FindSCR+0x56>
  {
    return errorstate;
 8004872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004874:	e0a3      	b.n	80049be <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004876:	f04f 33ff 	mov.w	r3, #4294967295
 800487a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800487c:	2308      	movs	r3, #8
 800487e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8004880:	2330      	movs	r3, #48	; 0x30
 8004882:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8004884:	2302      	movs	r3, #2
 8004886:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004888:	2300      	movs	r3, #0
 800488a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800488c:	2301      	movs	r3, #1
 800488e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f107 0210 	add.w	r2, r7, #16
 8004898:	4611      	mov	r1, r2
 800489a:	4618      	mov	r0, r3
 800489c:	f000 ffac 	bl	80057f8 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4618      	mov	r0, r3
 80048a6:	f001 f966 	bl	8005b76 <SDMMC_CmdSendSCR>
 80048aa:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80048ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d02a      	beq.n	8004908 <SD_FindSCR+0xe8>
  {
    return errorstate;
 80048b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048b4:	e083      	b.n	80049be <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d00f      	beq.n	80048e4 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6819      	ldr	r1, [r3, #0]
 80048c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048ca:	009b      	lsls	r3, r3, #2
 80048cc:	f107 0208 	add.w	r2, r7, #8
 80048d0:	18d4      	adds	r4, r2, r3
 80048d2:	4608      	mov	r0, r1
 80048d4:	f000 ff0b 	bl	80056ee <SDIO_ReadFIFO>
 80048d8:	4603      	mov	r3, r0
 80048da:	6023      	str	r3, [r4, #0]
      index++;
 80048dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048de:	3301      	adds	r3, #1
 80048e0:	637b      	str	r3, [r7, #52]	; 0x34
 80048e2:	e006      	b.n	80048f2 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d012      	beq.n	8004918 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80048f2:	f7fd fadf 	bl	8001eb4 <HAL_GetTick>
 80048f6:	4602      	mov	r2, r0
 80048f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048fa:	1ad3      	subs	r3, r2, r3
 80048fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004900:	d102      	bne.n	8004908 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8004902:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004906:	e05a      	b.n	80049be <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800490e:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8004912:	2b00      	cmp	r3, #0
 8004914:	d0cf      	beq.n	80048b6 <SD_FindSCR+0x96>
 8004916:	e000      	b.n	800491a <SD_FindSCR+0xfa>
      break;
 8004918:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004920:	f003 0308 	and.w	r3, r3, #8
 8004924:	2b00      	cmp	r3, #0
 8004926:	d005      	beq.n	8004934 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	2208      	movs	r2, #8
 800492e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8004930:	2308      	movs	r3, #8
 8004932:	e044      	b.n	80049be <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800493a:	f003 0302 	and.w	r3, r3, #2
 800493e:	2b00      	cmp	r3, #0
 8004940:	d005      	beq.n	800494e <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	2202      	movs	r2, #2
 8004948:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800494a:	2302      	movs	r3, #2
 800494c:	e037      	b.n	80049be <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004954:	f003 0320 	and.w	r3, r3, #32
 8004958:	2b00      	cmp	r3, #0
 800495a:	d005      	beq.n	8004968 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	2220      	movs	r2, #32
 8004962:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8004964:	2320      	movs	r3, #32
 8004966:	e02a      	b.n	80049be <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f240 523a 	movw	r2, #1338	; 0x53a
 8004970:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	061a      	lsls	r2, r3, #24
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	021b      	lsls	r3, r3, #8
 800497a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800497e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	0a1b      	lsrs	r3, r3, #8
 8004984:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004988:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	0e1b      	lsrs	r3, r3, #24
 800498e:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004992:	601a      	str	r2, [r3, #0]
    scr++;
 8004994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004996:	3304      	adds	r3, #4
 8004998:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	061a      	lsls	r2, r3, #24
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	021b      	lsls	r3, r3, #8
 80049a2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80049a6:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	0a1b      	lsrs	r3, r3, #8
 80049ac:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80049b0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	0e1b      	lsrs	r3, r3, #24
 80049b6:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80049b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049ba:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80049bc:	2300      	movs	r3, #0
}
 80049be:	4618      	mov	r0, r3
 80049c0:	373c      	adds	r7, #60	; 0x3c
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd90      	pop	{r4, r7, pc}

080049c6 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80049c6:	b580      	push	{r7, lr}
 80049c8:	b086      	sub	sp, #24
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049d2:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049d8:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d03f      	beq.n	8004a60 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80049e0:	2300      	movs	r3, #0
 80049e2:	617b      	str	r3, [r7, #20]
 80049e4:	e033      	b.n	8004a4e <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4618      	mov	r0, r3
 80049ec:	f000 fe7f 	bl	80056ee <SDIO_ReadFIFO>
 80049f0:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	b2da      	uxtb	r2, r3
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	701a      	strb	r2, [r3, #0]
      tmp++;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	3301      	adds	r3, #1
 80049fe:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	3b01      	subs	r3, #1
 8004a04:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	0a1b      	lsrs	r3, r3, #8
 8004a0a:	b2da      	uxtb	r2, r3
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	3301      	adds	r3, #1
 8004a14:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	3b01      	subs	r3, #1
 8004a1a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	0c1b      	lsrs	r3, r3, #16
 8004a20:	b2da      	uxtb	r2, r3
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	3301      	adds	r3, #1
 8004a2a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	3b01      	subs	r3, #1
 8004a30:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	0e1b      	lsrs	r3, r3, #24
 8004a36:	b2da      	uxtb	r2, r3
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	3301      	adds	r3, #1
 8004a40:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	3b01      	subs	r3, #1
 8004a46:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	3301      	adds	r3, #1
 8004a4c:	617b      	str	r3, [r7, #20]
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	2b07      	cmp	r3, #7
 8004a52:	d9c8      	bls.n	80049e6 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	68fa      	ldr	r2, [r7, #12]
 8004a58:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	693a      	ldr	r2, [r7, #16]
 8004a5e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8004a60:	bf00      	nop
 8004a62:	3718      	adds	r7, #24
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}

08004a68 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b086      	sub	sp, #24
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6a1b      	ldr	r3, [r3, #32]
 8004a74:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a7a:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d043      	beq.n	8004b0a <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8004a82:	2300      	movs	r3, #0
 8004a84:	617b      	str	r3, [r7, #20]
 8004a86:	e037      	b.n	8004af8 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	781b      	ldrb	r3, [r3, #0]
 8004a8c:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	3301      	adds	r3, #1
 8004a92:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	3b01      	subs	r3, #1
 8004a98:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	781b      	ldrb	r3, [r3, #0]
 8004a9e:	021a      	lsls	r2, r3, #8
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	3301      	adds	r3, #1
 8004aaa:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	3b01      	subs	r3, #1
 8004ab0:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	781b      	ldrb	r3, [r3, #0]
 8004ab6:	041a      	lsls	r2, r3, #16
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	4313      	orrs	r3, r2
 8004abc:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	3301      	adds	r3, #1
 8004ac2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	3b01      	subs	r3, #1
 8004ac8:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	781b      	ldrb	r3, [r3, #0]
 8004ace:	061a      	lsls	r2, r3, #24
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	3301      	adds	r3, #1
 8004ada:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	3b01      	subs	r3, #1
 8004ae0:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f107 0208 	add.w	r2, r7, #8
 8004aea:	4611      	mov	r1, r2
 8004aec:	4618      	mov	r0, r3
 8004aee:	f000 fe0b 	bl	8005708 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	3301      	adds	r3, #1
 8004af6:	617b      	str	r3, [r7, #20]
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	2b07      	cmp	r3, #7
 8004afc:	d9c4      	bls.n	8004a88 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	68fa      	ldr	r2, [r7, #12]
 8004b02:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	693a      	ldr	r2, [r7, #16]
 8004b08:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8004b0a:	bf00      	nop
 8004b0c:	3718      	adds	r7, #24
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}

08004b12 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b12:	b580      	push	{r7, lr}
 8004b14:	b082      	sub	sp, #8
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d101      	bne.n	8004b24 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	e041      	b.n	8004ba8 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b2a:	b2db      	uxtb	r3, r3
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d106      	bne.n	8004b3e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2200      	movs	r2, #0
 8004b34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b38:	6878      	ldr	r0, [r7, #4]
 8004b3a:	f000 f839 	bl	8004bb0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2202      	movs	r2, #2
 8004b42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	3304      	adds	r3, #4
 8004b4e:	4619      	mov	r1, r3
 8004b50:	4610      	mov	r0, r2
 8004b52:	f000 f9d7 	bl	8004f04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2201      	movs	r2, #1
 8004b5a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2201      	movs	r2, #1
 8004b62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2201      	movs	r2, #1
 8004b6a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2201      	movs	r2, #1
 8004b72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2201      	movs	r2, #1
 8004b7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2201      	movs	r2, #1
 8004b82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2201      	movs	r2, #1
 8004b8a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2201      	movs	r2, #1
 8004b92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2201      	movs	r2, #1
 8004b9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ba6:	2300      	movs	r3, #0
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	3708      	adds	r7, #8
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}

08004bb0 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b083      	sub	sp, #12
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004bb8:	bf00      	nop
 8004bba:	370c      	adds	r7, #12
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc2:	4770      	bx	lr

08004bc4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b085      	sub	sp, #20
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bd2:	b2db      	uxtb	r3, r3
 8004bd4:	2b01      	cmp	r3, #1
 8004bd6:	d001      	beq.n	8004bdc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	e04e      	b.n	8004c7a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2202      	movs	r2, #2
 8004be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	68da      	ldr	r2, [r3, #12]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f042 0201 	orr.w	r2, r2, #1
 8004bf2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a23      	ldr	r2, [pc, #140]	; (8004c88 <HAL_TIM_Base_Start_IT+0xc4>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d022      	beq.n	8004c44 <HAL_TIM_Base_Start_IT+0x80>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c06:	d01d      	beq.n	8004c44 <HAL_TIM_Base_Start_IT+0x80>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a1f      	ldr	r2, [pc, #124]	; (8004c8c <HAL_TIM_Base_Start_IT+0xc8>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d018      	beq.n	8004c44 <HAL_TIM_Base_Start_IT+0x80>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a1e      	ldr	r2, [pc, #120]	; (8004c90 <HAL_TIM_Base_Start_IT+0xcc>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d013      	beq.n	8004c44 <HAL_TIM_Base_Start_IT+0x80>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a1c      	ldr	r2, [pc, #112]	; (8004c94 <HAL_TIM_Base_Start_IT+0xd0>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d00e      	beq.n	8004c44 <HAL_TIM_Base_Start_IT+0x80>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a1b      	ldr	r2, [pc, #108]	; (8004c98 <HAL_TIM_Base_Start_IT+0xd4>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d009      	beq.n	8004c44 <HAL_TIM_Base_Start_IT+0x80>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a19      	ldr	r2, [pc, #100]	; (8004c9c <HAL_TIM_Base_Start_IT+0xd8>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d004      	beq.n	8004c44 <HAL_TIM_Base_Start_IT+0x80>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a18      	ldr	r2, [pc, #96]	; (8004ca0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d111      	bne.n	8004c68 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	f003 0307 	and.w	r3, r3, #7
 8004c4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2b06      	cmp	r3, #6
 8004c54:	d010      	beq.n	8004c78 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f042 0201 	orr.w	r2, r2, #1
 8004c64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c66:	e007      	b.n	8004c78 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	681a      	ldr	r2, [r3, #0]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f042 0201 	orr.w	r2, r2, #1
 8004c76:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c78:	2300      	movs	r3, #0
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	3714      	adds	r7, #20
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c84:	4770      	bx	lr
 8004c86:	bf00      	nop
 8004c88:	40010000 	.word	0x40010000
 8004c8c:	40000400 	.word	0x40000400
 8004c90:	40000800 	.word	0x40000800
 8004c94:	40000c00 	.word	0x40000c00
 8004c98:	40010400 	.word	0x40010400
 8004c9c:	40014000 	.word	0x40014000
 8004ca0:	40001800 	.word	0x40001800

08004ca4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b082      	sub	sp, #8
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	691b      	ldr	r3, [r3, #16]
 8004cb2:	f003 0302 	and.w	r3, r3, #2
 8004cb6:	2b02      	cmp	r3, #2
 8004cb8:	d122      	bne.n	8004d00 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	68db      	ldr	r3, [r3, #12]
 8004cc0:	f003 0302 	and.w	r3, r3, #2
 8004cc4:	2b02      	cmp	r3, #2
 8004cc6:	d11b      	bne.n	8004d00 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f06f 0202 	mvn.w	r2, #2
 8004cd0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2201      	movs	r2, #1
 8004cd6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	699b      	ldr	r3, [r3, #24]
 8004cde:	f003 0303 	and.w	r3, r3, #3
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d003      	beq.n	8004cee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	f000 f8ee 	bl	8004ec8 <HAL_TIM_IC_CaptureCallback>
 8004cec:	e005      	b.n	8004cfa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f000 f8e0 	bl	8004eb4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f000 f8f1 	bl	8004edc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	691b      	ldr	r3, [r3, #16]
 8004d06:	f003 0304 	and.w	r3, r3, #4
 8004d0a:	2b04      	cmp	r3, #4
 8004d0c:	d122      	bne.n	8004d54 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	68db      	ldr	r3, [r3, #12]
 8004d14:	f003 0304 	and.w	r3, r3, #4
 8004d18:	2b04      	cmp	r3, #4
 8004d1a:	d11b      	bne.n	8004d54 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f06f 0204 	mvn.w	r2, #4
 8004d24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2202      	movs	r2, #2
 8004d2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	699b      	ldr	r3, [r3, #24]
 8004d32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d003      	beq.n	8004d42 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f000 f8c4 	bl	8004ec8 <HAL_TIM_IC_CaptureCallback>
 8004d40:	e005      	b.n	8004d4e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f000 f8b6 	bl	8004eb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d48:	6878      	ldr	r0, [r7, #4]
 8004d4a:	f000 f8c7 	bl	8004edc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2200      	movs	r2, #0
 8004d52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	691b      	ldr	r3, [r3, #16]
 8004d5a:	f003 0308 	and.w	r3, r3, #8
 8004d5e:	2b08      	cmp	r3, #8
 8004d60:	d122      	bne.n	8004da8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	68db      	ldr	r3, [r3, #12]
 8004d68:	f003 0308 	and.w	r3, r3, #8
 8004d6c:	2b08      	cmp	r3, #8
 8004d6e:	d11b      	bne.n	8004da8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f06f 0208 	mvn.w	r2, #8
 8004d78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2204      	movs	r2, #4
 8004d7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	69db      	ldr	r3, [r3, #28]
 8004d86:	f003 0303 	and.w	r3, r3, #3
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d003      	beq.n	8004d96 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f000 f89a 	bl	8004ec8 <HAL_TIM_IC_CaptureCallback>
 8004d94:	e005      	b.n	8004da2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	f000 f88c 	bl	8004eb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d9c:	6878      	ldr	r0, [r7, #4]
 8004d9e:	f000 f89d 	bl	8004edc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2200      	movs	r2, #0
 8004da6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	691b      	ldr	r3, [r3, #16]
 8004dae:	f003 0310 	and.w	r3, r3, #16
 8004db2:	2b10      	cmp	r3, #16
 8004db4:	d122      	bne.n	8004dfc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	68db      	ldr	r3, [r3, #12]
 8004dbc:	f003 0310 	and.w	r3, r3, #16
 8004dc0:	2b10      	cmp	r3, #16
 8004dc2:	d11b      	bne.n	8004dfc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f06f 0210 	mvn.w	r2, #16
 8004dcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2208      	movs	r2, #8
 8004dd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	69db      	ldr	r3, [r3, #28]
 8004dda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d003      	beq.n	8004dea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f000 f870 	bl	8004ec8 <HAL_TIM_IC_CaptureCallback>
 8004de8:	e005      	b.n	8004df6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f000 f862 	bl	8004eb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	f000 f873 	bl	8004edc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	691b      	ldr	r3, [r3, #16]
 8004e02:	f003 0301 	and.w	r3, r3, #1
 8004e06:	2b01      	cmp	r3, #1
 8004e08:	d10e      	bne.n	8004e28 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	68db      	ldr	r3, [r3, #12]
 8004e10:	f003 0301 	and.w	r3, r3, #1
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d107      	bne.n	8004e28 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f06f 0201 	mvn.w	r2, #1
 8004e20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f7fc fafc 	bl	8001420 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	691b      	ldr	r3, [r3, #16]
 8004e2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e32:	2b80      	cmp	r3, #128	; 0x80
 8004e34:	d10e      	bne.n	8004e54 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	68db      	ldr	r3, [r3, #12]
 8004e3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e40:	2b80      	cmp	r3, #128	; 0x80
 8004e42:	d107      	bne.n	8004e54 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004e4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f000 f902 	bl	8005058 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	691b      	ldr	r3, [r3, #16]
 8004e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e5e:	2b40      	cmp	r3, #64	; 0x40
 8004e60:	d10e      	bne.n	8004e80 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	68db      	ldr	r3, [r3, #12]
 8004e68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e6c:	2b40      	cmp	r3, #64	; 0x40
 8004e6e:	d107      	bne.n	8004e80 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004e78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f000 f838 	bl	8004ef0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	691b      	ldr	r3, [r3, #16]
 8004e86:	f003 0320 	and.w	r3, r3, #32
 8004e8a:	2b20      	cmp	r3, #32
 8004e8c:	d10e      	bne.n	8004eac <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	68db      	ldr	r3, [r3, #12]
 8004e94:	f003 0320 	and.w	r3, r3, #32
 8004e98:	2b20      	cmp	r3, #32
 8004e9a:	d107      	bne.n	8004eac <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f06f 0220 	mvn.w	r2, #32
 8004ea4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f000 f8cc 	bl	8005044 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004eac:	bf00      	nop
 8004eae:	3708      	adds	r7, #8
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}

08004eb4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b083      	sub	sp, #12
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004ebc:	bf00      	nop
 8004ebe:	370c      	adds	r7, #12
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec6:	4770      	bx	lr

08004ec8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b083      	sub	sp, #12
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ed0:	bf00      	nop
 8004ed2:	370c      	adds	r7, #12
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr

08004edc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b083      	sub	sp, #12
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ee4:	bf00      	nop
 8004ee6:	370c      	adds	r7, #12
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eee:	4770      	bx	lr

08004ef0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b083      	sub	sp, #12
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ef8:	bf00      	nop
 8004efa:	370c      	adds	r7, #12
 8004efc:	46bd      	mov	sp, r7
 8004efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f02:	4770      	bx	lr

08004f04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004f04:	b480      	push	{r7}
 8004f06:	b085      	sub	sp, #20
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
 8004f0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	4a40      	ldr	r2, [pc, #256]	; (8005018 <TIM_Base_SetConfig+0x114>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d013      	beq.n	8004f44 <TIM_Base_SetConfig+0x40>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f22:	d00f      	beq.n	8004f44 <TIM_Base_SetConfig+0x40>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	4a3d      	ldr	r2, [pc, #244]	; (800501c <TIM_Base_SetConfig+0x118>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d00b      	beq.n	8004f44 <TIM_Base_SetConfig+0x40>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	4a3c      	ldr	r2, [pc, #240]	; (8005020 <TIM_Base_SetConfig+0x11c>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d007      	beq.n	8004f44 <TIM_Base_SetConfig+0x40>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	4a3b      	ldr	r2, [pc, #236]	; (8005024 <TIM_Base_SetConfig+0x120>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d003      	beq.n	8004f44 <TIM_Base_SetConfig+0x40>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	4a3a      	ldr	r2, [pc, #232]	; (8005028 <TIM_Base_SetConfig+0x124>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d108      	bne.n	8004f56 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	68fa      	ldr	r2, [r7, #12]
 8004f52:	4313      	orrs	r3, r2
 8004f54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	4a2f      	ldr	r2, [pc, #188]	; (8005018 <TIM_Base_SetConfig+0x114>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d02b      	beq.n	8004fb6 <TIM_Base_SetConfig+0xb2>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f64:	d027      	beq.n	8004fb6 <TIM_Base_SetConfig+0xb2>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	4a2c      	ldr	r2, [pc, #176]	; (800501c <TIM_Base_SetConfig+0x118>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d023      	beq.n	8004fb6 <TIM_Base_SetConfig+0xb2>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	4a2b      	ldr	r2, [pc, #172]	; (8005020 <TIM_Base_SetConfig+0x11c>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d01f      	beq.n	8004fb6 <TIM_Base_SetConfig+0xb2>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	4a2a      	ldr	r2, [pc, #168]	; (8005024 <TIM_Base_SetConfig+0x120>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d01b      	beq.n	8004fb6 <TIM_Base_SetConfig+0xb2>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	4a29      	ldr	r2, [pc, #164]	; (8005028 <TIM_Base_SetConfig+0x124>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d017      	beq.n	8004fb6 <TIM_Base_SetConfig+0xb2>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	4a28      	ldr	r2, [pc, #160]	; (800502c <TIM_Base_SetConfig+0x128>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d013      	beq.n	8004fb6 <TIM_Base_SetConfig+0xb2>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	4a27      	ldr	r2, [pc, #156]	; (8005030 <TIM_Base_SetConfig+0x12c>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d00f      	beq.n	8004fb6 <TIM_Base_SetConfig+0xb2>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	4a26      	ldr	r2, [pc, #152]	; (8005034 <TIM_Base_SetConfig+0x130>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d00b      	beq.n	8004fb6 <TIM_Base_SetConfig+0xb2>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	4a25      	ldr	r2, [pc, #148]	; (8005038 <TIM_Base_SetConfig+0x134>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d007      	beq.n	8004fb6 <TIM_Base_SetConfig+0xb2>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	4a24      	ldr	r2, [pc, #144]	; (800503c <TIM_Base_SetConfig+0x138>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d003      	beq.n	8004fb6 <TIM_Base_SetConfig+0xb2>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	4a23      	ldr	r2, [pc, #140]	; (8005040 <TIM_Base_SetConfig+0x13c>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d108      	bne.n	8004fc8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	68db      	ldr	r3, [r3, #12]
 8004fc2:	68fa      	ldr	r2, [r7, #12]
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	695b      	ldr	r3, [r3, #20]
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	68fa      	ldr	r2, [r7, #12]
 8004fda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	689a      	ldr	r2, [r3, #8]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	681a      	ldr	r2, [r3, #0]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	4a0a      	ldr	r2, [pc, #40]	; (8005018 <TIM_Base_SetConfig+0x114>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d003      	beq.n	8004ffc <TIM_Base_SetConfig+0xf8>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	4a0c      	ldr	r2, [pc, #48]	; (8005028 <TIM_Base_SetConfig+0x124>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d103      	bne.n	8005004 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	691a      	ldr	r2, [r3, #16]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2201      	movs	r2, #1
 8005008:	615a      	str	r2, [r3, #20]
}
 800500a:	bf00      	nop
 800500c:	3714      	adds	r7, #20
 800500e:	46bd      	mov	sp, r7
 8005010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005014:	4770      	bx	lr
 8005016:	bf00      	nop
 8005018:	40010000 	.word	0x40010000
 800501c:	40000400 	.word	0x40000400
 8005020:	40000800 	.word	0x40000800
 8005024:	40000c00 	.word	0x40000c00
 8005028:	40010400 	.word	0x40010400
 800502c:	40014000 	.word	0x40014000
 8005030:	40014400 	.word	0x40014400
 8005034:	40014800 	.word	0x40014800
 8005038:	40001800 	.word	0x40001800
 800503c:	40001c00 	.word	0x40001c00
 8005040:	40002000 	.word	0x40002000

08005044 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005044:	b480      	push	{r7}
 8005046:	b083      	sub	sp, #12
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800504c:	bf00      	nop
 800504e:	370c      	adds	r7, #12
 8005050:	46bd      	mov	sp, r7
 8005052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005056:	4770      	bx	lr

08005058 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005058:	b480      	push	{r7}
 800505a:	b083      	sub	sp, #12
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005060:	bf00      	nop
 8005062:	370c      	adds	r7, #12
 8005064:	46bd      	mov	sp, r7
 8005066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506a:	4770      	bx	lr

0800506c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b082      	sub	sp, #8
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d101      	bne.n	800507e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	e03f      	b.n	80050fe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005084:	b2db      	uxtb	r3, r3
 8005086:	2b00      	cmp	r3, #0
 8005088:	d106      	bne.n	8005098 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2200      	movs	r2, #0
 800508e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f7fc fd1e 	bl	8001ad4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2224      	movs	r2, #36	; 0x24
 800509c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	68da      	ldr	r2, [r3, #12]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80050ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	f000 f929 	bl	8005308 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	691a      	ldr	r2, [r3, #16]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80050c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	695a      	ldr	r2, [r3, #20]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80050d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	68da      	ldr	r2, [r3, #12]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80050e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2200      	movs	r2, #0
 80050ea:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2220      	movs	r2, #32
 80050f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2220      	movs	r2, #32
 80050f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80050fc:	2300      	movs	r3, #0
}
 80050fe:	4618      	mov	r0, r3
 8005100:	3708      	adds	r7, #8
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}

08005106 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005106:	b580      	push	{r7, lr}
 8005108:	b08a      	sub	sp, #40	; 0x28
 800510a:	af02      	add	r7, sp, #8
 800510c:	60f8      	str	r0, [r7, #12]
 800510e:	60b9      	str	r1, [r7, #8]
 8005110:	603b      	str	r3, [r7, #0]
 8005112:	4613      	mov	r3, r2
 8005114:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005116:	2300      	movs	r3, #0
 8005118:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005120:	b2db      	uxtb	r3, r3
 8005122:	2b20      	cmp	r3, #32
 8005124:	d17c      	bne.n	8005220 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d002      	beq.n	8005132 <HAL_UART_Transmit+0x2c>
 800512c:	88fb      	ldrh	r3, [r7, #6]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d101      	bne.n	8005136 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005132:	2301      	movs	r3, #1
 8005134:	e075      	b.n	8005222 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800513c:	2b01      	cmp	r3, #1
 800513e:	d101      	bne.n	8005144 <HAL_UART_Transmit+0x3e>
 8005140:	2302      	movs	r3, #2
 8005142:	e06e      	b.n	8005222 <HAL_UART_Transmit+0x11c>
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2201      	movs	r2, #1
 8005148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2200      	movs	r2, #0
 8005150:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2221      	movs	r2, #33	; 0x21
 8005156:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800515a:	f7fc feab 	bl	8001eb4 <HAL_GetTick>
 800515e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	88fa      	ldrh	r2, [r7, #6]
 8005164:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	88fa      	ldrh	r2, [r7, #6]
 800516a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005174:	d108      	bne.n	8005188 <HAL_UART_Transmit+0x82>
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	691b      	ldr	r3, [r3, #16]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d104      	bne.n	8005188 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800517e:	2300      	movs	r3, #0
 8005180:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	61bb      	str	r3, [r7, #24]
 8005186:	e003      	b.n	8005190 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800518c:	2300      	movs	r3, #0
 800518e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2200      	movs	r2, #0
 8005194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005198:	e02a      	b.n	80051f0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	9300      	str	r3, [sp, #0]
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	2200      	movs	r2, #0
 80051a2:	2180      	movs	r1, #128	; 0x80
 80051a4:	68f8      	ldr	r0, [r7, #12]
 80051a6:	f000 f840 	bl	800522a <UART_WaitOnFlagUntilTimeout>
 80051aa:	4603      	mov	r3, r0
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d001      	beq.n	80051b4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80051b0:	2303      	movs	r3, #3
 80051b2:	e036      	b.n	8005222 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80051b4:	69fb      	ldr	r3, [r7, #28]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d10b      	bne.n	80051d2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80051ba:	69bb      	ldr	r3, [r7, #24]
 80051bc:	881b      	ldrh	r3, [r3, #0]
 80051be:	461a      	mov	r2, r3
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80051c8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80051ca:	69bb      	ldr	r3, [r7, #24]
 80051cc:	3302      	adds	r3, #2
 80051ce:	61bb      	str	r3, [r7, #24]
 80051d0:	e007      	b.n	80051e2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80051d2:	69fb      	ldr	r3, [r7, #28]
 80051d4:	781a      	ldrb	r2, [r3, #0]
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80051dc:	69fb      	ldr	r3, [r7, #28]
 80051de:	3301      	adds	r3, #1
 80051e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80051e6:	b29b      	uxth	r3, r3
 80051e8:	3b01      	subs	r3, #1
 80051ea:	b29a      	uxth	r2, r3
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80051f4:	b29b      	uxth	r3, r3
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d1cf      	bne.n	800519a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	9300      	str	r3, [sp, #0]
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	2200      	movs	r2, #0
 8005202:	2140      	movs	r1, #64	; 0x40
 8005204:	68f8      	ldr	r0, [r7, #12]
 8005206:	f000 f810 	bl	800522a <UART_WaitOnFlagUntilTimeout>
 800520a:	4603      	mov	r3, r0
 800520c:	2b00      	cmp	r3, #0
 800520e:	d001      	beq.n	8005214 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005210:	2303      	movs	r3, #3
 8005212:	e006      	b.n	8005222 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	2220      	movs	r2, #32
 8005218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800521c:	2300      	movs	r3, #0
 800521e:	e000      	b.n	8005222 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005220:	2302      	movs	r3, #2
  }
}
 8005222:	4618      	mov	r0, r3
 8005224:	3720      	adds	r7, #32
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}

0800522a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800522a:	b580      	push	{r7, lr}
 800522c:	b090      	sub	sp, #64	; 0x40
 800522e:	af00      	add	r7, sp, #0
 8005230:	60f8      	str	r0, [r7, #12]
 8005232:	60b9      	str	r1, [r7, #8]
 8005234:	603b      	str	r3, [r7, #0]
 8005236:	4613      	mov	r3, r2
 8005238:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800523a:	e050      	b.n	80052de <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800523c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800523e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005242:	d04c      	beq.n	80052de <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005244:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005246:	2b00      	cmp	r3, #0
 8005248:	d007      	beq.n	800525a <UART_WaitOnFlagUntilTimeout+0x30>
 800524a:	f7fc fe33 	bl	8001eb4 <HAL_GetTick>
 800524e:	4602      	mov	r2, r0
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	1ad3      	subs	r3, r2, r3
 8005254:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005256:	429a      	cmp	r2, r3
 8005258:	d241      	bcs.n	80052de <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	330c      	adds	r3, #12
 8005260:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005264:	e853 3f00 	ldrex	r3, [r3]
 8005268:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800526a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800526c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005270:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	330c      	adds	r3, #12
 8005278:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800527a:	637a      	str	r2, [r7, #52]	; 0x34
 800527c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800527e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005280:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005282:	e841 2300 	strex	r3, r2, [r1]
 8005286:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800528a:	2b00      	cmp	r3, #0
 800528c:	d1e5      	bne.n	800525a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	3314      	adds	r3, #20
 8005294:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	e853 3f00 	ldrex	r3, [r3]
 800529c:	613b      	str	r3, [r7, #16]
   return(result);
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	f023 0301 	bic.w	r3, r3, #1
 80052a4:	63bb      	str	r3, [r7, #56]	; 0x38
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	3314      	adds	r3, #20
 80052ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80052ae:	623a      	str	r2, [r7, #32]
 80052b0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052b2:	69f9      	ldr	r1, [r7, #28]
 80052b4:	6a3a      	ldr	r2, [r7, #32]
 80052b6:	e841 2300 	strex	r3, r2, [r1]
 80052ba:	61bb      	str	r3, [r7, #24]
   return(result);
 80052bc:	69bb      	ldr	r3, [r7, #24]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d1e5      	bne.n	800528e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2220      	movs	r2, #32
 80052c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2220      	movs	r2, #32
 80052ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2200      	movs	r2, #0
 80052d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80052da:	2303      	movs	r3, #3
 80052dc:	e00f      	b.n	80052fe <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	4013      	ands	r3, r2
 80052e8:	68ba      	ldr	r2, [r7, #8]
 80052ea:	429a      	cmp	r2, r3
 80052ec:	bf0c      	ite	eq
 80052ee:	2301      	moveq	r3, #1
 80052f0:	2300      	movne	r3, #0
 80052f2:	b2db      	uxtb	r3, r3
 80052f4:	461a      	mov	r2, r3
 80052f6:	79fb      	ldrb	r3, [r7, #7]
 80052f8:	429a      	cmp	r2, r3
 80052fa:	d09f      	beq.n	800523c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80052fc:	2300      	movs	r3, #0
}
 80052fe:	4618      	mov	r0, r3
 8005300:	3740      	adds	r7, #64	; 0x40
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}
	...

08005308 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800530c:	b09f      	sub	sp, #124	; 0x7c
 800530e:	af00      	add	r7, sp, #0
 8005310:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005312:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	691b      	ldr	r3, [r3, #16]
 8005318:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800531c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800531e:	68d9      	ldr	r1, [r3, #12]
 8005320:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	ea40 0301 	orr.w	r3, r0, r1
 8005328:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800532a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800532c:	689a      	ldr	r2, [r3, #8]
 800532e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005330:	691b      	ldr	r3, [r3, #16]
 8005332:	431a      	orrs	r2, r3
 8005334:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005336:	695b      	ldr	r3, [r3, #20]
 8005338:	431a      	orrs	r2, r3
 800533a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800533c:	69db      	ldr	r3, [r3, #28]
 800533e:	4313      	orrs	r3, r2
 8005340:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005342:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	68db      	ldr	r3, [r3, #12]
 8005348:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800534c:	f021 010c 	bic.w	r1, r1, #12
 8005350:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005352:	681a      	ldr	r2, [r3, #0]
 8005354:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005356:	430b      	orrs	r3, r1
 8005358:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800535a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	695b      	ldr	r3, [r3, #20]
 8005360:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005364:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005366:	6999      	ldr	r1, [r3, #24]
 8005368:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800536a:	681a      	ldr	r2, [r3, #0]
 800536c:	ea40 0301 	orr.w	r3, r0, r1
 8005370:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005372:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005374:	681a      	ldr	r2, [r3, #0]
 8005376:	4bc5      	ldr	r3, [pc, #788]	; (800568c <UART_SetConfig+0x384>)
 8005378:	429a      	cmp	r2, r3
 800537a:	d004      	beq.n	8005386 <UART_SetConfig+0x7e>
 800537c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800537e:	681a      	ldr	r2, [r3, #0]
 8005380:	4bc3      	ldr	r3, [pc, #780]	; (8005690 <UART_SetConfig+0x388>)
 8005382:	429a      	cmp	r2, r3
 8005384:	d103      	bne.n	800538e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005386:	f7fe f859 	bl	800343c <HAL_RCC_GetPCLK2Freq>
 800538a:	6778      	str	r0, [r7, #116]	; 0x74
 800538c:	e002      	b.n	8005394 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800538e:	f7fe f841 	bl	8003414 <HAL_RCC_GetPCLK1Freq>
 8005392:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005394:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005396:	69db      	ldr	r3, [r3, #28]
 8005398:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800539c:	f040 80b6 	bne.w	800550c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80053a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80053a2:	461c      	mov	r4, r3
 80053a4:	f04f 0500 	mov.w	r5, #0
 80053a8:	4622      	mov	r2, r4
 80053aa:	462b      	mov	r3, r5
 80053ac:	1891      	adds	r1, r2, r2
 80053ae:	6439      	str	r1, [r7, #64]	; 0x40
 80053b0:	415b      	adcs	r3, r3
 80053b2:	647b      	str	r3, [r7, #68]	; 0x44
 80053b4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80053b8:	1912      	adds	r2, r2, r4
 80053ba:	eb45 0303 	adc.w	r3, r5, r3
 80053be:	f04f 0000 	mov.w	r0, #0
 80053c2:	f04f 0100 	mov.w	r1, #0
 80053c6:	00d9      	lsls	r1, r3, #3
 80053c8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80053cc:	00d0      	lsls	r0, r2, #3
 80053ce:	4602      	mov	r2, r0
 80053d0:	460b      	mov	r3, r1
 80053d2:	1911      	adds	r1, r2, r4
 80053d4:	6639      	str	r1, [r7, #96]	; 0x60
 80053d6:	416b      	adcs	r3, r5
 80053d8:	667b      	str	r3, [r7, #100]	; 0x64
 80053da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	461a      	mov	r2, r3
 80053e0:	f04f 0300 	mov.w	r3, #0
 80053e4:	1891      	adds	r1, r2, r2
 80053e6:	63b9      	str	r1, [r7, #56]	; 0x38
 80053e8:	415b      	adcs	r3, r3
 80053ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80053f0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80053f4:	f7fb fb42 	bl	8000a7c <__aeabi_uldivmod>
 80053f8:	4602      	mov	r2, r0
 80053fa:	460b      	mov	r3, r1
 80053fc:	4ba5      	ldr	r3, [pc, #660]	; (8005694 <UART_SetConfig+0x38c>)
 80053fe:	fba3 2302 	umull	r2, r3, r3, r2
 8005402:	095b      	lsrs	r3, r3, #5
 8005404:	011e      	lsls	r6, r3, #4
 8005406:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005408:	461c      	mov	r4, r3
 800540a:	f04f 0500 	mov.w	r5, #0
 800540e:	4622      	mov	r2, r4
 8005410:	462b      	mov	r3, r5
 8005412:	1891      	adds	r1, r2, r2
 8005414:	6339      	str	r1, [r7, #48]	; 0x30
 8005416:	415b      	adcs	r3, r3
 8005418:	637b      	str	r3, [r7, #52]	; 0x34
 800541a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800541e:	1912      	adds	r2, r2, r4
 8005420:	eb45 0303 	adc.w	r3, r5, r3
 8005424:	f04f 0000 	mov.w	r0, #0
 8005428:	f04f 0100 	mov.w	r1, #0
 800542c:	00d9      	lsls	r1, r3, #3
 800542e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005432:	00d0      	lsls	r0, r2, #3
 8005434:	4602      	mov	r2, r0
 8005436:	460b      	mov	r3, r1
 8005438:	1911      	adds	r1, r2, r4
 800543a:	65b9      	str	r1, [r7, #88]	; 0x58
 800543c:	416b      	adcs	r3, r5
 800543e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005440:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	461a      	mov	r2, r3
 8005446:	f04f 0300 	mov.w	r3, #0
 800544a:	1891      	adds	r1, r2, r2
 800544c:	62b9      	str	r1, [r7, #40]	; 0x28
 800544e:	415b      	adcs	r3, r3
 8005450:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005452:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005456:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800545a:	f7fb fb0f 	bl	8000a7c <__aeabi_uldivmod>
 800545e:	4602      	mov	r2, r0
 8005460:	460b      	mov	r3, r1
 8005462:	4b8c      	ldr	r3, [pc, #560]	; (8005694 <UART_SetConfig+0x38c>)
 8005464:	fba3 1302 	umull	r1, r3, r3, r2
 8005468:	095b      	lsrs	r3, r3, #5
 800546a:	2164      	movs	r1, #100	; 0x64
 800546c:	fb01 f303 	mul.w	r3, r1, r3
 8005470:	1ad3      	subs	r3, r2, r3
 8005472:	00db      	lsls	r3, r3, #3
 8005474:	3332      	adds	r3, #50	; 0x32
 8005476:	4a87      	ldr	r2, [pc, #540]	; (8005694 <UART_SetConfig+0x38c>)
 8005478:	fba2 2303 	umull	r2, r3, r2, r3
 800547c:	095b      	lsrs	r3, r3, #5
 800547e:	005b      	lsls	r3, r3, #1
 8005480:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005484:	441e      	add	r6, r3
 8005486:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005488:	4618      	mov	r0, r3
 800548a:	f04f 0100 	mov.w	r1, #0
 800548e:	4602      	mov	r2, r0
 8005490:	460b      	mov	r3, r1
 8005492:	1894      	adds	r4, r2, r2
 8005494:	623c      	str	r4, [r7, #32]
 8005496:	415b      	adcs	r3, r3
 8005498:	627b      	str	r3, [r7, #36]	; 0x24
 800549a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800549e:	1812      	adds	r2, r2, r0
 80054a0:	eb41 0303 	adc.w	r3, r1, r3
 80054a4:	f04f 0400 	mov.w	r4, #0
 80054a8:	f04f 0500 	mov.w	r5, #0
 80054ac:	00dd      	lsls	r5, r3, #3
 80054ae:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80054b2:	00d4      	lsls	r4, r2, #3
 80054b4:	4622      	mov	r2, r4
 80054b6:	462b      	mov	r3, r5
 80054b8:	1814      	adds	r4, r2, r0
 80054ba:	653c      	str	r4, [r7, #80]	; 0x50
 80054bc:	414b      	adcs	r3, r1
 80054be:	657b      	str	r3, [r7, #84]	; 0x54
 80054c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	461a      	mov	r2, r3
 80054c6:	f04f 0300 	mov.w	r3, #0
 80054ca:	1891      	adds	r1, r2, r2
 80054cc:	61b9      	str	r1, [r7, #24]
 80054ce:	415b      	adcs	r3, r3
 80054d0:	61fb      	str	r3, [r7, #28]
 80054d2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80054d6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80054da:	f7fb facf 	bl	8000a7c <__aeabi_uldivmod>
 80054de:	4602      	mov	r2, r0
 80054e0:	460b      	mov	r3, r1
 80054e2:	4b6c      	ldr	r3, [pc, #432]	; (8005694 <UART_SetConfig+0x38c>)
 80054e4:	fba3 1302 	umull	r1, r3, r3, r2
 80054e8:	095b      	lsrs	r3, r3, #5
 80054ea:	2164      	movs	r1, #100	; 0x64
 80054ec:	fb01 f303 	mul.w	r3, r1, r3
 80054f0:	1ad3      	subs	r3, r2, r3
 80054f2:	00db      	lsls	r3, r3, #3
 80054f4:	3332      	adds	r3, #50	; 0x32
 80054f6:	4a67      	ldr	r2, [pc, #412]	; (8005694 <UART_SetConfig+0x38c>)
 80054f8:	fba2 2303 	umull	r2, r3, r2, r3
 80054fc:	095b      	lsrs	r3, r3, #5
 80054fe:	f003 0207 	and.w	r2, r3, #7
 8005502:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4432      	add	r2, r6
 8005508:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800550a:	e0b9      	b.n	8005680 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800550c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800550e:	461c      	mov	r4, r3
 8005510:	f04f 0500 	mov.w	r5, #0
 8005514:	4622      	mov	r2, r4
 8005516:	462b      	mov	r3, r5
 8005518:	1891      	adds	r1, r2, r2
 800551a:	6139      	str	r1, [r7, #16]
 800551c:	415b      	adcs	r3, r3
 800551e:	617b      	str	r3, [r7, #20]
 8005520:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005524:	1912      	adds	r2, r2, r4
 8005526:	eb45 0303 	adc.w	r3, r5, r3
 800552a:	f04f 0000 	mov.w	r0, #0
 800552e:	f04f 0100 	mov.w	r1, #0
 8005532:	00d9      	lsls	r1, r3, #3
 8005534:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005538:	00d0      	lsls	r0, r2, #3
 800553a:	4602      	mov	r2, r0
 800553c:	460b      	mov	r3, r1
 800553e:	eb12 0804 	adds.w	r8, r2, r4
 8005542:	eb43 0905 	adc.w	r9, r3, r5
 8005546:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	4618      	mov	r0, r3
 800554c:	f04f 0100 	mov.w	r1, #0
 8005550:	f04f 0200 	mov.w	r2, #0
 8005554:	f04f 0300 	mov.w	r3, #0
 8005558:	008b      	lsls	r3, r1, #2
 800555a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800555e:	0082      	lsls	r2, r0, #2
 8005560:	4640      	mov	r0, r8
 8005562:	4649      	mov	r1, r9
 8005564:	f7fb fa8a 	bl	8000a7c <__aeabi_uldivmod>
 8005568:	4602      	mov	r2, r0
 800556a:	460b      	mov	r3, r1
 800556c:	4b49      	ldr	r3, [pc, #292]	; (8005694 <UART_SetConfig+0x38c>)
 800556e:	fba3 2302 	umull	r2, r3, r3, r2
 8005572:	095b      	lsrs	r3, r3, #5
 8005574:	011e      	lsls	r6, r3, #4
 8005576:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005578:	4618      	mov	r0, r3
 800557a:	f04f 0100 	mov.w	r1, #0
 800557e:	4602      	mov	r2, r0
 8005580:	460b      	mov	r3, r1
 8005582:	1894      	adds	r4, r2, r2
 8005584:	60bc      	str	r4, [r7, #8]
 8005586:	415b      	adcs	r3, r3
 8005588:	60fb      	str	r3, [r7, #12]
 800558a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800558e:	1812      	adds	r2, r2, r0
 8005590:	eb41 0303 	adc.w	r3, r1, r3
 8005594:	f04f 0400 	mov.w	r4, #0
 8005598:	f04f 0500 	mov.w	r5, #0
 800559c:	00dd      	lsls	r5, r3, #3
 800559e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80055a2:	00d4      	lsls	r4, r2, #3
 80055a4:	4622      	mov	r2, r4
 80055a6:	462b      	mov	r3, r5
 80055a8:	1814      	adds	r4, r2, r0
 80055aa:	64bc      	str	r4, [r7, #72]	; 0x48
 80055ac:	414b      	adcs	r3, r1
 80055ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	4618      	mov	r0, r3
 80055b6:	f04f 0100 	mov.w	r1, #0
 80055ba:	f04f 0200 	mov.w	r2, #0
 80055be:	f04f 0300 	mov.w	r3, #0
 80055c2:	008b      	lsls	r3, r1, #2
 80055c4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80055c8:	0082      	lsls	r2, r0, #2
 80055ca:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80055ce:	f7fb fa55 	bl	8000a7c <__aeabi_uldivmod>
 80055d2:	4602      	mov	r2, r0
 80055d4:	460b      	mov	r3, r1
 80055d6:	4b2f      	ldr	r3, [pc, #188]	; (8005694 <UART_SetConfig+0x38c>)
 80055d8:	fba3 1302 	umull	r1, r3, r3, r2
 80055dc:	095b      	lsrs	r3, r3, #5
 80055de:	2164      	movs	r1, #100	; 0x64
 80055e0:	fb01 f303 	mul.w	r3, r1, r3
 80055e4:	1ad3      	subs	r3, r2, r3
 80055e6:	011b      	lsls	r3, r3, #4
 80055e8:	3332      	adds	r3, #50	; 0x32
 80055ea:	4a2a      	ldr	r2, [pc, #168]	; (8005694 <UART_SetConfig+0x38c>)
 80055ec:	fba2 2303 	umull	r2, r3, r2, r3
 80055f0:	095b      	lsrs	r3, r3, #5
 80055f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80055f6:	441e      	add	r6, r3
 80055f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80055fa:	4618      	mov	r0, r3
 80055fc:	f04f 0100 	mov.w	r1, #0
 8005600:	4602      	mov	r2, r0
 8005602:	460b      	mov	r3, r1
 8005604:	1894      	adds	r4, r2, r2
 8005606:	603c      	str	r4, [r7, #0]
 8005608:	415b      	adcs	r3, r3
 800560a:	607b      	str	r3, [r7, #4]
 800560c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005610:	1812      	adds	r2, r2, r0
 8005612:	eb41 0303 	adc.w	r3, r1, r3
 8005616:	f04f 0400 	mov.w	r4, #0
 800561a:	f04f 0500 	mov.w	r5, #0
 800561e:	00dd      	lsls	r5, r3, #3
 8005620:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005624:	00d4      	lsls	r4, r2, #3
 8005626:	4622      	mov	r2, r4
 8005628:	462b      	mov	r3, r5
 800562a:	eb12 0a00 	adds.w	sl, r2, r0
 800562e:	eb43 0b01 	adc.w	fp, r3, r1
 8005632:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	4618      	mov	r0, r3
 8005638:	f04f 0100 	mov.w	r1, #0
 800563c:	f04f 0200 	mov.w	r2, #0
 8005640:	f04f 0300 	mov.w	r3, #0
 8005644:	008b      	lsls	r3, r1, #2
 8005646:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800564a:	0082      	lsls	r2, r0, #2
 800564c:	4650      	mov	r0, sl
 800564e:	4659      	mov	r1, fp
 8005650:	f7fb fa14 	bl	8000a7c <__aeabi_uldivmod>
 8005654:	4602      	mov	r2, r0
 8005656:	460b      	mov	r3, r1
 8005658:	4b0e      	ldr	r3, [pc, #56]	; (8005694 <UART_SetConfig+0x38c>)
 800565a:	fba3 1302 	umull	r1, r3, r3, r2
 800565e:	095b      	lsrs	r3, r3, #5
 8005660:	2164      	movs	r1, #100	; 0x64
 8005662:	fb01 f303 	mul.w	r3, r1, r3
 8005666:	1ad3      	subs	r3, r2, r3
 8005668:	011b      	lsls	r3, r3, #4
 800566a:	3332      	adds	r3, #50	; 0x32
 800566c:	4a09      	ldr	r2, [pc, #36]	; (8005694 <UART_SetConfig+0x38c>)
 800566e:	fba2 2303 	umull	r2, r3, r2, r3
 8005672:	095b      	lsrs	r3, r3, #5
 8005674:	f003 020f 	and.w	r2, r3, #15
 8005678:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4432      	add	r2, r6
 800567e:	609a      	str	r2, [r3, #8]
}
 8005680:	bf00      	nop
 8005682:	377c      	adds	r7, #124	; 0x7c
 8005684:	46bd      	mov	sp, r7
 8005686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800568a:	bf00      	nop
 800568c:	40011000 	.word	0x40011000
 8005690:	40011400 	.word	0x40011400
 8005694:	51eb851f 	.word	0x51eb851f

08005698 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8005698:	b084      	sub	sp, #16
 800569a:	b480      	push	{r7}
 800569c:	b085      	sub	sp, #20
 800569e:	af00      	add	r7, sp, #0
 80056a0:	6078      	str	r0, [r7, #4]
 80056a2:	f107 001c 	add.w	r0, r7, #28
 80056a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80056aa:	2300      	movs	r3, #0
 80056ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80056ae:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80056b0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80056b2:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80056b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80056b6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80056b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80056ba:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80056bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80056be:	431a      	orrs	r2, r3
             Init.ClockDiv
 80056c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80056c2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80056c4:	68fa      	ldr	r2, [r7, #12]
 80056c6:	4313      	orrs	r3, r2
 80056c8:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 80056d2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80056d6:	68fa      	ldr	r2, [r7, #12]
 80056d8:	431a      	orrs	r2, r3
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80056de:	2300      	movs	r3, #0
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	3714      	adds	r7, #20
 80056e4:	46bd      	mov	sp, r7
 80056e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ea:	b004      	add	sp, #16
 80056ec:	4770      	bx	lr

080056ee <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 80056ee:	b480      	push	{r7}
 80056f0:	b083      	sub	sp, #12
 80056f2:	af00      	add	r7, sp, #0
 80056f4:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	370c      	adds	r7, #12
 8005700:	46bd      	mov	sp, r7
 8005702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005706:	4770      	bx	lr

08005708 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8005708:	b480      	push	{r7}
 800570a:	b083      	sub	sp, #12
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
 8005710:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	681a      	ldr	r2, [r3, #0]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800571c:	2300      	movs	r3, #0
}
 800571e:	4618      	mov	r0, r3
 8005720:	370c      	adds	r7, #12
 8005722:	46bd      	mov	sp, r7
 8005724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005728:	4770      	bx	lr

0800572a <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800572a:	b580      	push	{r7, lr}
 800572c:	b082      	sub	sp, #8
 800572e:	af00      	add	r7, sp, #0
 8005730:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2203      	movs	r2, #3
 8005736:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8005738:	2002      	movs	r0, #2
 800573a:	f7fc fbc7 	bl	8001ecc <HAL_Delay>
  
  return HAL_OK;
 800573e:	2300      	movs	r3, #0
}
 8005740:	4618      	mov	r0, r3
 8005742:	3708      	adds	r7, #8
 8005744:	46bd      	mov	sp, r7
 8005746:	bd80      	pop	{r7, pc}

08005748 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8005748:	b480      	push	{r7}
 800574a:	b083      	sub	sp, #12
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f003 0303 	and.w	r3, r3, #3
}
 8005758:	4618      	mov	r0, r3
 800575a:	370c      	adds	r7, #12
 800575c:	46bd      	mov	sp, r7
 800575e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005762:	4770      	bx	lr

08005764 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8005764:	b480      	push	{r7}
 8005766:	b085      	sub	sp, #20
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
 800576c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800576e:	2300      	movs	r3, #0
 8005770:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	681a      	ldr	r2, [r3, #0]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005782:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8005788:	431a      	orrs	r2, r3
                       Command->CPSM);
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800578e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005790:	68fa      	ldr	r2, [r7, #12]
 8005792:	4313      	orrs	r3, r2
 8005794:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	68db      	ldr	r3, [r3, #12]
 800579a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800579e:	f023 030f 	bic.w	r3, r3, #15
 80057a2:	68fa      	ldr	r2, [r7, #12]
 80057a4:	431a      	orrs	r2, r3
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80057aa:	2300      	movs	r3, #0
}
 80057ac:	4618      	mov	r0, r3
 80057ae:	3714      	adds	r7, #20
 80057b0:	46bd      	mov	sp, r7
 80057b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b6:	4770      	bx	lr

080057b8 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b083      	sub	sp, #12
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	691b      	ldr	r3, [r3, #16]
 80057c4:	b2db      	uxtb	r3, r3
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	370c      	adds	r7, #12
 80057ca:	46bd      	mov	sp, r7
 80057cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d0:	4770      	bx	lr

080057d2 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80057d2:	b480      	push	{r7}
 80057d4:	b085      	sub	sp, #20
 80057d6:	af00      	add	r7, sp, #0
 80057d8:	6078      	str	r0, [r7, #4]
 80057da:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	3314      	adds	r3, #20
 80057e0:	461a      	mov	r2, r3
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	4413      	add	r3, r2
 80057e6:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
}  
 80057ec:	4618      	mov	r0, r3
 80057ee:	3714      	adds	r7, #20
 80057f0:	46bd      	mov	sp, r7
 80057f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f6:	4770      	bx	lr

080057f8 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b085      	sub	sp, #20
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
 8005800:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005802:	2300      	movs	r3, #0
 8005804:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	681a      	ldr	r2, [r3, #0]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	685a      	ldr	r2, [r3, #4]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800581e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8005824:	431a      	orrs	r2, r3
                       Data->DPSM);
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800582a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800582c:	68fa      	ldr	r2, [r7, #12]
 800582e:	4313      	orrs	r3, r2
 8005830:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005836:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	431a      	orrs	r2, r3
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8005842:	2300      	movs	r3, #0

}
 8005844:	4618      	mov	r0, r3
 8005846:	3714      	adds	r7, #20
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr

08005850 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b088      	sub	sp, #32
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
 8005858:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800585e:	2310      	movs	r3, #16
 8005860:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005862:	2340      	movs	r3, #64	; 0x40
 8005864:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005866:	2300      	movs	r3, #0
 8005868:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800586a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800586e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005870:	f107 0308 	add.w	r3, r7, #8
 8005874:	4619      	mov	r1, r3
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f7ff ff74 	bl	8005764 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800587c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005880:	2110      	movs	r1, #16
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f000 fa44 	bl	8005d10 <SDMMC_GetCmdResp1>
 8005888:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800588a:	69fb      	ldr	r3, [r7, #28]
}
 800588c:	4618      	mov	r0, r3
 800588e:	3720      	adds	r7, #32
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}

08005894 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b088      	sub	sp, #32
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
 800589c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80058a2:	2311      	movs	r3, #17
 80058a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80058a6:	2340      	movs	r3, #64	; 0x40
 80058a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80058aa:	2300      	movs	r3, #0
 80058ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80058ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80058b2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80058b4:	f107 0308 	add.w	r3, r7, #8
 80058b8:	4619      	mov	r1, r3
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f7ff ff52 	bl	8005764 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80058c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80058c4:	2111      	movs	r1, #17
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f000 fa22 	bl	8005d10 <SDMMC_GetCmdResp1>
 80058cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80058ce:	69fb      	ldr	r3, [r7, #28]
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	3720      	adds	r7, #32
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bd80      	pop	{r7, pc}

080058d8 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b088      	sub	sp, #32
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
 80058e0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80058e6:	2312      	movs	r3, #18
 80058e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80058ea:	2340      	movs	r3, #64	; 0x40
 80058ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80058ee:	2300      	movs	r3, #0
 80058f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80058f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80058f6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80058f8:	f107 0308 	add.w	r3, r7, #8
 80058fc:	4619      	mov	r1, r3
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f7ff ff30 	bl	8005764 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8005904:	f241 3288 	movw	r2, #5000	; 0x1388
 8005908:	2112      	movs	r1, #18
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f000 fa00 	bl	8005d10 <SDMMC_GetCmdResp1>
 8005910:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005912:	69fb      	ldr	r3, [r7, #28]
}
 8005914:	4618      	mov	r0, r3
 8005916:	3720      	adds	r7, #32
 8005918:	46bd      	mov	sp, r7
 800591a:	bd80      	pop	{r7, pc}

0800591c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b088      	sub	sp, #32
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
 8005924:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800592a:	2318      	movs	r3, #24
 800592c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800592e:	2340      	movs	r3, #64	; 0x40
 8005930:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005932:	2300      	movs	r3, #0
 8005934:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005936:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800593a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800593c:	f107 0308 	add.w	r3, r7, #8
 8005940:	4619      	mov	r1, r3
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f7ff ff0e 	bl	8005764 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8005948:	f241 3288 	movw	r2, #5000	; 0x1388
 800594c:	2118      	movs	r1, #24
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f000 f9de 	bl	8005d10 <SDMMC_GetCmdResp1>
 8005954:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005956:	69fb      	ldr	r3, [r7, #28]
}
 8005958:	4618      	mov	r0, r3
 800595a:	3720      	adds	r7, #32
 800595c:	46bd      	mov	sp, r7
 800595e:	bd80      	pop	{r7, pc}

08005960 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b088      	sub	sp, #32
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
 8005968:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800596e:	2319      	movs	r3, #25
 8005970:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005972:	2340      	movs	r3, #64	; 0x40
 8005974:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005976:	2300      	movs	r3, #0
 8005978:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800597a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800597e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005980:	f107 0308 	add.w	r3, r7, #8
 8005984:	4619      	mov	r1, r3
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f7ff feec 	bl	8005764 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800598c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005990:	2119      	movs	r1, #25
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f000 f9bc 	bl	8005d10 <SDMMC_GetCmdResp1>
 8005998:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800599a:	69fb      	ldr	r3, [r7, #28]
}
 800599c:	4618      	mov	r0, r3
 800599e:	3720      	adds	r7, #32
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}

080059a4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b088      	sub	sp, #32
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80059ac:	2300      	movs	r3, #0
 80059ae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80059b0:	230c      	movs	r3, #12
 80059b2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80059b4:	2340      	movs	r3, #64	; 0x40
 80059b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80059b8:	2300      	movs	r3, #0
 80059ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80059bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80059c0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80059c2:	f107 0308 	add.w	r3, r7, #8
 80059c6:	4619      	mov	r1, r3
 80059c8:	6878      	ldr	r0, [r7, #4]
 80059ca:	f7ff fecb 	bl	8005764 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80059ce:	4a05      	ldr	r2, [pc, #20]	; (80059e4 <SDMMC_CmdStopTransfer+0x40>)
 80059d0:	210c      	movs	r1, #12
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f000 f99c 	bl	8005d10 <SDMMC_GetCmdResp1>
 80059d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80059da:	69fb      	ldr	r3, [r7, #28]
}
 80059dc:	4618      	mov	r0, r3
 80059de:	3720      	adds	r7, #32
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}
 80059e4:	05f5e100 	.word	0x05f5e100

080059e8 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b08a      	sub	sp, #40	; 0x28
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	60f8      	str	r0, [r7, #12]
 80059f0:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80059f8:	2307      	movs	r3, #7
 80059fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80059fc:	2340      	movs	r3, #64	; 0x40
 80059fe:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005a00:	2300      	movs	r3, #0
 8005a02:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005a04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a08:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005a0a:	f107 0310 	add.w	r3, r7, #16
 8005a0e:	4619      	mov	r1, r3
 8005a10:	68f8      	ldr	r0, [r7, #12]
 8005a12:	f7ff fea7 	bl	8005764 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8005a16:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a1a:	2107      	movs	r1, #7
 8005a1c:	68f8      	ldr	r0, [r7, #12]
 8005a1e:	f000 f977 	bl	8005d10 <SDMMC_GetCmdResp1>
 8005a22:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8005a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	3728      	adds	r7, #40	; 0x28
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}

08005a2e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8005a2e:	b580      	push	{r7, lr}
 8005a30:	b088      	sub	sp, #32
 8005a32:	af00      	add	r7, sp, #0
 8005a34:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8005a36:	2300      	movs	r3, #0
 8005a38:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005a42:	2300      	movs	r3, #0
 8005a44:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005a46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a4a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005a4c:	f107 0308 	add.w	r3, r7, #8
 8005a50:	4619      	mov	r1, r3
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f7ff fe86 	bl	8005764 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8005a58:	6878      	ldr	r0, [r7, #4]
 8005a5a:	f000 f92d 	bl	8005cb8 <SDMMC_GetCmdError>
 8005a5e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005a60:	69fb      	ldr	r3, [r7, #28]
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	3720      	adds	r7, #32
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd80      	pop	{r7, pc}

08005a6a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8005a6a:	b580      	push	{r7, lr}
 8005a6c:	b088      	sub	sp, #32
 8005a6e:	af00      	add	r7, sp, #0
 8005a70:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8005a72:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8005a76:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8005a78:	2308      	movs	r3, #8
 8005a7a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005a7c:	2340      	movs	r3, #64	; 0x40
 8005a7e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005a80:	2300      	movs	r3, #0
 8005a82:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005a84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a88:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005a8a:	f107 0308 	add.w	r3, r7, #8
 8005a8e:	4619      	mov	r1, r3
 8005a90:	6878      	ldr	r0, [r7, #4]
 8005a92:	f7ff fe67 	bl	8005764 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f000 fb24 	bl	80060e4 <SDMMC_GetCmdResp7>
 8005a9c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005a9e:	69fb      	ldr	r3, [r7, #28]
}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	3720      	adds	r7, #32
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bd80      	pop	{r7, pc}

08005aa8 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b088      	sub	sp, #32
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
 8005ab0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8005ab6:	2337      	movs	r3, #55	; 0x37
 8005ab8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005aba:	2340      	movs	r3, #64	; 0x40
 8005abc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005ac2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ac6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005ac8:	f107 0308 	add.w	r3, r7, #8
 8005acc:	4619      	mov	r1, r3
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	f7ff fe48 	bl	8005764 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8005ad4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ad8:	2137      	movs	r1, #55	; 0x37
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f000 f918 	bl	8005d10 <SDMMC_GetCmdResp1>
 8005ae0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005ae2:	69fb      	ldr	r3, [r7, #28]
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	3720      	adds	r7, #32
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	bd80      	pop	{r7, pc}

08005aec <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b088      	sub	sp, #32
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
 8005af4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005afc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b00:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8005b02:	2329      	movs	r3, #41	; 0x29
 8005b04:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005b06:	2340      	movs	r3, #64	; 0x40
 8005b08:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005b0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b12:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005b14:	f107 0308 	add.w	r3, r7, #8
 8005b18:	4619      	mov	r1, r3
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f7ff fe22 	bl	8005764 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8005b20:	6878      	ldr	r0, [r7, #4]
 8005b22:	f000 fa2b 	bl	8005f7c <SDMMC_GetCmdResp3>
 8005b26:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005b28:	69fb      	ldr	r3, [r7, #28]
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	3720      	adds	r7, #32
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}

08005b32 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8005b32:	b580      	push	{r7, lr}
 8005b34:	b088      	sub	sp, #32
 8005b36:	af00      	add	r7, sp, #0
 8005b38:	6078      	str	r0, [r7, #4]
 8005b3a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8005b40:	2306      	movs	r3, #6
 8005b42:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005b44:	2340      	movs	r3, #64	; 0x40
 8005b46:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005b48:	2300      	movs	r3, #0
 8005b4a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005b4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b50:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005b52:	f107 0308 	add.w	r3, r7, #8
 8005b56:	4619      	mov	r1, r3
 8005b58:	6878      	ldr	r0, [r7, #4]
 8005b5a:	f7ff fe03 	bl	8005764 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8005b5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b62:	2106      	movs	r1, #6
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f000 f8d3 	bl	8005d10 <SDMMC_GetCmdResp1>
 8005b6a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005b6c:	69fb      	ldr	r3, [r7, #28]
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3720      	adds	r7, #32
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}

08005b76 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8005b76:	b580      	push	{r7, lr}
 8005b78:	b088      	sub	sp, #32
 8005b7a:	af00      	add	r7, sp, #0
 8005b7c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8005b82:	2333      	movs	r3, #51	; 0x33
 8005b84:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005b86:	2340      	movs	r3, #64	; 0x40
 8005b88:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005b8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b92:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005b94:	f107 0308 	add.w	r3, r7, #8
 8005b98:	4619      	mov	r1, r3
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f7ff fde2 	bl	8005764 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8005ba0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ba4:	2133      	movs	r1, #51	; 0x33
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f000 f8b2 	bl	8005d10 <SDMMC_GetCmdResp1>
 8005bac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005bae:	69fb      	ldr	r3, [r7, #28]
}
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	3720      	adds	r7, #32
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	bd80      	pop	{r7, pc}

08005bb8 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b088      	sub	sp, #32
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8005bc4:	2302      	movs	r3, #2
 8005bc6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8005bc8:	23c0      	movs	r3, #192	; 0xc0
 8005bca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005bcc:	2300      	movs	r3, #0
 8005bce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005bd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005bd4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005bd6:	f107 0308 	add.w	r3, r7, #8
 8005bda:	4619      	mov	r1, r3
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	f7ff fdc1 	bl	8005764 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f000 f982 	bl	8005eec <SDMMC_GetCmdResp2>
 8005be8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005bea:	69fb      	ldr	r3, [r7, #28]
}
 8005bec:	4618      	mov	r0, r3
 8005bee:	3720      	adds	r7, #32
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bd80      	pop	{r7, pc}

08005bf4 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b088      	sub	sp, #32
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
 8005bfc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8005c02:	2309      	movs	r3, #9
 8005c04:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8005c06:	23c0      	movs	r3, #192	; 0xc0
 8005c08:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005c0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005c12:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005c14:	f107 0308 	add.w	r3, r7, #8
 8005c18:	4619      	mov	r1, r3
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f7ff fda2 	bl	8005764 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	f000 f963 	bl	8005eec <SDMMC_GetCmdResp2>
 8005c26:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005c28:	69fb      	ldr	r3, [r7, #28]
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3720      	adds	r7, #32
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}

08005c32 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8005c32:	b580      	push	{r7, lr}
 8005c34:	b088      	sub	sp, #32
 8005c36:	af00      	add	r7, sp, #0
 8005c38:	6078      	str	r0, [r7, #4]
 8005c3a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8005c40:	2303      	movs	r3, #3
 8005c42:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005c44:	2340      	movs	r3, #64	; 0x40
 8005c46:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005c48:	2300      	movs	r3, #0
 8005c4a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005c4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005c50:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005c52:	f107 0308 	add.w	r3, r7, #8
 8005c56:	4619      	mov	r1, r3
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	f7ff fd83 	bl	8005764 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8005c5e:	683a      	ldr	r2, [r7, #0]
 8005c60:	2103      	movs	r1, #3
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f000 f9c8 	bl	8005ff8 <SDMMC_GetCmdResp6>
 8005c68:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005c6a:	69fb      	ldr	r3, [r7, #28]
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	3720      	adds	r7, #32
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}

08005c74 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b088      	sub	sp, #32
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
 8005c7c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8005c82:	230d      	movs	r3, #13
 8005c84:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005c86:	2340      	movs	r3, #64	; 0x40
 8005c88:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005c8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005c92:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005c94:	f107 0308 	add.w	r3, r7, #8
 8005c98:	4619      	mov	r1, r3
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f7ff fd62 	bl	8005764 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8005ca0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ca4:	210d      	movs	r1, #13
 8005ca6:	6878      	ldr	r0, [r7, #4]
 8005ca8:	f000 f832 	bl	8005d10 <SDMMC_GetCmdResp1>
 8005cac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005cae:	69fb      	ldr	r3, [r7, #28]
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	3720      	adds	r7, #32
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bd80      	pop	{r7, pc}

08005cb8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b085      	sub	sp, #20
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005cc0:	4b11      	ldr	r3, [pc, #68]	; (8005d08 <SDMMC_GetCmdError+0x50>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a11      	ldr	r2, [pc, #68]	; (8005d0c <SDMMC_GetCmdError+0x54>)
 8005cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8005cca:	0a5b      	lsrs	r3, r3, #9
 8005ccc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cd0:	fb02 f303 	mul.w	r3, r2, r3
 8005cd4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	1e5a      	subs	r2, r3, #1
 8005cda:	60fa      	str	r2, [r7, #12]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d102      	bne.n	8005ce6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005ce0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005ce4:	e009      	b.n	8005cfa <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d0f1      	beq.n	8005cd6 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	22c5      	movs	r2, #197	; 0xc5
 8005cf6:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8005cf8:	2300      	movs	r3, #0
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3714      	adds	r7, #20
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d04:	4770      	bx	lr
 8005d06:	bf00      	nop
 8005d08:	20000004 	.word	0x20000004
 8005d0c:	10624dd3 	.word	0x10624dd3

08005d10 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b088      	sub	sp, #32
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	60f8      	str	r0, [r7, #12]
 8005d18:	460b      	mov	r3, r1
 8005d1a:	607a      	str	r2, [r7, #4]
 8005d1c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8005d1e:	4b70      	ldr	r3, [pc, #448]	; (8005ee0 <SDMMC_GetCmdResp1+0x1d0>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a70      	ldr	r2, [pc, #448]	; (8005ee4 <SDMMC_GetCmdResp1+0x1d4>)
 8005d24:	fba2 2303 	umull	r2, r3, r2, r3
 8005d28:	0a5a      	lsrs	r2, r3, #9
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	fb02 f303 	mul.w	r3, r2, r3
 8005d30:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8005d32:	69fb      	ldr	r3, [r7, #28]
 8005d34:	1e5a      	subs	r2, r3, #1
 8005d36:	61fa      	str	r2, [r7, #28]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d102      	bne.n	8005d42 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005d3c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005d40:	e0c9      	b.n	8005ed6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d46:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005d48:	69bb      	ldr	r3, [r7, #24]
 8005d4a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d0ef      	beq.n	8005d32 <SDMMC_GetCmdResp1+0x22>
 8005d52:	69bb      	ldr	r3, [r7, #24]
 8005d54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d1ea      	bne.n	8005d32 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d60:	f003 0304 	and.w	r3, r3, #4
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d004      	beq.n	8005d72 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	2204      	movs	r2, #4
 8005d6c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005d6e:	2304      	movs	r3, #4
 8005d70:	e0b1      	b.n	8005ed6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d76:	f003 0301 	and.w	r3, r3, #1
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d004      	beq.n	8005d88 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	2201      	movs	r2, #1
 8005d82:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005d84:	2301      	movs	r3, #1
 8005d86:	e0a6      	b.n	8005ed6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	22c5      	movs	r2, #197	; 0xc5
 8005d8c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8005d8e:	68f8      	ldr	r0, [r7, #12]
 8005d90:	f7ff fd12 	bl	80057b8 <SDIO_GetCommandResponse>
 8005d94:	4603      	mov	r3, r0
 8005d96:	461a      	mov	r2, r3
 8005d98:	7afb      	ldrb	r3, [r7, #11]
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d001      	beq.n	8005da2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005d9e:	2301      	movs	r3, #1
 8005da0:	e099      	b.n	8005ed6 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8005da2:	2100      	movs	r1, #0
 8005da4:	68f8      	ldr	r0, [r7, #12]
 8005da6:	f7ff fd14 	bl	80057d2 <SDIO_GetResponse>
 8005daa:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8005dac:	697a      	ldr	r2, [r7, #20]
 8005dae:	4b4e      	ldr	r3, [pc, #312]	; (8005ee8 <SDMMC_GetCmdResp1+0x1d8>)
 8005db0:	4013      	ands	r3, r2
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d101      	bne.n	8005dba <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8005db6:	2300      	movs	r3, #0
 8005db8:	e08d      	b.n	8005ed6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	da02      	bge.n	8005dc6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8005dc0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005dc4:	e087      	b.n	8005ed6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d001      	beq.n	8005dd4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8005dd0:	2340      	movs	r3, #64	; 0x40
 8005dd2:	e080      	b.n	8005ed6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d001      	beq.n	8005de2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8005dde:	2380      	movs	r3, #128	; 0x80
 8005de0:	e079      	b.n	8005ed6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d002      	beq.n	8005df2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8005dec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005df0:	e071      	b.n	8005ed6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8005df2:	697b      	ldr	r3, [r7, #20]
 8005df4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d002      	beq.n	8005e02 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8005dfc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e00:	e069      	b.n	8005ed6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d002      	beq.n	8005e12 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8005e0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e10:	e061      	b.n	8005ed6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d002      	beq.n	8005e22 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8005e1c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005e20:	e059      	b.n	8005ed6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d002      	beq.n	8005e32 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005e2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005e30:	e051      	b.n	8005ed6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d002      	beq.n	8005e42 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005e3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005e40:	e049      	b.n	8005ed6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d002      	beq.n	8005e52 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8005e4c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005e50:	e041      	b.n	8005ed6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d002      	beq.n	8005e62 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8005e5c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e60:	e039      	b.n	8005ed6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d002      	beq.n	8005e72 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8005e6c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005e70:	e031      	b.n	8005ed6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d002      	beq.n	8005e82 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8005e7c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005e80:	e029      	b.n	8005ed6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d002      	beq.n	8005e92 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8005e8c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005e90:	e021      	b.n	8005ed6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d002      	beq.n	8005ea2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8005e9c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005ea0:	e019      	b.n	8005ed6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d002      	beq.n	8005eb2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8005eac:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005eb0:	e011      	b.n	8005ed6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d002      	beq.n	8005ec2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8005ebc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005ec0:	e009      	b.n	8005ed6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	f003 0308 	and.w	r3, r3, #8
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d002      	beq.n	8005ed2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8005ecc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005ed0:	e001      	b.n	8005ed6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005ed2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	3720      	adds	r7, #32
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}
 8005ede:	bf00      	nop
 8005ee0:	20000004 	.word	0x20000004
 8005ee4:	10624dd3 	.word	0x10624dd3
 8005ee8:	fdffe008 	.word	0xfdffe008

08005eec <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8005eec:	b480      	push	{r7}
 8005eee:	b085      	sub	sp, #20
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005ef4:	4b1f      	ldr	r3, [pc, #124]	; (8005f74 <SDMMC_GetCmdResp2+0x88>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a1f      	ldr	r2, [pc, #124]	; (8005f78 <SDMMC_GetCmdResp2+0x8c>)
 8005efa:	fba2 2303 	umull	r2, r3, r2, r3
 8005efe:	0a5b      	lsrs	r3, r3, #9
 8005f00:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f04:	fb02 f303 	mul.w	r3, r2, r3
 8005f08:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	1e5a      	subs	r2, r3, #1
 8005f0e:	60fa      	str	r2, [r7, #12]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d102      	bne.n	8005f1a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005f14:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005f18:	e026      	b.n	8005f68 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f1e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d0ef      	beq.n	8005f0a <SDMMC_GetCmdResp2+0x1e>
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d1ea      	bne.n	8005f0a <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f38:	f003 0304 	and.w	r3, r3, #4
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d004      	beq.n	8005f4a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2204      	movs	r2, #4
 8005f44:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005f46:	2304      	movs	r3, #4
 8005f48:	e00e      	b.n	8005f68 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f4e:	f003 0301 	and.w	r3, r3, #1
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d004      	beq.n	8005f60 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2201      	movs	r2, #1
 8005f5a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	e003      	b.n	8005f68 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	22c5      	movs	r2, #197	; 0xc5
 8005f64:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8005f66:	2300      	movs	r3, #0
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	3714      	adds	r7, #20
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr
 8005f74:	20000004 	.word	0x20000004
 8005f78:	10624dd3 	.word	0x10624dd3

08005f7c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b085      	sub	sp, #20
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005f84:	4b1a      	ldr	r3, [pc, #104]	; (8005ff0 <SDMMC_GetCmdResp3+0x74>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a1a      	ldr	r2, [pc, #104]	; (8005ff4 <SDMMC_GetCmdResp3+0x78>)
 8005f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8005f8e:	0a5b      	lsrs	r3, r3, #9
 8005f90:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f94:	fb02 f303 	mul.w	r3, r2, r3
 8005f98:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	1e5a      	subs	r2, r3, #1
 8005f9e:	60fa      	str	r2, [r7, #12]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d102      	bne.n	8005faa <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005fa4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005fa8:	e01b      	b.n	8005fe2 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fae:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d0ef      	beq.n	8005f9a <SDMMC_GetCmdResp3+0x1e>
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d1ea      	bne.n	8005f9a <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fc8:	f003 0304 	and.w	r3, r3, #4
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d004      	beq.n	8005fda <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2204      	movs	r2, #4
 8005fd4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005fd6:	2304      	movs	r3, #4
 8005fd8:	e003      	b.n	8005fe2 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	22c5      	movs	r2, #197	; 0xc5
 8005fde:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005fe0:	2300      	movs	r3, #0
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	3714      	adds	r7, #20
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fec:	4770      	bx	lr
 8005fee:	bf00      	nop
 8005ff0:	20000004 	.word	0x20000004
 8005ff4:	10624dd3 	.word	0x10624dd3

08005ff8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b088      	sub	sp, #32
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	60f8      	str	r0, [r7, #12]
 8006000:	460b      	mov	r3, r1
 8006002:	607a      	str	r2, [r7, #4]
 8006004:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006006:	4b35      	ldr	r3, [pc, #212]	; (80060dc <SDMMC_GetCmdResp6+0xe4>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a35      	ldr	r2, [pc, #212]	; (80060e0 <SDMMC_GetCmdResp6+0xe8>)
 800600c:	fba2 2303 	umull	r2, r3, r2, r3
 8006010:	0a5b      	lsrs	r3, r3, #9
 8006012:	f241 3288 	movw	r2, #5000	; 0x1388
 8006016:	fb02 f303 	mul.w	r3, r2, r3
 800601a:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800601c:	69fb      	ldr	r3, [r7, #28]
 800601e:	1e5a      	subs	r2, r3, #1
 8006020:	61fa      	str	r2, [r7, #28]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d102      	bne.n	800602c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006026:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800602a:	e052      	b.n	80060d2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006030:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006032:	69bb      	ldr	r3, [r7, #24]
 8006034:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006038:	2b00      	cmp	r3, #0
 800603a:	d0ef      	beq.n	800601c <SDMMC_GetCmdResp6+0x24>
 800603c:	69bb      	ldr	r3, [r7, #24]
 800603e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006042:	2b00      	cmp	r3, #0
 8006044:	d1ea      	bne.n	800601c <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800604a:	f003 0304 	and.w	r3, r3, #4
 800604e:	2b00      	cmp	r3, #0
 8006050:	d004      	beq.n	800605c <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	2204      	movs	r2, #4
 8006056:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006058:	2304      	movs	r3, #4
 800605a:	e03a      	b.n	80060d2 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006060:	f003 0301 	and.w	r3, r3, #1
 8006064:	2b00      	cmp	r3, #0
 8006066:	d004      	beq.n	8006072 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	2201      	movs	r2, #1
 800606c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800606e:	2301      	movs	r3, #1
 8006070:	e02f      	b.n	80060d2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8006072:	68f8      	ldr	r0, [r7, #12]
 8006074:	f7ff fba0 	bl	80057b8 <SDIO_GetCommandResponse>
 8006078:	4603      	mov	r3, r0
 800607a:	461a      	mov	r2, r3
 800607c:	7afb      	ldrb	r3, [r7, #11]
 800607e:	4293      	cmp	r3, r2
 8006080:	d001      	beq.n	8006086 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006082:	2301      	movs	r3, #1
 8006084:	e025      	b.n	80060d2 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	22c5      	movs	r2, #197	; 0xc5
 800608a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800608c:	2100      	movs	r1, #0
 800608e:	68f8      	ldr	r0, [r7, #12]
 8006090:	f7ff fb9f 	bl	80057d2 <SDIO_GetResponse>
 8006094:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800609c:	2b00      	cmp	r3, #0
 800609e:	d106      	bne.n	80060ae <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	0c1b      	lsrs	r3, r3, #16
 80060a4:	b29a      	uxth	r2, r3
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80060aa:	2300      	movs	r3, #0
 80060ac:	e011      	b.n	80060d2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d002      	beq.n	80060be <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80060b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80060bc:	e009      	b.n	80060d2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d002      	beq.n	80060ce <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80060c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80060cc:	e001      	b.n	80060d2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80060ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	3720      	adds	r7, #32
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}
 80060da:	bf00      	nop
 80060dc:	20000004 	.word	0x20000004
 80060e0:	10624dd3 	.word	0x10624dd3

080060e4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80060e4:	b480      	push	{r7}
 80060e6:	b085      	sub	sp, #20
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80060ec:	4b22      	ldr	r3, [pc, #136]	; (8006178 <SDMMC_GetCmdResp7+0x94>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a22      	ldr	r2, [pc, #136]	; (800617c <SDMMC_GetCmdResp7+0x98>)
 80060f2:	fba2 2303 	umull	r2, r3, r2, r3
 80060f6:	0a5b      	lsrs	r3, r3, #9
 80060f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80060fc:	fb02 f303 	mul.w	r3, r2, r3
 8006100:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	1e5a      	subs	r2, r3, #1
 8006106:	60fa      	str	r2, [r7, #12]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d102      	bne.n	8006112 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800610c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006110:	e02c      	b.n	800616c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006116:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800611e:	2b00      	cmp	r3, #0
 8006120:	d0ef      	beq.n	8006102 <SDMMC_GetCmdResp7+0x1e>
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006128:	2b00      	cmp	r3, #0
 800612a:	d1ea      	bne.n	8006102 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006130:	f003 0304 	and.w	r3, r3, #4
 8006134:	2b00      	cmp	r3, #0
 8006136:	d004      	beq.n	8006142 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2204      	movs	r2, #4
 800613c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800613e:	2304      	movs	r3, #4
 8006140:	e014      	b.n	800616c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006146:	f003 0301 	and.w	r3, r3, #1
 800614a:	2b00      	cmp	r3, #0
 800614c:	d004      	beq.n	8006158 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2201      	movs	r2, #1
 8006152:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006154:	2301      	movs	r3, #1
 8006156:	e009      	b.n	800616c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800615c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006160:	2b00      	cmp	r3, #0
 8006162:	d002      	beq.n	800616a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2240      	movs	r2, #64	; 0x40
 8006168:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800616a:	2300      	movs	r3, #0
  
}
 800616c:	4618      	mov	r0, r3
 800616e:	3714      	adds	r7, #20
 8006170:	46bd      	mov	sp, r7
 8006172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006176:	4770      	bx	lr
 8006178:	20000004 	.word	0x20000004
 800617c:	10624dd3 	.word	0x10624dd3

08006180 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8006184:	4904      	ldr	r1, [pc, #16]	; (8006198 <MX_FATFS_Init+0x18>)
 8006186:	4805      	ldr	r0, [pc, #20]	; (800619c <MX_FATFS_Init+0x1c>)
 8006188:	f003 f89a 	bl	80092c0 <FATFS_LinkDriver>
 800618c:	4603      	mov	r3, r0
 800618e:	461a      	mov	r2, r3
 8006190:	4b03      	ldr	r3, [pc, #12]	; (80061a0 <MX_FATFS_Init+0x20>)
 8006192:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006194:	bf00      	nop
 8006196:	bd80      	pop	{r7, pc}
 8006198:	20002308 	.word	0x20002308
 800619c:	20000010 	.word	0x20000010
 80061a0:	2000230c 	.word	0x2000230c

080061a4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80061a4:	b480      	push	{r7}
 80061a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80061a8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	46bd      	mov	sp, r7
 80061ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b2:	4770      	bx	lr

080061b4 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b083      	sub	sp, #12
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	4603      	mov	r3, r0
 80061bc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 80061be:	4b06      	ldr	r3, [pc, #24]	; (80061d8 <USER_initialize+0x24>)
 80061c0:	2201      	movs	r2, #1
 80061c2:	701a      	strb	r2, [r3, #0]
    return Stat;
 80061c4:	4b04      	ldr	r3, [pc, #16]	; (80061d8 <USER_initialize+0x24>)
 80061c6:	781b      	ldrb	r3, [r3, #0]
 80061c8:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	370c      	adds	r7, #12
 80061ce:	46bd      	mov	sp, r7
 80061d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d4:	4770      	bx	lr
 80061d6:	bf00      	nop
 80061d8:	2000000d 	.word	0x2000000d

080061dc <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80061dc:	b480      	push	{r7}
 80061de:	b083      	sub	sp, #12
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	4603      	mov	r3, r0
 80061e4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 80061e6:	4b06      	ldr	r3, [pc, #24]	; (8006200 <USER_status+0x24>)
 80061e8:	2201      	movs	r2, #1
 80061ea:	701a      	strb	r2, [r3, #0]
    return Stat;
 80061ec:	4b04      	ldr	r3, [pc, #16]	; (8006200 <USER_status+0x24>)
 80061ee:	781b      	ldrb	r3, [r3, #0]
 80061f0:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	370c      	adds	r7, #12
 80061f6:	46bd      	mov	sp, r7
 80061f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fc:	4770      	bx	lr
 80061fe:	bf00      	nop
 8006200:	2000000d 	.word	0x2000000d

08006204 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8006204:	b480      	push	{r7}
 8006206:	b085      	sub	sp, #20
 8006208:	af00      	add	r7, sp, #0
 800620a:	60b9      	str	r1, [r7, #8]
 800620c:	607a      	str	r2, [r7, #4]
 800620e:	603b      	str	r3, [r7, #0]
 8006210:	4603      	mov	r3, r0
 8006212:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8006214:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 8006216:	4618      	mov	r0, r3
 8006218:	3714      	adds	r7, #20
 800621a:	46bd      	mov	sp, r7
 800621c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006220:	4770      	bx	lr

08006222 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8006222:	b480      	push	{r7}
 8006224:	b085      	sub	sp, #20
 8006226:	af00      	add	r7, sp, #0
 8006228:	60b9      	str	r1, [r7, #8]
 800622a:	607a      	str	r2, [r7, #4]
 800622c:	603b      	str	r3, [r7, #0]
 800622e:	4603      	mov	r3, r0
 8006230:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 8006232:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8006234:	4618      	mov	r0, r3
 8006236:	3714      	adds	r7, #20
 8006238:	46bd      	mov	sp, r7
 800623a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623e:	4770      	bx	lr

08006240 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8006240:	b480      	push	{r7}
 8006242:	b085      	sub	sp, #20
 8006244:	af00      	add	r7, sp, #0
 8006246:	4603      	mov	r3, r0
 8006248:	603a      	str	r2, [r7, #0]
 800624a:	71fb      	strb	r3, [r7, #7]
 800624c:	460b      	mov	r3, r1
 800624e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8006250:	2301      	movs	r3, #1
 8006252:	73fb      	strb	r3, [r7, #15]
    return res;
 8006254:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8006256:	4618      	mov	r0, r3
 8006258:	3714      	adds	r7, #20
 800625a:	46bd      	mov	sp, r7
 800625c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006260:	4770      	bx	lr
	...

08006264 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b084      	sub	sp, #16
 8006268:	af00      	add	r7, sp, #0
 800626a:	4603      	mov	r3, r0
 800626c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  stat = SD_Driver.disk_status();
 800626e:	4b05      	ldr	r3, [pc, #20]	; (8006284 <disk_status+0x20>)
 8006270:	685b      	ldr	r3, [r3, #4]
 8006272:	4798      	blx	r3
 8006274:	4603      	mov	r3, r0
 8006276:	73fb      	strb	r3, [r7, #15]
//  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
  return stat;
 8006278:	7bfb      	ldrb	r3, [r7, #15]
}
 800627a:	4618      	mov	r0, r3
 800627c:	3710      	adds	r7, #16
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}
 8006282:	bf00      	nop
 8006284:	0800a7d0 	.word	0x0800a7d0

08006288 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b084      	sub	sp, #16
 800628c:	af00      	add	r7, sp, #0
 800628e:	4603      	mov	r3, r0
 8006290:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8006292:	2300      	movs	r3, #0
 8006294:	73fb      	strb	r3, [r7, #15]
//  {
//    disk.is_initialized[pdrv] = 1;
//    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
//  }

  stat = SD_Driver.disk_initialize();
 8006296:	4b05      	ldr	r3, [pc, #20]	; (80062ac <disk_initialize+0x24>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4798      	blx	r3
 800629c:	4603      	mov	r3, r0
 800629e:	73fb      	strb	r3, [r7, #15]
  return stat;
 80062a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	3710      	adds	r7, #16
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}
 80062aa:	bf00      	nop
 80062ac:	0800a7d0 	.word	0x0800a7d0

080062b0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b086      	sub	sp, #24
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	60b9      	str	r1, [r7, #8]
 80062b8:	607a      	str	r2, [r7, #4]
 80062ba:	603b      	str	r3, [r7, #0]
 80062bc:	4603      	mov	r3, r0
 80062be:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = SD_Driver.disk_read(buff, sector, count);
 80062c0:	4b06      	ldr	r3, [pc, #24]	; (80062dc <disk_read+0x2c>)
 80062c2:	689b      	ldr	r3, [r3, #8]
 80062c4:	683a      	ldr	r2, [r7, #0]
 80062c6:	6879      	ldr	r1, [r7, #4]
 80062c8:	68b8      	ldr	r0, [r7, #8]
 80062ca:	4798      	blx	r3
 80062cc:	4603      	mov	r3, r0
 80062ce:	75fb      	strb	r3, [r7, #23]
//  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
  return res;
 80062d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80062d2:	4618      	mov	r0, r3
 80062d4:	3718      	adds	r7, #24
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bd80      	pop	{r7, pc}
 80062da:	bf00      	nop
 80062dc:	0800a7d0 	.word	0x0800a7d0

080062e0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b086      	sub	sp, #24
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	60b9      	str	r1, [r7, #8]
 80062e8:	607a      	str	r2, [r7, #4]
 80062ea:	603b      	str	r3, [r7, #0]
 80062ec:	4603      	mov	r3, r0
 80062ee:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = SD_Driver.disk_write(buff, sector, count);
 80062f0:	4b06      	ldr	r3, [pc, #24]	; (800630c <disk_write+0x2c>)
 80062f2:	68db      	ldr	r3, [r3, #12]
 80062f4:	683a      	ldr	r2, [r7, #0]
 80062f6:	6879      	ldr	r1, [r7, #4]
 80062f8:	68b8      	ldr	r0, [r7, #8]
 80062fa:	4798      	blx	r3
 80062fc:	4603      	mov	r3, r0
 80062fe:	75fb      	strb	r3, [r7, #23]
//  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
  return res;
 8006300:	7dfb      	ldrb	r3, [r7, #23]
}
 8006302:	4618      	mov	r0, r3
 8006304:	3718      	adds	r7, #24
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}
 800630a:	bf00      	nop
 800630c:	0800a7d0 	.word	0x0800a7d0

08006310 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b084      	sub	sp, #16
 8006314:	af00      	add	r7, sp, #0
 8006316:	4603      	mov	r3, r0
 8006318:	603a      	str	r2, [r7, #0]
 800631a:	71fb      	strb	r3, [r7, #7]
 800631c:	460b      	mov	r3, r1
 800631e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = SD_Driver.disk_ioctl(cmd, buff);
 8006320:	4b06      	ldr	r3, [pc, #24]	; (800633c <disk_ioctl+0x2c>)
 8006322:	691b      	ldr	r3, [r3, #16]
 8006324:	79ba      	ldrb	r2, [r7, #6]
 8006326:	6839      	ldr	r1, [r7, #0]
 8006328:	4610      	mov	r0, r2
 800632a:	4798      	blx	r3
 800632c:	4603      	mov	r3, r0
 800632e:	73fb      	strb	r3, [r7, #15]
//  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
  return res;
 8006330:	7bfb      	ldrb	r3, [r7, #15]
}
 8006332:	4618      	mov	r0, r3
 8006334:	3710      	adds	r7, #16
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}
 800633a:	bf00      	nop
 800633c:	0800a7d0 	.word	0x0800a7d0

08006340 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8006340:	b480      	push	{r7}
 8006342:	b085      	sub	sp, #20
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	3301      	adds	r3, #1
 800634c:	781b      	ldrb	r3, [r3, #0]
 800634e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8006350:	89fb      	ldrh	r3, [r7, #14]
 8006352:	021b      	lsls	r3, r3, #8
 8006354:	b21a      	sxth	r2, r3
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	781b      	ldrb	r3, [r3, #0]
 800635a:	b21b      	sxth	r3, r3
 800635c:	4313      	orrs	r3, r2
 800635e:	b21b      	sxth	r3, r3
 8006360:	81fb      	strh	r3, [r7, #14]
	return rv;
 8006362:	89fb      	ldrh	r3, [r7, #14]
}
 8006364:	4618      	mov	r0, r3
 8006366:	3714      	adds	r7, #20
 8006368:	46bd      	mov	sp, r7
 800636a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636e:	4770      	bx	lr

08006370 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8006370:	b480      	push	{r7}
 8006372:	b085      	sub	sp, #20
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	3303      	adds	r3, #3
 800637c:	781b      	ldrb	r3, [r3, #0]
 800637e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	021b      	lsls	r3, r3, #8
 8006384:	687a      	ldr	r2, [r7, #4]
 8006386:	3202      	adds	r2, #2
 8006388:	7812      	ldrb	r2, [r2, #0]
 800638a:	4313      	orrs	r3, r2
 800638c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	021b      	lsls	r3, r3, #8
 8006392:	687a      	ldr	r2, [r7, #4]
 8006394:	3201      	adds	r2, #1
 8006396:	7812      	ldrb	r2, [r2, #0]
 8006398:	4313      	orrs	r3, r2
 800639a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	021b      	lsls	r3, r3, #8
 80063a0:	687a      	ldr	r2, [r7, #4]
 80063a2:	7812      	ldrb	r2, [r2, #0]
 80063a4:	4313      	orrs	r3, r2
 80063a6:	60fb      	str	r3, [r7, #12]
	return rv;
 80063a8:	68fb      	ldr	r3, [r7, #12]
}
 80063aa:	4618      	mov	r0, r3
 80063ac:	3714      	adds	r7, #20
 80063ae:	46bd      	mov	sp, r7
 80063b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b4:	4770      	bx	lr

080063b6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80063b6:	b480      	push	{r7}
 80063b8:	b083      	sub	sp, #12
 80063ba:	af00      	add	r7, sp, #0
 80063bc:	6078      	str	r0, [r7, #4]
 80063be:	460b      	mov	r3, r1
 80063c0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	1c5a      	adds	r2, r3, #1
 80063c6:	607a      	str	r2, [r7, #4]
 80063c8:	887a      	ldrh	r2, [r7, #2]
 80063ca:	b2d2      	uxtb	r2, r2
 80063cc:	701a      	strb	r2, [r3, #0]
 80063ce:	887b      	ldrh	r3, [r7, #2]
 80063d0:	0a1b      	lsrs	r3, r3, #8
 80063d2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	1c5a      	adds	r2, r3, #1
 80063d8:	607a      	str	r2, [r7, #4]
 80063da:	887a      	ldrh	r2, [r7, #2]
 80063dc:	b2d2      	uxtb	r2, r2
 80063de:	701a      	strb	r2, [r3, #0]
}
 80063e0:	bf00      	nop
 80063e2:	370c      	adds	r7, #12
 80063e4:	46bd      	mov	sp, r7
 80063e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ea:	4770      	bx	lr

080063ec <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80063ec:	b480      	push	{r7}
 80063ee:	b083      	sub	sp, #12
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
 80063f4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	1c5a      	adds	r2, r3, #1
 80063fa:	607a      	str	r2, [r7, #4]
 80063fc:	683a      	ldr	r2, [r7, #0]
 80063fe:	b2d2      	uxtb	r2, r2
 8006400:	701a      	strb	r2, [r3, #0]
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	0a1b      	lsrs	r3, r3, #8
 8006406:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	1c5a      	adds	r2, r3, #1
 800640c:	607a      	str	r2, [r7, #4]
 800640e:	683a      	ldr	r2, [r7, #0]
 8006410:	b2d2      	uxtb	r2, r2
 8006412:	701a      	strb	r2, [r3, #0]
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	0a1b      	lsrs	r3, r3, #8
 8006418:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	1c5a      	adds	r2, r3, #1
 800641e:	607a      	str	r2, [r7, #4]
 8006420:	683a      	ldr	r2, [r7, #0]
 8006422:	b2d2      	uxtb	r2, r2
 8006424:	701a      	strb	r2, [r3, #0]
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	0a1b      	lsrs	r3, r3, #8
 800642a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	1c5a      	adds	r2, r3, #1
 8006430:	607a      	str	r2, [r7, #4]
 8006432:	683a      	ldr	r2, [r7, #0]
 8006434:	b2d2      	uxtb	r2, r2
 8006436:	701a      	strb	r2, [r3, #0]
}
 8006438:	bf00      	nop
 800643a:	370c      	adds	r7, #12
 800643c:	46bd      	mov	sp, r7
 800643e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006442:	4770      	bx	lr

08006444 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8006444:	b480      	push	{r7}
 8006446:	b087      	sub	sp, #28
 8006448:	af00      	add	r7, sp, #0
 800644a:	60f8      	str	r0, [r7, #12]
 800644c:	60b9      	str	r1, [r7, #8]
 800644e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d00d      	beq.n	800647a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800645e:	693a      	ldr	r2, [r7, #16]
 8006460:	1c53      	adds	r3, r2, #1
 8006462:	613b      	str	r3, [r7, #16]
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	1c59      	adds	r1, r3, #1
 8006468:	6179      	str	r1, [r7, #20]
 800646a:	7812      	ldrb	r2, [r2, #0]
 800646c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	3b01      	subs	r3, #1
 8006472:	607b      	str	r3, [r7, #4]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d1f1      	bne.n	800645e <mem_cpy+0x1a>
	}
}
 800647a:	bf00      	nop
 800647c:	371c      	adds	r7, #28
 800647e:	46bd      	mov	sp, r7
 8006480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006484:	4770      	bx	lr

08006486 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8006486:	b480      	push	{r7}
 8006488:	b087      	sub	sp, #28
 800648a:	af00      	add	r7, sp, #0
 800648c:	60f8      	str	r0, [r7, #12]
 800648e:	60b9      	str	r1, [r7, #8]
 8006490:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8006496:	697b      	ldr	r3, [r7, #20]
 8006498:	1c5a      	adds	r2, r3, #1
 800649a:	617a      	str	r2, [r7, #20]
 800649c:	68ba      	ldr	r2, [r7, #8]
 800649e:	b2d2      	uxtb	r2, r2
 80064a0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	3b01      	subs	r3, #1
 80064a6:	607b      	str	r3, [r7, #4]
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d1f3      	bne.n	8006496 <mem_set+0x10>
}
 80064ae:	bf00      	nop
 80064b0:	bf00      	nop
 80064b2:	371c      	adds	r7, #28
 80064b4:	46bd      	mov	sp, r7
 80064b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ba:	4770      	bx	lr

080064bc <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80064bc:	b480      	push	{r7}
 80064be:	b089      	sub	sp, #36	; 0x24
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	60f8      	str	r0, [r7, #12]
 80064c4:	60b9      	str	r1, [r7, #8]
 80064c6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	61fb      	str	r3, [r7, #28]
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80064d0:	2300      	movs	r3, #0
 80064d2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80064d4:	69fb      	ldr	r3, [r7, #28]
 80064d6:	1c5a      	adds	r2, r3, #1
 80064d8:	61fa      	str	r2, [r7, #28]
 80064da:	781b      	ldrb	r3, [r3, #0]
 80064dc:	4619      	mov	r1, r3
 80064de:	69bb      	ldr	r3, [r7, #24]
 80064e0:	1c5a      	adds	r2, r3, #1
 80064e2:	61ba      	str	r2, [r7, #24]
 80064e4:	781b      	ldrb	r3, [r3, #0]
 80064e6:	1acb      	subs	r3, r1, r3
 80064e8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	3b01      	subs	r3, #1
 80064ee:	607b      	str	r3, [r7, #4]
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d002      	beq.n	80064fc <mem_cmp+0x40>
 80064f6:	697b      	ldr	r3, [r7, #20]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d0eb      	beq.n	80064d4 <mem_cmp+0x18>

	return r;
 80064fc:	697b      	ldr	r3, [r7, #20]
}
 80064fe:	4618      	mov	r0, r3
 8006500:	3724      	adds	r7, #36	; 0x24
 8006502:	46bd      	mov	sp, r7
 8006504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006508:	4770      	bx	lr

0800650a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800650a:	b480      	push	{r7}
 800650c:	b083      	sub	sp, #12
 800650e:	af00      	add	r7, sp, #0
 8006510:	6078      	str	r0, [r7, #4]
 8006512:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8006514:	e002      	b.n	800651c <chk_chr+0x12>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	3301      	adds	r3, #1
 800651a:	607b      	str	r3, [r7, #4]
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	781b      	ldrb	r3, [r3, #0]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d005      	beq.n	8006530 <chk_chr+0x26>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	781b      	ldrb	r3, [r3, #0]
 8006528:	461a      	mov	r2, r3
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	4293      	cmp	r3, r2
 800652e:	d1f2      	bne.n	8006516 <chk_chr+0xc>
	return *str;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	781b      	ldrb	r3, [r3, #0]
}
 8006534:	4618      	mov	r0, r3
 8006536:	370c      	adds	r7, #12
 8006538:	46bd      	mov	sp, r7
 800653a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653e:	4770      	bx	lr

08006540 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006540:	b480      	push	{r7}
 8006542:	b085      	sub	sp, #20
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
 8006548:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800654a:	2300      	movs	r3, #0
 800654c:	60bb      	str	r3, [r7, #8]
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	60fb      	str	r3, [r7, #12]
 8006552:	e029      	b.n	80065a8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8006554:	4a27      	ldr	r2, [pc, #156]	; (80065f4 <chk_lock+0xb4>)
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	011b      	lsls	r3, r3, #4
 800655a:	4413      	add	r3, r2
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d01d      	beq.n	800659e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006562:	4a24      	ldr	r2, [pc, #144]	; (80065f4 <chk_lock+0xb4>)
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	011b      	lsls	r3, r3, #4
 8006568:	4413      	add	r3, r2
 800656a:	681a      	ldr	r2, [r3, #0]
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	429a      	cmp	r2, r3
 8006572:	d116      	bne.n	80065a2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8006574:	4a1f      	ldr	r2, [pc, #124]	; (80065f4 <chk_lock+0xb4>)
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	011b      	lsls	r3, r3, #4
 800657a:	4413      	add	r3, r2
 800657c:	3304      	adds	r3, #4
 800657e:	681a      	ldr	r2, [r3, #0]
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006584:	429a      	cmp	r2, r3
 8006586:	d10c      	bne.n	80065a2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006588:	4a1a      	ldr	r2, [pc, #104]	; (80065f4 <chk_lock+0xb4>)
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	011b      	lsls	r3, r3, #4
 800658e:	4413      	add	r3, r2
 8006590:	3308      	adds	r3, #8
 8006592:	681a      	ldr	r2, [r3, #0]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8006598:	429a      	cmp	r2, r3
 800659a:	d102      	bne.n	80065a2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800659c:	e007      	b.n	80065ae <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800659e:	2301      	movs	r3, #1
 80065a0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	3301      	adds	r3, #1
 80065a6:	60fb      	str	r3, [r7, #12]
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	2b01      	cmp	r3, #1
 80065ac:	d9d2      	bls.n	8006554 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2b02      	cmp	r3, #2
 80065b2:	d109      	bne.n	80065c8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d102      	bne.n	80065c0 <chk_lock+0x80>
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	2b02      	cmp	r3, #2
 80065be:	d101      	bne.n	80065c4 <chk_lock+0x84>
 80065c0:	2300      	movs	r3, #0
 80065c2:	e010      	b.n	80065e6 <chk_lock+0xa6>
 80065c4:	2312      	movs	r3, #18
 80065c6:	e00e      	b.n	80065e6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d108      	bne.n	80065e0 <chk_lock+0xa0>
 80065ce:	4a09      	ldr	r2, [pc, #36]	; (80065f4 <chk_lock+0xb4>)
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	011b      	lsls	r3, r3, #4
 80065d4:	4413      	add	r3, r2
 80065d6:	330c      	adds	r3, #12
 80065d8:	881b      	ldrh	r3, [r3, #0]
 80065da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065de:	d101      	bne.n	80065e4 <chk_lock+0xa4>
 80065e0:	2310      	movs	r3, #16
 80065e2:	e000      	b.n	80065e6 <chk_lock+0xa6>
 80065e4:	2300      	movs	r3, #0
}
 80065e6:	4618      	mov	r0, r3
 80065e8:	3714      	adds	r7, #20
 80065ea:	46bd      	mov	sp, r7
 80065ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f0:	4770      	bx	lr
 80065f2:	bf00      	nop
 80065f4:	200000d0 	.word	0x200000d0

080065f8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80065f8:	b480      	push	{r7}
 80065fa:	b083      	sub	sp, #12
 80065fc:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80065fe:	2300      	movs	r3, #0
 8006600:	607b      	str	r3, [r7, #4]
 8006602:	e002      	b.n	800660a <enq_lock+0x12>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	3301      	adds	r3, #1
 8006608:	607b      	str	r3, [r7, #4]
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2b01      	cmp	r3, #1
 800660e:	d806      	bhi.n	800661e <enq_lock+0x26>
 8006610:	4a09      	ldr	r2, [pc, #36]	; (8006638 <enq_lock+0x40>)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	011b      	lsls	r3, r3, #4
 8006616:	4413      	add	r3, r2
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d1f2      	bne.n	8006604 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2b02      	cmp	r3, #2
 8006622:	bf14      	ite	ne
 8006624:	2301      	movne	r3, #1
 8006626:	2300      	moveq	r3, #0
 8006628:	b2db      	uxtb	r3, r3
}
 800662a:	4618      	mov	r0, r3
 800662c:	370c      	adds	r7, #12
 800662e:	46bd      	mov	sp, r7
 8006630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006634:	4770      	bx	lr
 8006636:	bf00      	nop
 8006638:	200000d0 	.word	0x200000d0

0800663c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800663c:	b480      	push	{r7}
 800663e:	b085      	sub	sp, #20
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
 8006644:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006646:	2300      	movs	r3, #0
 8006648:	60fb      	str	r3, [r7, #12]
 800664a:	e01f      	b.n	800668c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800664c:	4a41      	ldr	r2, [pc, #260]	; (8006754 <inc_lock+0x118>)
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	011b      	lsls	r3, r3, #4
 8006652:	4413      	add	r3, r2
 8006654:	681a      	ldr	r2, [r3, #0]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	429a      	cmp	r2, r3
 800665c:	d113      	bne.n	8006686 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800665e:	4a3d      	ldr	r2, [pc, #244]	; (8006754 <inc_lock+0x118>)
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	011b      	lsls	r3, r3, #4
 8006664:	4413      	add	r3, r2
 8006666:	3304      	adds	r3, #4
 8006668:	681a      	ldr	r2, [r3, #0]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800666e:	429a      	cmp	r2, r3
 8006670:	d109      	bne.n	8006686 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8006672:	4a38      	ldr	r2, [pc, #224]	; (8006754 <inc_lock+0x118>)
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	011b      	lsls	r3, r3, #4
 8006678:	4413      	add	r3, r2
 800667a:	3308      	adds	r3, #8
 800667c:	681a      	ldr	r2, [r3, #0]
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8006682:	429a      	cmp	r2, r3
 8006684:	d006      	beq.n	8006694 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	3301      	adds	r3, #1
 800668a:	60fb      	str	r3, [r7, #12]
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	2b01      	cmp	r3, #1
 8006690:	d9dc      	bls.n	800664c <inc_lock+0x10>
 8006692:	e000      	b.n	8006696 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8006694:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	2b02      	cmp	r3, #2
 800669a:	d132      	bne.n	8006702 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800669c:	2300      	movs	r3, #0
 800669e:	60fb      	str	r3, [r7, #12]
 80066a0:	e002      	b.n	80066a8 <inc_lock+0x6c>
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	3301      	adds	r3, #1
 80066a6:	60fb      	str	r3, [r7, #12]
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	2b01      	cmp	r3, #1
 80066ac:	d806      	bhi.n	80066bc <inc_lock+0x80>
 80066ae:	4a29      	ldr	r2, [pc, #164]	; (8006754 <inc_lock+0x118>)
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	011b      	lsls	r3, r3, #4
 80066b4:	4413      	add	r3, r2
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d1f2      	bne.n	80066a2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	2b02      	cmp	r3, #2
 80066c0:	d101      	bne.n	80066c6 <inc_lock+0x8a>
 80066c2:	2300      	movs	r3, #0
 80066c4:	e040      	b.n	8006748 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681a      	ldr	r2, [r3, #0]
 80066ca:	4922      	ldr	r1, [pc, #136]	; (8006754 <inc_lock+0x118>)
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	011b      	lsls	r3, r3, #4
 80066d0:	440b      	add	r3, r1
 80066d2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	689a      	ldr	r2, [r3, #8]
 80066d8:	491e      	ldr	r1, [pc, #120]	; (8006754 <inc_lock+0x118>)
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	011b      	lsls	r3, r3, #4
 80066de:	440b      	add	r3, r1
 80066e0:	3304      	adds	r3, #4
 80066e2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	695a      	ldr	r2, [r3, #20]
 80066e8:	491a      	ldr	r1, [pc, #104]	; (8006754 <inc_lock+0x118>)
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	011b      	lsls	r3, r3, #4
 80066ee:	440b      	add	r3, r1
 80066f0:	3308      	adds	r3, #8
 80066f2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80066f4:	4a17      	ldr	r2, [pc, #92]	; (8006754 <inc_lock+0x118>)
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	011b      	lsls	r3, r3, #4
 80066fa:	4413      	add	r3, r2
 80066fc:	330c      	adds	r3, #12
 80066fe:	2200      	movs	r2, #0
 8006700:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d009      	beq.n	800671c <inc_lock+0xe0>
 8006708:	4a12      	ldr	r2, [pc, #72]	; (8006754 <inc_lock+0x118>)
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	011b      	lsls	r3, r3, #4
 800670e:	4413      	add	r3, r2
 8006710:	330c      	adds	r3, #12
 8006712:	881b      	ldrh	r3, [r3, #0]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d001      	beq.n	800671c <inc_lock+0xe0>
 8006718:	2300      	movs	r3, #0
 800671a:	e015      	b.n	8006748 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d108      	bne.n	8006734 <inc_lock+0xf8>
 8006722:	4a0c      	ldr	r2, [pc, #48]	; (8006754 <inc_lock+0x118>)
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	011b      	lsls	r3, r3, #4
 8006728:	4413      	add	r3, r2
 800672a:	330c      	adds	r3, #12
 800672c:	881b      	ldrh	r3, [r3, #0]
 800672e:	3301      	adds	r3, #1
 8006730:	b29a      	uxth	r2, r3
 8006732:	e001      	b.n	8006738 <inc_lock+0xfc>
 8006734:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006738:	4906      	ldr	r1, [pc, #24]	; (8006754 <inc_lock+0x118>)
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	011b      	lsls	r3, r3, #4
 800673e:	440b      	add	r3, r1
 8006740:	330c      	adds	r3, #12
 8006742:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	3301      	adds	r3, #1
}
 8006748:	4618      	mov	r0, r3
 800674a:	3714      	adds	r7, #20
 800674c:	46bd      	mov	sp, r7
 800674e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006752:	4770      	bx	lr
 8006754:	200000d0 	.word	0x200000d0

08006758 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8006758:	b480      	push	{r7}
 800675a:	b085      	sub	sp, #20
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	3b01      	subs	r3, #1
 8006764:	607b      	str	r3, [r7, #4]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2b01      	cmp	r3, #1
 800676a:	d825      	bhi.n	80067b8 <dec_lock+0x60>
		n = Files[i].ctr;
 800676c:	4a17      	ldr	r2, [pc, #92]	; (80067cc <dec_lock+0x74>)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	011b      	lsls	r3, r3, #4
 8006772:	4413      	add	r3, r2
 8006774:	330c      	adds	r3, #12
 8006776:	881b      	ldrh	r3, [r3, #0]
 8006778:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800677a:	89fb      	ldrh	r3, [r7, #14]
 800677c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006780:	d101      	bne.n	8006786 <dec_lock+0x2e>
 8006782:	2300      	movs	r3, #0
 8006784:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8006786:	89fb      	ldrh	r3, [r7, #14]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d002      	beq.n	8006792 <dec_lock+0x3a>
 800678c:	89fb      	ldrh	r3, [r7, #14]
 800678e:	3b01      	subs	r3, #1
 8006790:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8006792:	4a0e      	ldr	r2, [pc, #56]	; (80067cc <dec_lock+0x74>)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	011b      	lsls	r3, r3, #4
 8006798:	4413      	add	r3, r2
 800679a:	330c      	adds	r3, #12
 800679c:	89fa      	ldrh	r2, [r7, #14]
 800679e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80067a0:	89fb      	ldrh	r3, [r7, #14]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d105      	bne.n	80067b2 <dec_lock+0x5a>
 80067a6:	4a09      	ldr	r2, [pc, #36]	; (80067cc <dec_lock+0x74>)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	011b      	lsls	r3, r3, #4
 80067ac:	4413      	add	r3, r2
 80067ae:	2200      	movs	r2, #0
 80067b0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80067b2:	2300      	movs	r3, #0
 80067b4:	737b      	strb	r3, [r7, #13]
 80067b6:	e001      	b.n	80067bc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80067b8:	2302      	movs	r3, #2
 80067ba:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80067bc:	7b7b      	ldrb	r3, [r7, #13]
}
 80067be:	4618      	mov	r0, r3
 80067c0:	3714      	adds	r7, #20
 80067c2:	46bd      	mov	sp, r7
 80067c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c8:	4770      	bx	lr
 80067ca:	bf00      	nop
 80067cc:	200000d0 	.word	0x200000d0

080067d0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80067d0:	b480      	push	{r7}
 80067d2:	b085      	sub	sp, #20
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80067d8:	2300      	movs	r3, #0
 80067da:	60fb      	str	r3, [r7, #12]
 80067dc:	e010      	b.n	8006800 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80067de:	4a0d      	ldr	r2, [pc, #52]	; (8006814 <clear_lock+0x44>)
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	011b      	lsls	r3, r3, #4
 80067e4:	4413      	add	r3, r2
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	687a      	ldr	r2, [r7, #4]
 80067ea:	429a      	cmp	r2, r3
 80067ec:	d105      	bne.n	80067fa <clear_lock+0x2a>
 80067ee:	4a09      	ldr	r2, [pc, #36]	; (8006814 <clear_lock+0x44>)
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	011b      	lsls	r3, r3, #4
 80067f4:	4413      	add	r3, r2
 80067f6:	2200      	movs	r2, #0
 80067f8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	3301      	adds	r3, #1
 80067fe:	60fb      	str	r3, [r7, #12]
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	2b01      	cmp	r3, #1
 8006804:	d9eb      	bls.n	80067de <clear_lock+0xe>
	}
}
 8006806:	bf00      	nop
 8006808:	bf00      	nop
 800680a:	3714      	adds	r7, #20
 800680c:	46bd      	mov	sp, r7
 800680e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006812:	4770      	bx	lr
 8006814:	200000d0 	.word	0x200000d0

08006818 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b086      	sub	sp, #24
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8006820:	2300      	movs	r3, #0
 8006822:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	78db      	ldrb	r3, [r3, #3]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d034      	beq.n	8006896 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006830:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	7858      	ldrb	r0, [r3, #1]
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800683c:	2301      	movs	r3, #1
 800683e:	697a      	ldr	r2, [r7, #20]
 8006840:	f7ff fd4e 	bl	80062e0 <disk_write>
 8006844:	4603      	mov	r3, r0
 8006846:	2b00      	cmp	r3, #0
 8006848:	d002      	beq.n	8006850 <sync_window+0x38>
			res = FR_DISK_ERR;
 800684a:	2301      	movs	r3, #1
 800684c:	73fb      	strb	r3, [r7, #15]
 800684e:	e022      	b.n	8006896 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2200      	movs	r2, #0
 8006854:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800685a:	697a      	ldr	r2, [r7, #20]
 800685c:	1ad2      	subs	r2, r2, r3
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	69db      	ldr	r3, [r3, #28]
 8006862:	429a      	cmp	r2, r3
 8006864:	d217      	bcs.n	8006896 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	789b      	ldrb	r3, [r3, #2]
 800686a:	613b      	str	r3, [r7, #16]
 800686c:	e010      	b.n	8006890 <sync_window+0x78>
					wsect += fs->fsize;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	69db      	ldr	r3, [r3, #28]
 8006872:	697a      	ldr	r2, [r7, #20]
 8006874:	4413      	add	r3, r2
 8006876:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	7858      	ldrb	r0, [r3, #1]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006882:	2301      	movs	r3, #1
 8006884:	697a      	ldr	r2, [r7, #20]
 8006886:	f7ff fd2b 	bl	80062e0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800688a:	693b      	ldr	r3, [r7, #16]
 800688c:	3b01      	subs	r3, #1
 800688e:	613b      	str	r3, [r7, #16]
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	2b01      	cmp	r3, #1
 8006894:	d8eb      	bhi.n	800686e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8006896:	7bfb      	ldrb	r3, [r7, #15]
}
 8006898:	4618      	mov	r0, r3
 800689a:	3718      	adds	r7, #24
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}

080068a0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b084      	sub	sp, #16
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
 80068a8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80068aa:	2300      	movs	r3, #0
 80068ac:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068b2:	683a      	ldr	r2, [r7, #0]
 80068b4:	429a      	cmp	r2, r3
 80068b6:	d01b      	beq.n	80068f0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80068b8:	6878      	ldr	r0, [r7, #4]
 80068ba:	f7ff ffad 	bl	8006818 <sync_window>
 80068be:	4603      	mov	r3, r0
 80068c0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80068c2:	7bfb      	ldrb	r3, [r7, #15]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d113      	bne.n	80068f0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	7858      	ldrb	r0, [r3, #1]
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80068d2:	2301      	movs	r3, #1
 80068d4:	683a      	ldr	r2, [r7, #0]
 80068d6:	f7ff fceb 	bl	80062b0 <disk_read>
 80068da:	4603      	mov	r3, r0
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d004      	beq.n	80068ea <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80068e0:	f04f 33ff 	mov.w	r3, #4294967295
 80068e4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80068e6:	2301      	movs	r3, #1
 80068e8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	683a      	ldr	r2, [r7, #0]
 80068ee:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 80068f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80068f2:	4618      	mov	r0, r3
 80068f4:	3710      	adds	r7, #16
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bd80      	pop	{r7, pc}
	...

080068fc <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b084      	sub	sp, #16
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	f7ff ff87 	bl	8006818 <sync_window>
 800690a:	4603      	mov	r3, r0
 800690c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800690e:	7bfb      	ldrb	r3, [r7, #15]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d159      	bne.n	80069c8 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	781b      	ldrb	r3, [r3, #0]
 8006918:	2b03      	cmp	r3, #3
 800691a:	d149      	bne.n	80069b0 <sync_fs+0xb4>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	791b      	ldrb	r3, [r3, #4]
 8006920:	2b01      	cmp	r3, #1
 8006922:	d145      	bne.n	80069b0 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	899b      	ldrh	r3, [r3, #12]
 800692e:	461a      	mov	r2, r3
 8006930:	2100      	movs	r1, #0
 8006932:	f7ff fda8 	bl	8006486 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	3334      	adds	r3, #52	; 0x34
 800693a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800693e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8006942:	4618      	mov	r0, r3
 8006944:	f7ff fd37 	bl	80063b6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	3334      	adds	r3, #52	; 0x34
 800694c:	4921      	ldr	r1, [pc, #132]	; (80069d4 <sync_fs+0xd8>)
 800694e:	4618      	mov	r0, r3
 8006950:	f7ff fd4c 	bl	80063ec <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	3334      	adds	r3, #52	; 0x34
 8006958:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800695c:	491e      	ldr	r1, [pc, #120]	; (80069d8 <sync_fs+0xdc>)
 800695e:	4618      	mov	r0, r3
 8006960:	f7ff fd44 	bl	80063ec <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	3334      	adds	r3, #52	; 0x34
 8006968:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	695b      	ldr	r3, [r3, #20]
 8006970:	4619      	mov	r1, r3
 8006972:	4610      	mov	r0, r2
 8006974:	f7ff fd3a 	bl	80063ec <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	3334      	adds	r3, #52	; 0x34
 800697c:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	691b      	ldr	r3, [r3, #16]
 8006984:	4619      	mov	r1, r3
 8006986:	4610      	mov	r0, r2
 8006988:	f7ff fd30 	bl	80063ec <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6a1b      	ldr	r3, [r3, #32]
 8006990:	1c5a      	adds	r2, r3, #1
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	7858      	ldrb	r0, [r3, #1]
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80069a4:	2301      	movs	r3, #1
 80069a6:	f7ff fc9b 	bl	80062e0 <disk_write>
			fs->fsi_flag = 0;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2200      	movs	r2, #0
 80069ae:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	785b      	ldrb	r3, [r3, #1]
 80069b4:	2200      	movs	r2, #0
 80069b6:	2100      	movs	r1, #0
 80069b8:	4618      	mov	r0, r3
 80069ba:	f7ff fca9 	bl	8006310 <disk_ioctl>
 80069be:	4603      	mov	r3, r0
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d001      	beq.n	80069c8 <sync_fs+0xcc>
 80069c4:	2301      	movs	r3, #1
 80069c6:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80069c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	3710      	adds	r7, #16
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd80      	pop	{r7, pc}
 80069d2:	bf00      	nop
 80069d4:	41615252 	.word	0x41615252
 80069d8:	61417272 	.word	0x61417272

080069dc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80069dc:	b480      	push	{r7}
 80069de:	b083      	sub	sp, #12
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
 80069e4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	3b02      	subs	r3, #2
 80069ea:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	699b      	ldr	r3, [r3, #24]
 80069f0:	3b02      	subs	r3, #2
 80069f2:	683a      	ldr	r2, [r7, #0]
 80069f4:	429a      	cmp	r2, r3
 80069f6:	d301      	bcc.n	80069fc <clust2sect+0x20>
 80069f8:	2300      	movs	r3, #0
 80069fa:	e008      	b.n	8006a0e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	895b      	ldrh	r3, [r3, #10]
 8006a00:	461a      	mov	r2, r3
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	fb03 f202 	mul.w	r2, r3, r2
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a0c:	4413      	add	r3, r2
}
 8006a0e:	4618      	mov	r0, r3
 8006a10:	370c      	adds	r7, #12
 8006a12:	46bd      	mov	sp, r7
 8006a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a18:	4770      	bx	lr

08006a1a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8006a1a:	b580      	push	{r7, lr}
 8006a1c:	b086      	sub	sp, #24
 8006a1e:	af00      	add	r7, sp, #0
 8006a20:	6078      	str	r0, [r7, #4]
 8006a22:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	2b01      	cmp	r3, #1
 8006a2e:	d904      	bls.n	8006a3a <get_fat+0x20>
 8006a30:	693b      	ldr	r3, [r7, #16]
 8006a32:	699b      	ldr	r3, [r3, #24]
 8006a34:	683a      	ldr	r2, [r7, #0]
 8006a36:	429a      	cmp	r2, r3
 8006a38:	d302      	bcc.n	8006a40 <get_fat+0x26>
		val = 1;	/* Internal error */
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	617b      	str	r3, [r7, #20]
 8006a3e:	e0bb      	b.n	8006bb8 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006a40:	f04f 33ff 	mov.w	r3, #4294967295
 8006a44:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8006a46:	693b      	ldr	r3, [r7, #16]
 8006a48:	781b      	ldrb	r3, [r3, #0]
 8006a4a:	2b03      	cmp	r3, #3
 8006a4c:	f000 8083 	beq.w	8006b56 <get_fat+0x13c>
 8006a50:	2b03      	cmp	r3, #3
 8006a52:	f300 80a7 	bgt.w	8006ba4 <get_fat+0x18a>
 8006a56:	2b01      	cmp	r3, #1
 8006a58:	d002      	beq.n	8006a60 <get_fat+0x46>
 8006a5a:	2b02      	cmp	r3, #2
 8006a5c:	d056      	beq.n	8006b0c <get_fat+0xf2>
 8006a5e:	e0a1      	b.n	8006ba4 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	60fb      	str	r3, [r7, #12]
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	085b      	lsrs	r3, r3, #1
 8006a68:	68fa      	ldr	r2, [r7, #12]
 8006a6a:	4413      	add	r3, r2
 8006a6c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006a72:	693b      	ldr	r3, [r7, #16]
 8006a74:	899b      	ldrh	r3, [r3, #12]
 8006a76:	4619      	mov	r1, r3
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8006a7e:	4413      	add	r3, r2
 8006a80:	4619      	mov	r1, r3
 8006a82:	6938      	ldr	r0, [r7, #16]
 8006a84:	f7ff ff0c 	bl	80068a0 <move_window>
 8006a88:	4603      	mov	r3, r0
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	f040 808d 	bne.w	8006baa <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	1c5a      	adds	r2, r3, #1
 8006a94:	60fa      	str	r2, [r7, #12]
 8006a96:	693a      	ldr	r2, [r7, #16]
 8006a98:	8992      	ldrh	r2, [r2, #12]
 8006a9a:	fbb3 f1f2 	udiv	r1, r3, r2
 8006a9e:	fb02 f201 	mul.w	r2, r2, r1
 8006aa2:	1a9b      	subs	r3, r3, r2
 8006aa4:	693a      	ldr	r2, [r7, #16]
 8006aa6:	4413      	add	r3, r2
 8006aa8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006aac:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006aae:	693b      	ldr	r3, [r7, #16]
 8006ab0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006ab2:	693b      	ldr	r3, [r7, #16]
 8006ab4:	899b      	ldrh	r3, [r3, #12]
 8006ab6:	4619      	mov	r1, r3
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	fbb3 f3f1 	udiv	r3, r3, r1
 8006abe:	4413      	add	r3, r2
 8006ac0:	4619      	mov	r1, r3
 8006ac2:	6938      	ldr	r0, [r7, #16]
 8006ac4:	f7ff feec 	bl	80068a0 <move_window>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d16f      	bne.n	8006bae <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8006ace:	693b      	ldr	r3, [r7, #16]
 8006ad0:	899b      	ldrh	r3, [r3, #12]
 8006ad2:	461a      	mov	r2, r3
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	fbb3 f1f2 	udiv	r1, r3, r2
 8006ada:	fb02 f201 	mul.w	r2, r2, r1
 8006ade:	1a9b      	subs	r3, r3, r2
 8006ae0:	693a      	ldr	r2, [r7, #16]
 8006ae2:	4413      	add	r3, r2
 8006ae4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006ae8:	021b      	lsls	r3, r3, #8
 8006aea:	461a      	mov	r2, r3
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	4313      	orrs	r3, r2
 8006af0:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	f003 0301 	and.w	r3, r3, #1
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d002      	beq.n	8006b02 <get_fat+0xe8>
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	091b      	lsrs	r3, r3, #4
 8006b00:	e002      	b.n	8006b08 <get_fat+0xee>
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006b08:	617b      	str	r3, [r7, #20]
			break;
 8006b0a:	e055      	b.n	8006bb8 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006b0c:	693b      	ldr	r3, [r7, #16]
 8006b0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006b10:	693b      	ldr	r3, [r7, #16]
 8006b12:	899b      	ldrh	r3, [r3, #12]
 8006b14:	085b      	lsrs	r3, r3, #1
 8006b16:	b29b      	uxth	r3, r3
 8006b18:	4619      	mov	r1, r3
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	fbb3 f3f1 	udiv	r3, r3, r1
 8006b20:	4413      	add	r3, r2
 8006b22:	4619      	mov	r1, r3
 8006b24:	6938      	ldr	r0, [r7, #16]
 8006b26:	f7ff febb 	bl	80068a0 <move_window>
 8006b2a:	4603      	mov	r3, r0
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d140      	bne.n	8006bb2 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8006b30:	693b      	ldr	r3, [r7, #16]
 8006b32:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	005b      	lsls	r3, r3, #1
 8006b3a:	693a      	ldr	r2, [r7, #16]
 8006b3c:	8992      	ldrh	r2, [r2, #12]
 8006b3e:	fbb3 f0f2 	udiv	r0, r3, r2
 8006b42:	fb02 f200 	mul.w	r2, r2, r0
 8006b46:	1a9b      	subs	r3, r3, r2
 8006b48:	440b      	add	r3, r1
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	f7ff fbf8 	bl	8006340 <ld_word>
 8006b50:	4603      	mov	r3, r0
 8006b52:	617b      	str	r3, [r7, #20]
			break;
 8006b54:	e030      	b.n	8006bb8 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006b56:	693b      	ldr	r3, [r7, #16]
 8006b58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006b5a:	693b      	ldr	r3, [r7, #16]
 8006b5c:	899b      	ldrh	r3, [r3, #12]
 8006b5e:	089b      	lsrs	r3, r3, #2
 8006b60:	b29b      	uxth	r3, r3
 8006b62:	4619      	mov	r1, r3
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	fbb3 f3f1 	udiv	r3, r3, r1
 8006b6a:	4413      	add	r3, r2
 8006b6c:	4619      	mov	r1, r3
 8006b6e:	6938      	ldr	r0, [r7, #16]
 8006b70:	f7ff fe96 	bl	80068a0 <move_window>
 8006b74:	4603      	mov	r3, r0
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d11d      	bne.n	8006bb6 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006b7a:	693b      	ldr	r3, [r7, #16]
 8006b7c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	009b      	lsls	r3, r3, #2
 8006b84:	693a      	ldr	r2, [r7, #16]
 8006b86:	8992      	ldrh	r2, [r2, #12]
 8006b88:	fbb3 f0f2 	udiv	r0, r3, r2
 8006b8c:	fb02 f200 	mul.w	r2, r2, r0
 8006b90:	1a9b      	subs	r3, r3, r2
 8006b92:	440b      	add	r3, r1
 8006b94:	4618      	mov	r0, r3
 8006b96:	f7ff fbeb 	bl	8006370 <ld_dword>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006ba0:	617b      	str	r3, [r7, #20]
			break;
 8006ba2:	e009      	b.n	8006bb8 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	617b      	str	r3, [r7, #20]
 8006ba8:	e006      	b.n	8006bb8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006baa:	bf00      	nop
 8006bac:	e004      	b.n	8006bb8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006bae:	bf00      	nop
 8006bb0:	e002      	b.n	8006bb8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006bb2:	bf00      	nop
 8006bb4:	e000      	b.n	8006bb8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006bb6:	bf00      	nop
		}
	}

	return val;
 8006bb8:	697b      	ldr	r3, [r7, #20]
}
 8006bba:	4618      	mov	r0, r3
 8006bbc:	3718      	adds	r7, #24
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bd80      	pop	{r7, pc}

08006bc2 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8006bc2:	b590      	push	{r4, r7, lr}
 8006bc4:	b089      	sub	sp, #36	; 0x24
 8006bc6:	af00      	add	r7, sp, #0
 8006bc8:	60f8      	str	r0, [r7, #12]
 8006bca:	60b9      	str	r1, [r7, #8]
 8006bcc:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8006bce:	2302      	movs	r3, #2
 8006bd0:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	2b01      	cmp	r3, #1
 8006bd6:	f240 8102 	bls.w	8006dde <put_fat+0x21c>
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	699b      	ldr	r3, [r3, #24]
 8006bde:	68ba      	ldr	r2, [r7, #8]
 8006be0:	429a      	cmp	r2, r3
 8006be2:	f080 80fc 	bcs.w	8006dde <put_fat+0x21c>
		switch (fs->fs_type) {
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	781b      	ldrb	r3, [r3, #0]
 8006bea:	2b03      	cmp	r3, #3
 8006bec:	f000 80b6 	beq.w	8006d5c <put_fat+0x19a>
 8006bf0:	2b03      	cmp	r3, #3
 8006bf2:	f300 80fd 	bgt.w	8006df0 <put_fat+0x22e>
 8006bf6:	2b01      	cmp	r3, #1
 8006bf8:	d003      	beq.n	8006c02 <put_fat+0x40>
 8006bfa:	2b02      	cmp	r3, #2
 8006bfc:	f000 8083 	beq.w	8006d06 <put_fat+0x144>
 8006c00:	e0f6      	b.n	8006df0 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	61bb      	str	r3, [r7, #24]
 8006c06:	69bb      	ldr	r3, [r7, #24]
 8006c08:	085b      	lsrs	r3, r3, #1
 8006c0a:	69ba      	ldr	r2, [r7, #24]
 8006c0c:	4413      	add	r3, r2
 8006c0e:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	899b      	ldrh	r3, [r3, #12]
 8006c18:	4619      	mov	r1, r3
 8006c1a:	69bb      	ldr	r3, [r7, #24]
 8006c1c:	fbb3 f3f1 	udiv	r3, r3, r1
 8006c20:	4413      	add	r3, r2
 8006c22:	4619      	mov	r1, r3
 8006c24:	68f8      	ldr	r0, [r7, #12]
 8006c26:	f7ff fe3b 	bl	80068a0 <move_window>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006c2e:	7ffb      	ldrb	r3, [r7, #31]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	f040 80d6 	bne.w	8006de2 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006c3c:	69bb      	ldr	r3, [r7, #24]
 8006c3e:	1c5a      	adds	r2, r3, #1
 8006c40:	61ba      	str	r2, [r7, #24]
 8006c42:	68fa      	ldr	r2, [r7, #12]
 8006c44:	8992      	ldrh	r2, [r2, #12]
 8006c46:	fbb3 f0f2 	udiv	r0, r3, r2
 8006c4a:	fb02 f200 	mul.w	r2, r2, r0
 8006c4e:	1a9b      	subs	r3, r3, r2
 8006c50:	440b      	add	r3, r1
 8006c52:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	f003 0301 	and.w	r3, r3, #1
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d00d      	beq.n	8006c7a <put_fat+0xb8>
 8006c5e:	697b      	ldr	r3, [r7, #20]
 8006c60:	781b      	ldrb	r3, [r3, #0]
 8006c62:	b25b      	sxtb	r3, r3
 8006c64:	f003 030f 	and.w	r3, r3, #15
 8006c68:	b25a      	sxtb	r2, r3
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	b2db      	uxtb	r3, r3
 8006c6e:	011b      	lsls	r3, r3, #4
 8006c70:	b25b      	sxtb	r3, r3
 8006c72:	4313      	orrs	r3, r2
 8006c74:	b25b      	sxtb	r3, r3
 8006c76:	b2db      	uxtb	r3, r3
 8006c78:	e001      	b.n	8006c7e <put_fat+0xbc>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	b2db      	uxtb	r3, r3
 8006c7e:	697a      	ldr	r2, [r7, #20]
 8006c80:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	2201      	movs	r2, #1
 8006c86:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	899b      	ldrh	r3, [r3, #12]
 8006c90:	4619      	mov	r1, r3
 8006c92:	69bb      	ldr	r3, [r7, #24]
 8006c94:	fbb3 f3f1 	udiv	r3, r3, r1
 8006c98:	4413      	add	r3, r2
 8006c9a:	4619      	mov	r1, r3
 8006c9c:	68f8      	ldr	r0, [r7, #12]
 8006c9e:	f7ff fdff 	bl	80068a0 <move_window>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006ca6:	7ffb      	ldrb	r3, [r7, #31]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	f040 809c 	bne.w	8006de6 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	899b      	ldrh	r3, [r3, #12]
 8006cb8:	461a      	mov	r2, r3
 8006cba:	69bb      	ldr	r3, [r7, #24]
 8006cbc:	fbb3 f0f2 	udiv	r0, r3, r2
 8006cc0:	fb02 f200 	mul.w	r2, r2, r0
 8006cc4:	1a9b      	subs	r3, r3, r2
 8006cc6:	440b      	add	r3, r1
 8006cc8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	f003 0301 	and.w	r3, r3, #1
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d003      	beq.n	8006cdc <put_fat+0x11a>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	091b      	lsrs	r3, r3, #4
 8006cd8:	b2db      	uxtb	r3, r3
 8006cda:	e00e      	b.n	8006cfa <put_fat+0x138>
 8006cdc:	697b      	ldr	r3, [r7, #20]
 8006cde:	781b      	ldrb	r3, [r3, #0]
 8006ce0:	b25b      	sxtb	r3, r3
 8006ce2:	f023 030f 	bic.w	r3, r3, #15
 8006ce6:	b25a      	sxtb	r2, r3
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	0a1b      	lsrs	r3, r3, #8
 8006cec:	b25b      	sxtb	r3, r3
 8006cee:	f003 030f 	and.w	r3, r3, #15
 8006cf2:	b25b      	sxtb	r3, r3
 8006cf4:	4313      	orrs	r3, r2
 8006cf6:	b25b      	sxtb	r3, r3
 8006cf8:	b2db      	uxtb	r3, r3
 8006cfa:	697a      	ldr	r2, [r7, #20]
 8006cfc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	2201      	movs	r2, #1
 8006d02:	70da      	strb	r2, [r3, #3]
			break;
 8006d04:	e074      	b.n	8006df0 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	899b      	ldrh	r3, [r3, #12]
 8006d0e:	085b      	lsrs	r3, r3, #1
 8006d10:	b29b      	uxth	r3, r3
 8006d12:	4619      	mov	r1, r3
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	fbb3 f3f1 	udiv	r3, r3, r1
 8006d1a:	4413      	add	r3, r2
 8006d1c:	4619      	mov	r1, r3
 8006d1e:	68f8      	ldr	r0, [r7, #12]
 8006d20:	f7ff fdbe 	bl	80068a0 <move_window>
 8006d24:	4603      	mov	r3, r0
 8006d26:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006d28:	7ffb      	ldrb	r3, [r7, #31]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d15d      	bne.n	8006dea <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	005b      	lsls	r3, r3, #1
 8006d38:	68fa      	ldr	r2, [r7, #12]
 8006d3a:	8992      	ldrh	r2, [r2, #12]
 8006d3c:	fbb3 f0f2 	udiv	r0, r3, r2
 8006d40:	fb02 f200 	mul.w	r2, r2, r0
 8006d44:	1a9b      	subs	r3, r3, r2
 8006d46:	440b      	add	r3, r1
 8006d48:	687a      	ldr	r2, [r7, #4]
 8006d4a:	b292      	uxth	r2, r2
 8006d4c:	4611      	mov	r1, r2
 8006d4e:	4618      	mov	r0, r3
 8006d50:	f7ff fb31 	bl	80063b6 <st_word>
			fs->wflag = 1;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	2201      	movs	r2, #1
 8006d58:	70da      	strb	r2, [r3, #3]
			break;
 8006d5a:	e049      	b.n	8006df0 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	899b      	ldrh	r3, [r3, #12]
 8006d64:	089b      	lsrs	r3, r3, #2
 8006d66:	b29b      	uxth	r3, r3
 8006d68:	4619      	mov	r1, r3
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	fbb3 f3f1 	udiv	r3, r3, r1
 8006d70:	4413      	add	r3, r2
 8006d72:	4619      	mov	r1, r3
 8006d74:	68f8      	ldr	r0, [r7, #12]
 8006d76:	f7ff fd93 	bl	80068a0 <move_window>
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006d7e:	7ffb      	ldrb	r3, [r7, #31]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d134      	bne.n	8006dee <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	009b      	lsls	r3, r3, #2
 8006d94:	68fa      	ldr	r2, [r7, #12]
 8006d96:	8992      	ldrh	r2, [r2, #12]
 8006d98:	fbb3 f0f2 	udiv	r0, r3, r2
 8006d9c:	fb02 f200 	mul.w	r2, r2, r0
 8006da0:	1a9b      	subs	r3, r3, r2
 8006da2:	440b      	add	r3, r1
 8006da4:	4618      	mov	r0, r3
 8006da6:	f7ff fae3 	bl	8006370 <ld_dword>
 8006daa:	4603      	mov	r3, r0
 8006dac:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006db0:	4323      	orrs	r3, r4
 8006db2:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	009b      	lsls	r3, r3, #2
 8006dbe:	68fa      	ldr	r2, [r7, #12]
 8006dc0:	8992      	ldrh	r2, [r2, #12]
 8006dc2:	fbb3 f0f2 	udiv	r0, r3, r2
 8006dc6:	fb02 f200 	mul.w	r2, r2, r0
 8006dca:	1a9b      	subs	r3, r3, r2
 8006dcc:	440b      	add	r3, r1
 8006dce:	6879      	ldr	r1, [r7, #4]
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	f7ff fb0b 	bl	80063ec <st_dword>
			fs->wflag = 1;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	2201      	movs	r2, #1
 8006dda:	70da      	strb	r2, [r3, #3]
			break;
 8006ddc:	e008      	b.n	8006df0 <put_fat+0x22e>
		}
	}
 8006dde:	bf00      	nop
 8006de0:	e006      	b.n	8006df0 <put_fat+0x22e>
			if (res != FR_OK) break;
 8006de2:	bf00      	nop
 8006de4:	e004      	b.n	8006df0 <put_fat+0x22e>
			if (res != FR_OK) break;
 8006de6:	bf00      	nop
 8006de8:	e002      	b.n	8006df0 <put_fat+0x22e>
			if (res != FR_OK) break;
 8006dea:	bf00      	nop
 8006dec:	e000      	b.n	8006df0 <put_fat+0x22e>
			if (res != FR_OK) break;
 8006dee:	bf00      	nop
	return res;
 8006df0:	7ffb      	ldrb	r3, [r7, #31]
}
 8006df2:	4618      	mov	r0, r3
 8006df4:	3724      	adds	r7, #36	; 0x24
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd90      	pop	{r4, r7, pc}

08006dfa <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8006dfa:	b580      	push	{r7, lr}
 8006dfc:	b088      	sub	sp, #32
 8006dfe:	af00      	add	r7, sp, #0
 8006e00:	60f8      	str	r0, [r7, #12]
 8006e02:	60b9      	str	r1, [r7, #8]
 8006e04:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8006e06:	2300      	movs	r3, #0
 8006e08:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	2b01      	cmp	r3, #1
 8006e14:	d904      	bls.n	8006e20 <remove_chain+0x26>
 8006e16:	69bb      	ldr	r3, [r7, #24]
 8006e18:	699b      	ldr	r3, [r3, #24]
 8006e1a:	68ba      	ldr	r2, [r7, #8]
 8006e1c:	429a      	cmp	r2, r3
 8006e1e:	d301      	bcc.n	8006e24 <remove_chain+0x2a>
 8006e20:	2302      	movs	r3, #2
 8006e22:	e04b      	b.n	8006ebc <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d00c      	beq.n	8006e44 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8006e2a:	f04f 32ff 	mov.w	r2, #4294967295
 8006e2e:	6879      	ldr	r1, [r7, #4]
 8006e30:	69b8      	ldr	r0, [r7, #24]
 8006e32:	f7ff fec6 	bl	8006bc2 <put_fat>
 8006e36:	4603      	mov	r3, r0
 8006e38:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8006e3a:	7ffb      	ldrb	r3, [r7, #31]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d001      	beq.n	8006e44 <remove_chain+0x4a>
 8006e40:	7ffb      	ldrb	r3, [r7, #31]
 8006e42:	e03b      	b.n	8006ebc <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8006e44:	68b9      	ldr	r1, [r7, #8]
 8006e46:	68f8      	ldr	r0, [r7, #12]
 8006e48:	f7ff fde7 	bl	8006a1a <get_fat>
 8006e4c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d031      	beq.n	8006eb8 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8006e54:	697b      	ldr	r3, [r7, #20]
 8006e56:	2b01      	cmp	r3, #1
 8006e58:	d101      	bne.n	8006e5e <remove_chain+0x64>
 8006e5a:	2302      	movs	r3, #2
 8006e5c:	e02e      	b.n	8006ebc <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8006e5e:	697b      	ldr	r3, [r7, #20]
 8006e60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e64:	d101      	bne.n	8006e6a <remove_chain+0x70>
 8006e66:	2301      	movs	r3, #1
 8006e68:	e028      	b.n	8006ebc <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	68b9      	ldr	r1, [r7, #8]
 8006e6e:	69b8      	ldr	r0, [r7, #24]
 8006e70:	f7ff fea7 	bl	8006bc2 <put_fat>
 8006e74:	4603      	mov	r3, r0
 8006e76:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8006e78:	7ffb      	ldrb	r3, [r7, #31]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d001      	beq.n	8006e82 <remove_chain+0x88>
 8006e7e:	7ffb      	ldrb	r3, [r7, #31]
 8006e80:	e01c      	b.n	8006ebc <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8006e82:	69bb      	ldr	r3, [r7, #24]
 8006e84:	695a      	ldr	r2, [r3, #20]
 8006e86:	69bb      	ldr	r3, [r7, #24]
 8006e88:	699b      	ldr	r3, [r3, #24]
 8006e8a:	3b02      	subs	r3, #2
 8006e8c:	429a      	cmp	r2, r3
 8006e8e:	d20b      	bcs.n	8006ea8 <remove_chain+0xae>
			fs->free_clst++;
 8006e90:	69bb      	ldr	r3, [r7, #24]
 8006e92:	695b      	ldr	r3, [r3, #20]
 8006e94:	1c5a      	adds	r2, r3, #1
 8006e96:	69bb      	ldr	r3, [r7, #24]
 8006e98:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8006e9a:	69bb      	ldr	r3, [r7, #24]
 8006e9c:	791b      	ldrb	r3, [r3, #4]
 8006e9e:	f043 0301 	orr.w	r3, r3, #1
 8006ea2:	b2da      	uxtb	r2, r3
 8006ea4:	69bb      	ldr	r3, [r7, #24]
 8006ea6:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8006ea8:	697b      	ldr	r3, [r7, #20]
 8006eaa:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8006eac:	69bb      	ldr	r3, [r7, #24]
 8006eae:	699b      	ldr	r3, [r3, #24]
 8006eb0:	68ba      	ldr	r2, [r7, #8]
 8006eb2:	429a      	cmp	r2, r3
 8006eb4:	d3c6      	bcc.n	8006e44 <remove_chain+0x4a>
 8006eb6:	e000      	b.n	8006eba <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8006eb8:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8006eba:	2300      	movs	r3, #0
}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	3720      	adds	r7, #32
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bd80      	pop	{r7, pc}

08006ec4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b088      	sub	sp, #32
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
 8006ecc:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d10d      	bne.n	8006ef6 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8006eda:	693b      	ldr	r3, [r7, #16]
 8006edc:	691b      	ldr	r3, [r3, #16]
 8006ede:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006ee0:	69bb      	ldr	r3, [r7, #24]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d004      	beq.n	8006ef0 <create_chain+0x2c>
 8006ee6:	693b      	ldr	r3, [r7, #16]
 8006ee8:	699b      	ldr	r3, [r3, #24]
 8006eea:	69ba      	ldr	r2, [r7, #24]
 8006eec:	429a      	cmp	r2, r3
 8006eee:	d31b      	bcc.n	8006f28 <create_chain+0x64>
 8006ef0:	2301      	movs	r3, #1
 8006ef2:	61bb      	str	r3, [r7, #24]
 8006ef4:	e018      	b.n	8006f28 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8006ef6:	6839      	ldr	r1, [r7, #0]
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	f7ff fd8e 	bl	8006a1a <get_fat>
 8006efe:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	2b01      	cmp	r3, #1
 8006f04:	d801      	bhi.n	8006f0a <create_chain+0x46>
 8006f06:	2301      	movs	r3, #1
 8006f08:	e070      	b.n	8006fec <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f10:	d101      	bne.n	8006f16 <create_chain+0x52>
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	e06a      	b.n	8006fec <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8006f16:	693b      	ldr	r3, [r7, #16]
 8006f18:	699b      	ldr	r3, [r3, #24]
 8006f1a:	68fa      	ldr	r2, [r7, #12]
 8006f1c:	429a      	cmp	r2, r3
 8006f1e:	d201      	bcs.n	8006f24 <create_chain+0x60>
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	e063      	b.n	8006fec <create_chain+0x128>
		scl = clst;
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8006f28:	69bb      	ldr	r3, [r7, #24]
 8006f2a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8006f2c:	69fb      	ldr	r3, [r7, #28]
 8006f2e:	3301      	adds	r3, #1
 8006f30:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8006f32:	693b      	ldr	r3, [r7, #16]
 8006f34:	699b      	ldr	r3, [r3, #24]
 8006f36:	69fa      	ldr	r2, [r7, #28]
 8006f38:	429a      	cmp	r2, r3
 8006f3a:	d307      	bcc.n	8006f4c <create_chain+0x88>
				ncl = 2;
 8006f3c:	2302      	movs	r3, #2
 8006f3e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8006f40:	69fa      	ldr	r2, [r7, #28]
 8006f42:	69bb      	ldr	r3, [r7, #24]
 8006f44:	429a      	cmp	r2, r3
 8006f46:	d901      	bls.n	8006f4c <create_chain+0x88>
 8006f48:	2300      	movs	r3, #0
 8006f4a:	e04f      	b.n	8006fec <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8006f4c:	69f9      	ldr	r1, [r7, #28]
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	f7ff fd63 	bl	8006a1a <get_fat>
 8006f54:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d00e      	beq.n	8006f7a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	2b01      	cmp	r3, #1
 8006f60:	d003      	beq.n	8006f6a <create_chain+0xa6>
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f68:	d101      	bne.n	8006f6e <create_chain+0xaa>
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	e03e      	b.n	8006fec <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8006f6e:	69fa      	ldr	r2, [r7, #28]
 8006f70:	69bb      	ldr	r3, [r7, #24]
 8006f72:	429a      	cmp	r2, r3
 8006f74:	d1da      	bne.n	8006f2c <create_chain+0x68>
 8006f76:	2300      	movs	r3, #0
 8006f78:	e038      	b.n	8006fec <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8006f7a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8006f7c:	f04f 32ff 	mov.w	r2, #4294967295
 8006f80:	69f9      	ldr	r1, [r7, #28]
 8006f82:	6938      	ldr	r0, [r7, #16]
 8006f84:	f7ff fe1d 	bl	8006bc2 <put_fat>
 8006f88:	4603      	mov	r3, r0
 8006f8a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8006f8c:	7dfb      	ldrb	r3, [r7, #23]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d109      	bne.n	8006fa6 <create_chain+0xe2>
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d006      	beq.n	8006fa6 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8006f98:	69fa      	ldr	r2, [r7, #28]
 8006f9a:	6839      	ldr	r1, [r7, #0]
 8006f9c:	6938      	ldr	r0, [r7, #16]
 8006f9e:	f7ff fe10 	bl	8006bc2 <put_fat>
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8006fa6:	7dfb      	ldrb	r3, [r7, #23]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d116      	bne.n	8006fda <create_chain+0x116>
		fs->last_clst = ncl;
 8006fac:	693b      	ldr	r3, [r7, #16]
 8006fae:	69fa      	ldr	r2, [r7, #28]
 8006fb0:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8006fb2:	693b      	ldr	r3, [r7, #16]
 8006fb4:	695a      	ldr	r2, [r3, #20]
 8006fb6:	693b      	ldr	r3, [r7, #16]
 8006fb8:	699b      	ldr	r3, [r3, #24]
 8006fba:	3b02      	subs	r3, #2
 8006fbc:	429a      	cmp	r2, r3
 8006fbe:	d804      	bhi.n	8006fca <create_chain+0x106>
 8006fc0:	693b      	ldr	r3, [r7, #16]
 8006fc2:	695b      	ldr	r3, [r3, #20]
 8006fc4:	1e5a      	subs	r2, r3, #1
 8006fc6:	693b      	ldr	r3, [r7, #16]
 8006fc8:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8006fca:	693b      	ldr	r3, [r7, #16]
 8006fcc:	791b      	ldrb	r3, [r3, #4]
 8006fce:	f043 0301 	orr.w	r3, r3, #1
 8006fd2:	b2da      	uxtb	r2, r3
 8006fd4:	693b      	ldr	r3, [r7, #16]
 8006fd6:	711a      	strb	r2, [r3, #4]
 8006fd8:	e007      	b.n	8006fea <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8006fda:	7dfb      	ldrb	r3, [r7, #23]
 8006fdc:	2b01      	cmp	r3, #1
 8006fde:	d102      	bne.n	8006fe6 <create_chain+0x122>
 8006fe0:	f04f 33ff 	mov.w	r3, #4294967295
 8006fe4:	e000      	b.n	8006fe8 <create_chain+0x124>
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8006fea:	69fb      	ldr	r3, [r7, #28]
}
 8006fec:	4618      	mov	r0, r3
 8006fee:	3720      	adds	r7, #32
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	bd80      	pop	{r7, pc}

08006ff4 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b087      	sub	sp, #28
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
 8006ffc:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007008:	3304      	adds	r3, #4
 800700a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	899b      	ldrh	r3, [r3, #12]
 8007010:	461a      	mov	r2, r3
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	fbb3 f3f2 	udiv	r3, r3, r2
 8007018:	68fa      	ldr	r2, [r7, #12]
 800701a:	8952      	ldrh	r2, [r2, #10]
 800701c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007020:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007022:	693b      	ldr	r3, [r7, #16]
 8007024:	1d1a      	adds	r2, r3, #4
 8007026:	613a      	str	r2, [r7, #16]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d101      	bne.n	8007036 <clmt_clust+0x42>
 8007032:	2300      	movs	r3, #0
 8007034:	e010      	b.n	8007058 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8007036:	697a      	ldr	r2, [r7, #20]
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	429a      	cmp	r2, r3
 800703c:	d307      	bcc.n	800704e <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800703e:	697a      	ldr	r2, [r7, #20]
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	1ad3      	subs	r3, r2, r3
 8007044:	617b      	str	r3, [r7, #20]
 8007046:	693b      	ldr	r3, [r7, #16]
 8007048:	3304      	adds	r3, #4
 800704a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800704c:	e7e9      	b.n	8007022 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800704e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8007050:	693b      	ldr	r3, [r7, #16]
 8007052:	681a      	ldr	r2, [r3, #0]
 8007054:	697b      	ldr	r3, [r7, #20]
 8007056:	4413      	add	r3, r2
}
 8007058:	4618      	mov	r0, r3
 800705a:	371c      	adds	r7, #28
 800705c:	46bd      	mov	sp, r7
 800705e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007062:	4770      	bx	lr

08007064 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b086      	sub	sp, #24
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
 800706c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800707a:	d204      	bcs.n	8007086 <dir_sdi+0x22>
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	f003 031f 	and.w	r3, r3, #31
 8007082:	2b00      	cmp	r3, #0
 8007084:	d001      	beq.n	800708a <dir_sdi+0x26>
		return FR_INT_ERR;
 8007086:	2302      	movs	r3, #2
 8007088:	e071      	b.n	800716e <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	683a      	ldr	r2, [r7, #0]
 800708e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	689b      	ldr	r3, [r3, #8]
 8007094:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8007096:	697b      	ldr	r3, [r7, #20]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d106      	bne.n	80070aa <dir_sdi+0x46>
 800709c:	693b      	ldr	r3, [r7, #16]
 800709e:	781b      	ldrb	r3, [r3, #0]
 80070a0:	2b02      	cmp	r3, #2
 80070a2:	d902      	bls.n	80070aa <dir_sdi+0x46>
		clst = fs->dirbase;
 80070a4:	693b      	ldr	r3, [r7, #16]
 80070a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070a8:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80070aa:	697b      	ldr	r3, [r7, #20]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d10c      	bne.n	80070ca <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	095b      	lsrs	r3, r3, #5
 80070b4:	693a      	ldr	r2, [r7, #16]
 80070b6:	8912      	ldrh	r2, [r2, #8]
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d301      	bcc.n	80070c0 <dir_sdi+0x5c>
 80070bc:	2302      	movs	r3, #2
 80070be:	e056      	b.n	800716e <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 80070c0:	693b      	ldr	r3, [r7, #16]
 80070c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	61da      	str	r2, [r3, #28]
 80070c8:	e02d      	b.n	8007126 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80070ca:	693b      	ldr	r3, [r7, #16]
 80070cc:	895b      	ldrh	r3, [r3, #10]
 80070ce:	461a      	mov	r2, r3
 80070d0:	693b      	ldr	r3, [r7, #16]
 80070d2:	899b      	ldrh	r3, [r3, #12]
 80070d4:	fb03 f302 	mul.w	r3, r3, r2
 80070d8:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80070da:	e019      	b.n	8007110 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6979      	ldr	r1, [r7, #20]
 80070e0:	4618      	mov	r0, r3
 80070e2:	f7ff fc9a 	bl	8006a1a <get_fat>
 80070e6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80070e8:	697b      	ldr	r3, [r7, #20]
 80070ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070ee:	d101      	bne.n	80070f4 <dir_sdi+0x90>
 80070f0:	2301      	movs	r3, #1
 80070f2:	e03c      	b.n	800716e <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80070f4:	697b      	ldr	r3, [r7, #20]
 80070f6:	2b01      	cmp	r3, #1
 80070f8:	d904      	bls.n	8007104 <dir_sdi+0xa0>
 80070fa:	693b      	ldr	r3, [r7, #16]
 80070fc:	699b      	ldr	r3, [r3, #24]
 80070fe:	697a      	ldr	r2, [r7, #20]
 8007100:	429a      	cmp	r2, r3
 8007102:	d301      	bcc.n	8007108 <dir_sdi+0xa4>
 8007104:	2302      	movs	r3, #2
 8007106:	e032      	b.n	800716e <dir_sdi+0x10a>
			ofs -= csz;
 8007108:	683a      	ldr	r2, [r7, #0]
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	1ad3      	subs	r3, r2, r3
 800710e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007110:	683a      	ldr	r2, [r7, #0]
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	429a      	cmp	r2, r3
 8007116:	d2e1      	bcs.n	80070dc <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8007118:	6979      	ldr	r1, [r7, #20]
 800711a:	6938      	ldr	r0, [r7, #16]
 800711c:	f7ff fc5e 	bl	80069dc <clust2sect>
 8007120:	4602      	mov	r2, r0
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	697a      	ldr	r2, [r7, #20]
 800712a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	69db      	ldr	r3, [r3, #28]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d101      	bne.n	8007138 <dir_sdi+0xd4>
 8007134:	2302      	movs	r3, #2
 8007136:	e01a      	b.n	800716e <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	69da      	ldr	r2, [r3, #28]
 800713c:	693b      	ldr	r3, [r7, #16]
 800713e:	899b      	ldrh	r3, [r3, #12]
 8007140:	4619      	mov	r1, r3
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	fbb3 f3f1 	udiv	r3, r3, r1
 8007148:	441a      	add	r2, r3
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800714e:	693b      	ldr	r3, [r7, #16]
 8007150:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	899b      	ldrh	r3, [r3, #12]
 8007158:	461a      	mov	r2, r3
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	fbb3 f0f2 	udiv	r0, r3, r2
 8007160:	fb02 f200 	mul.w	r2, r2, r0
 8007164:	1a9b      	subs	r3, r3, r2
 8007166:	18ca      	adds	r2, r1, r3
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800716c:	2300      	movs	r3, #0
}
 800716e:	4618      	mov	r0, r3
 8007170:	3718      	adds	r7, #24
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}

08007176 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8007176:	b580      	push	{r7, lr}
 8007178:	b086      	sub	sp, #24
 800717a:	af00      	add	r7, sp, #0
 800717c:	6078      	str	r0, [r7, #4]
 800717e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	695b      	ldr	r3, [r3, #20]
 800718a:	3320      	adds	r3, #32
 800718c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	69db      	ldr	r3, [r3, #28]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d003      	beq.n	800719e <dir_next+0x28>
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800719c:	d301      	bcc.n	80071a2 <dir_next+0x2c>
 800719e:	2304      	movs	r3, #4
 80071a0:	e0bb      	b.n	800731a <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	899b      	ldrh	r3, [r3, #12]
 80071a6:	461a      	mov	r2, r3
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	fbb3 f1f2 	udiv	r1, r3, r2
 80071ae:	fb02 f201 	mul.w	r2, r2, r1
 80071b2:	1a9b      	subs	r3, r3, r2
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	f040 809d 	bne.w	80072f4 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	69db      	ldr	r3, [r3, #28]
 80071be:	1c5a      	adds	r2, r3, #1
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	699b      	ldr	r3, [r3, #24]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d10b      	bne.n	80071e4 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	095b      	lsrs	r3, r3, #5
 80071d0:	68fa      	ldr	r2, [r7, #12]
 80071d2:	8912      	ldrh	r2, [r2, #8]
 80071d4:	4293      	cmp	r3, r2
 80071d6:	f0c0 808d 	bcc.w	80072f4 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2200      	movs	r2, #0
 80071de:	61da      	str	r2, [r3, #28]
 80071e0:	2304      	movs	r3, #4
 80071e2:	e09a      	b.n	800731a <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	899b      	ldrh	r3, [r3, #12]
 80071e8:	461a      	mov	r2, r3
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80071f0:	68fa      	ldr	r2, [r7, #12]
 80071f2:	8952      	ldrh	r2, [r2, #10]
 80071f4:	3a01      	subs	r2, #1
 80071f6:	4013      	ands	r3, r2
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d17b      	bne.n	80072f4 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80071fc:	687a      	ldr	r2, [r7, #4]
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	699b      	ldr	r3, [r3, #24]
 8007202:	4619      	mov	r1, r3
 8007204:	4610      	mov	r0, r2
 8007206:	f7ff fc08 	bl	8006a1a <get_fat>
 800720a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800720c:	697b      	ldr	r3, [r7, #20]
 800720e:	2b01      	cmp	r3, #1
 8007210:	d801      	bhi.n	8007216 <dir_next+0xa0>
 8007212:	2302      	movs	r3, #2
 8007214:	e081      	b.n	800731a <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8007216:	697b      	ldr	r3, [r7, #20]
 8007218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800721c:	d101      	bne.n	8007222 <dir_next+0xac>
 800721e:	2301      	movs	r3, #1
 8007220:	e07b      	b.n	800731a <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	699b      	ldr	r3, [r3, #24]
 8007226:	697a      	ldr	r2, [r7, #20]
 8007228:	429a      	cmp	r2, r3
 800722a:	d359      	bcc.n	80072e0 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d104      	bne.n	800723c <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2200      	movs	r2, #0
 8007236:	61da      	str	r2, [r3, #28]
 8007238:	2304      	movs	r3, #4
 800723a:	e06e      	b.n	800731a <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800723c:	687a      	ldr	r2, [r7, #4]
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	699b      	ldr	r3, [r3, #24]
 8007242:	4619      	mov	r1, r3
 8007244:	4610      	mov	r0, r2
 8007246:	f7ff fe3d 	bl	8006ec4 <create_chain>
 800724a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d101      	bne.n	8007256 <dir_next+0xe0>
 8007252:	2307      	movs	r3, #7
 8007254:	e061      	b.n	800731a <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	2b01      	cmp	r3, #1
 800725a:	d101      	bne.n	8007260 <dir_next+0xea>
 800725c:	2302      	movs	r3, #2
 800725e:	e05c      	b.n	800731a <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007260:	697b      	ldr	r3, [r7, #20]
 8007262:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007266:	d101      	bne.n	800726c <dir_next+0xf6>
 8007268:	2301      	movs	r3, #1
 800726a:	e056      	b.n	800731a <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800726c:	68f8      	ldr	r0, [r7, #12]
 800726e:	f7ff fad3 	bl	8006818 <sync_window>
 8007272:	4603      	mov	r3, r0
 8007274:	2b00      	cmp	r3, #0
 8007276:	d001      	beq.n	800727c <dir_next+0x106>
 8007278:	2301      	movs	r3, #1
 800727a:	e04e      	b.n	800731a <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	899b      	ldrh	r3, [r3, #12]
 8007286:	461a      	mov	r2, r3
 8007288:	2100      	movs	r1, #0
 800728a:	f7ff f8fc 	bl	8006486 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800728e:	2300      	movs	r3, #0
 8007290:	613b      	str	r3, [r7, #16]
 8007292:	6979      	ldr	r1, [r7, #20]
 8007294:	68f8      	ldr	r0, [r7, #12]
 8007296:	f7ff fba1 	bl	80069dc <clust2sect>
 800729a:	4602      	mov	r2, r0
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	631a      	str	r2, [r3, #48]	; 0x30
 80072a0:	e012      	b.n	80072c8 <dir_next+0x152>
						fs->wflag = 1;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	2201      	movs	r2, #1
 80072a6:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80072a8:	68f8      	ldr	r0, [r7, #12]
 80072aa:	f7ff fab5 	bl	8006818 <sync_window>
 80072ae:	4603      	mov	r3, r0
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d001      	beq.n	80072b8 <dir_next+0x142>
 80072b4:	2301      	movs	r3, #1
 80072b6:	e030      	b.n	800731a <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80072b8:	693b      	ldr	r3, [r7, #16]
 80072ba:	3301      	adds	r3, #1
 80072bc:	613b      	str	r3, [r7, #16]
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072c2:	1c5a      	adds	r2, r3, #1
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	631a      	str	r2, [r3, #48]	; 0x30
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	895b      	ldrh	r3, [r3, #10]
 80072cc:	461a      	mov	r2, r3
 80072ce:	693b      	ldr	r3, [r7, #16]
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d3e6      	bcc.n	80072a2 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80072d8:	693b      	ldr	r3, [r7, #16]
 80072da:	1ad2      	subs	r2, r2, r3
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	697a      	ldr	r2, [r7, #20]
 80072e4:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80072e6:	6979      	ldr	r1, [r7, #20]
 80072e8:	68f8      	ldr	r0, [r7, #12]
 80072ea:	f7ff fb77 	bl	80069dc <clust2sect>
 80072ee:	4602      	mov	r2, r0
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	68ba      	ldr	r2, [r7, #8]
 80072f8:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	899b      	ldrh	r3, [r3, #12]
 8007304:	461a      	mov	r2, r3
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	fbb3 f0f2 	udiv	r0, r3, r2
 800730c:	fb02 f200 	mul.w	r2, r2, r0
 8007310:	1a9b      	subs	r3, r3, r2
 8007312:	18ca      	adds	r2, r1, r3
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007318:	2300      	movs	r3, #0
}
 800731a:	4618      	mov	r0, r3
 800731c:	3718      	adds	r7, #24
 800731e:	46bd      	mov	sp, r7
 8007320:	bd80      	pop	{r7, pc}

08007322 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8007322:	b580      	push	{r7, lr}
 8007324:	b086      	sub	sp, #24
 8007326:	af00      	add	r7, sp, #0
 8007328:	6078      	str	r0, [r7, #4]
 800732a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8007332:	2100      	movs	r1, #0
 8007334:	6878      	ldr	r0, [r7, #4]
 8007336:	f7ff fe95 	bl	8007064 <dir_sdi>
 800733a:	4603      	mov	r3, r0
 800733c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800733e:	7dfb      	ldrb	r3, [r7, #23]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d12b      	bne.n	800739c <dir_alloc+0x7a>
		n = 0;
 8007344:	2300      	movs	r3, #0
 8007346:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	69db      	ldr	r3, [r3, #28]
 800734c:	4619      	mov	r1, r3
 800734e:	68f8      	ldr	r0, [r7, #12]
 8007350:	f7ff faa6 	bl	80068a0 <move_window>
 8007354:	4603      	mov	r3, r0
 8007356:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007358:	7dfb      	ldrb	r3, [r7, #23]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d11d      	bne.n	800739a <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6a1b      	ldr	r3, [r3, #32]
 8007362:	781b      	ldrb	r3, [r3, #0]
 8007364:	2be5      	cmp	r3, #229	; 0xe5
 8007366:	d004      	beq.n	8007372 <dir_alloc+0x50>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6a1b      	ldr	r3, [r3, #32]
 800736c:	781b      	ldrb	r3, [r3, #0]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d107      	bne.n	8007382 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8007372:	693b      	ldr	r3, [r7, #16]
 8007374:	3301      	adds	r3, #1
 8007376:	613b      	str	r3, [r7, #16]
 8007378:	693a      	ldr	r2, [r7, #16]
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	429a      	cmp	r2, r3
 800737e:	d102      	bne.n	8007386 <dir_alloc+0x64>
 8007380:	e00c      	b.n	800739c <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8007382:	2300      	movs	r3, #0
 8007384:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8007386:	2101      	movs	r1, #1
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	f7ff fef4 	bl	8007176 <dir_next>
 800738e:	4603      	mov	r3, r0
 8007390:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8007392:	7dfb      	ldrb	r3, [r7, #23]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d0d7      	beq.n	8007348 <dir_alloc+0x26>
 8007398:	e000      	b.n	800739c <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800739a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800739c:	7dfb      	ldrb	r3, [r7, #23]
 800739e:	2b04      	cmp	r3, #4
 80073a0:	d101      	bne.n	80073a6 <dir_alloc+0x84>
 80073a2:	2307      	movs	r3, #7
 80073a4:	75fb      	strb	r3, [r7, #23]
	return res;
 80073a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80073a8:	4618      	mov	r0, r3
 80073aa:	3718      	adds	r7, #24
 80073ac:	46bd      	mov	sp, r7
 80073ae:	bd80      	pop	{r7, pc}

080073b0 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b084      	sub	sp, #16
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
 80073b8:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	331a      	adds	r3, #26
 80073be:	4618      	mov	r0, r3
 80073c0:	f7fe ffbe 	bl	8006340 <ld_word>
 80073c4:	4603      	mov	r3, r0
 80073c6:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	781b      	ldrb	r3, [r3, #0]
 80073cc:	2b03      	cmp	r3, #3
 80073ce:	d109      	bne.n	80073e4 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	3314      	adds	r3, #20
 80073d4:	4618      	mov	r0, r3
 80073d6:	f7fe ffb3 	bl	8006340 <ld_word>
 80073da:	4603      	mov	r3, r0
 80073dc:	041b      	lsls	r3, r3, #16
 80073de:	68fa      	ldr	r2, [r7, #12]
 80073e0:	4313      	orrs	r3, r2
 80073e2:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80073e4:	68fb      	ldr	r3, [r7, #12]
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	3710      	adds	r7, #16
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}

080073ee <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80073ee:	b580      	push	{r7, lr}
 80073f0:	b084      	sub	sp, #16
 80073f2:	af00      	add	r7, sp, #0
 80073f4:	60f8      	str	r0, [r7, #12]
 80073f6:	60b9      	str	r1, [r7, #8]
 80073f8:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	331a      	adds	r3, #26
 80073fe:	687a      	ldr	r2, [r7, #4]
 8007400:	b292      	uxth	r2, r2
 8007402:	4611      	mov	r1, r2
 8007404:	4618      	mov	r0, r3
 8007406:	f7fe ffd6 	bl	80063b6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	781b      	ldrb	r3, [r3, #0]
 800740e:	2b03      	cmp	r3, #3
 8007410:	d109      	bne.n	8007426 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8007412:	68bb      	ldr	r3, [r7, #8]
 8007414:	f103 0214 	add.w	r2, r3, #20
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	0c1b      	lsrs	r3, r3, #16
 800741c:	b29b      	uxth	r3, r3
 800741e:	4619      	mov	r1, r3
 8007420:	4610      	mov	r0, r2
 8007422:	f7fe ffc8 	bl	80063b6 <st_word>
	}
}
 8007426:	bf00      	nop
 8007428:	3710      	adds	r7, #16
 800742a:	46bd      	mov	sp, r7
 800742c:	bd80      	pop	{r7, pc}

0800742e <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800742e:	b580      	push	{r7, lr}
 8007430:	b086      	sub	sp, #24
 8007432:	af00      	add	r7, sp, #0
 8007434:	6078      	str	r0, [r7, #4]
 8007436:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8007438:	2304      	movs	r3, #4
 800743a:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8007442:	e03c      	b.n	80074be <dir_read+0x90>
		res = move_window(fs, dp->sect);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	69db      	ldr	r3, [r3, #28]
 8007448:	4619      	mov	r1, r3
 800744a:	6938      	ldr	r0, [r7, #16]
 800744c:	f7ff fa28 	bl	80068a0 <move_window>
 8007450:	4603      	mov	r3, r0
 8007452:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007454:	7dfb      	ldrb	r3, [r7, #23]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d136      	bne.n	80074c8 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6a1b      	ldr	r3, [r3, #32]
 800745e:	781b      	ldrb	r3, [r3, #0]
 8007460:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 8007462:	7bfb      	ldrb	r3, [r7, #15]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d102      	bne.n	800746e <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8007468:	2304      	movs	r3, #4
 800746a:	75fb      	strb	r3, [r7, #23]
 800746c:	e031      	b.n	80074d2 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6a1b      	ldr	r3, [r3, #32]
 8007472:	330b      	adds	r3, #11
 8007474:	781b      	ldrb	r3, [r3, #0]
 8007476:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800747a:	73bb      	strb	r3, [r7, #14]
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	7bba      	ldrb	r2, [r7, #14]
 8007480:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8007482:	7bfb      	ldrb	r3, [r7, #15]
 8007484:	2be5      	cmp	r3, #229	; 0xe5
 8007486:	d011      	beq.n	80074ac <dir_read+0x7e>
 8007488:	7bfb      	ldrb	r3, [r7, #15]
 800748a:	2b2e      	cmp	r3, #46	; 0x2e
 800748c:	d00e      	beq.n	80074ac <dir_read+0x7e>
 800748e:	7bbb      	ldrb	r3, [r7, #14]
 8007490:	2b0f      	cmp	r3, #15
 8007492:	d00b      	beq.n	80074ac <dir_read+0x7e>
 8007494:	7bbb      	ldrb	r3, [r7, #14]
 8007496:	f023 0320 	bic.w	r3, r3, #32
 800749a:	2b08      	cmp	r3, #8
 800749c:	bf0c      	ite	eq
 800749e:	2301      	moveq	r3, #1
 80074a0:	2300      	movne	r3, #0
 80074a2:	b2db      	uxtb	r3, r3
 80074a4:	461a      	mov	r2, r3
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d00f      	beq.n	80074cc <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 80074ac:	2100      	movs	r1, #0
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f7ff fe61 	bl	8007176 <dir_next>
 80074b4:	4603      	mov	r3, r0
 80074b6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80074b8:	7dfb      	ldrb	r3, [r7, #23]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d108      	bne.n	80074d0 <dir_read+0xa2>
	while (dp->sect) {
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	69db      	ldr	r3, [r3, #28]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d1be      	bne.n	8007444 <dir_read+0x16>
 80074c6:	e004      	b.n	80074d2 <dir_read+0xa4>
		if (res != FR_OK) break;
 80074c8:	bf00      	nop
 80074ca:	e002      	b.n	80074d2 <dir_read+0xa4>
				break;
 80074cc:	bf00      	nop
 80074ce:	e000      	b.n	80074d2 <dir_read+0xa4>
		if (res != FR_OK) break;
 80074d0:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 80074d2:	7dfb      	ldrb	r3, [r7, #23]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d002      	beq.n	80074de <dir_read+0xb0>
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2200      	movs	r2, #0
 80074dc:	61da      	str	r2, [r3, #28]
	return res;
 80074de:	7dfb      	ldrb	r3, [r7, #23]
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	3718      	adds	r7, #24
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}

080074e8 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b086      	sub	sp, #24
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80074f6:	2100      	movs	r1, #0
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	f7ff fdb3 	bl	8007064 <dir_sdi>
 80074fe:	4603      	mov	r3, r0
 8007500:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8007502:	7dfb      	ldrb	r3, [r7, #23]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d001      	beq.n	800750c <dir_find+0x24>
 8007508:	7dfb      	ldrb	r3, [r7, #23]
 800750a:	e03e      	b.n	800758a <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	69db      	ldr	r3, [r3, #28]
 8007510:	4619      	mov	r1, r3
 8007512:	6938      	ldr	r0, [r7, #16]
 8007514:	f7ff f9c4 	bl	80068a0 <move_window>
 8007518:	4603      	mov	r3, r0
 800751a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800751c:	7dfb      	ldrb	r3, [r7, #23]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d12f      	bne.n	8007582 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6a1b      	ldr	r3, [r3, #32]
 8007526:	781b      	ldrb	r3, [r3, #0]
 8007528:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800752a:	7bfb      	ldrb	r3, [r7, #15]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d102      	bne.n	8007536 <dir_find+0x4e>
 8007530:	2304      	movs	r3, #4
 8007532:	75fb      	strb	r3, [r7, #23]
 8007534:	e028      	b.n	8007588 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6a1b      	ldr	r3, [r3, #32]
 800753a:	330b      	adds	r3, #11
 800753c:	781b      	ldrb	r3, [r3, #0]
 800753e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007542:	b2da      	uxtb	r2, r3
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6a1b      	ldr	r3, [r3, #32]
 800754c:	330b      	adds	r3, #11
 800754e:	781b      	ldrb	r3, [r3, #0]
 8007550:	f003 0308 	and.w	r3, r3, #8
 8007554:	2b00      	cmp	r3, #0
 8007556:	d10a      	bne.n	800756e <dir_find+0x86>
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6a18      	ldr	r0, [r3, #32]
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	3324      	adds	r3, #36	; 0x24
 8007560:	220b      	movs	r2, #11
 8007562:	4619      	mov	r1, r3
 8007564:	f7fe ffaa 	bl	80064bc <mem_cmp>
 8007568:	4603      	mov	r3, r0
 800756a:	2b00      	cmp	r3, #0
 800756c:	d00b      	beq.n	8007586 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800756e:	2100      	movs	r1, #0
 8007570:	6878      	ldr	r0, [r7, #4]
 8007572:	f7ff fe00 	bl	8007176 <dir_next>
 8007576:	4603      	mov	r3, r0
 8007578:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800757a:	7dfb      	ldrb	r3, [r7, #23]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d0c5      	beq.n	800750c <dir_find+0x24>
 8007580:	e002      	b.n	8007588 <dir_find+0xa0>
		if (res != FR_OK) break;
 8007582:	bf00      	nop
 8007584:	e000      	b.n	8007588 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007586:	bf00      	nop

	return res;
 8007588:	7dfb      	ldrb	r3, [r7, #23]
}
 800758a:	4618      	mov	r0, r3
 800758c:	3718      	adds	r7, #24
 800758e:	46bd      	mov	sp, r7
 8007590:	bd80      	pop	{r7, pc}

08007592 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8007592:	b580      	push	{r7, lr}
 8007594:	b084      	sub	sp, #16
 8007596:	af00      	add	r7, sp, #0
 8007598:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80075a0:	2101      	movs	r1, #1
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f7ff febd 	bl	8007322 <dir_alloc>
 80075a8:	4603      	mov	r3, r0
 80075aa:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80075ac:	7bfb      	ldrb	r3, [r7, #15]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d11c      	bne.n	80075ec <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	69db      	ldr	r3, [r3, #28]
 80075b6:	4619      	mov	r1, r3
 80075b8:	68b8      	ldr	r0, [r7, #8]
 80075ba:	f7ff f971 	bl	80068a0 <move_window>
 80075be:	4603      	mov	r3, r0
 80075c0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80075c2:	7bfb      	ldrb	r3, [r7, #15]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d111      	bne.n	80075ec <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6a1b      	ldr	r3, [r3, #32]
 80075cc:	2220      	movs	r2, #32
 80075ce:	2100      	movs	r1, #0
 80075d0:	4618      	mov	r0, r3
 80075d2:	f7fe ff58 	bl	8006486 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6a18      	ldr	r0, [r3, #32]
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	3324      	adds	r3, #36	; 0x24
 80075de:	220b      	movs	r2, #11
 80075e0:	4619      	mov	r1, r3
 80075e2:	f7fe ff2f 	bl	8006444 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	2201      	movs	r2, #1
 80075ea:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80075ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80075ee:	4618      	mov	r0, r3
 80075f0:	3710      	adds	r7, #16
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}

080075f6 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 80075f6:	b580      	push	{r7, lr}
 80075f8:	b086      	sub	sp, #24
 80075fa:	af00      	add	r7, sp, #0
 80075fc:	6078      	str	r0, [r7, #4]
 80075fe:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	2200      	movs	r2, #0
 8007604:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	69db      	ldr	r3, [r3, #28]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d04e      	beq.n	80076ac <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 800760e:	2300      	movs	r3, #0
 8007610:	613b      	str	r3, [r7, #16]
 8007612:	693b      	ldr	r3, [r7, #16]
 8007614:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 8007616:	e021      	b.n	800765c <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	6a1a      	ldr	r2, [r3, #32]
 800761c:	697b      	ldr	r3, [r7, #20]
 800761e:	1c59      	adds	r1, r3, #1
 8007620:	6179      	str	r1, [r7, #20]
 8007622:	4413      	add	r3, r2
 8007624:	781b      	ldrb	r3, [r3, #0]
 8007626:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 8007628:	7bfb      	ldrb	r3, [r7, #15]
 800762a:	2b20      	cmp	r3, #32
 800762c:	d100      	bne.n	8007630 <get_fileinfo+0x3a>
 800762e:	e015      	b.n	800765c <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8007630:	7bfb      	ldrb	r3, [r7, #15]
 8007632:	2b05      	cmp	r3, #5
 8007634:	d101      	bne.n	800763a <get_fileinfo+0x44>
 8007636:	23e5      	movs	r3, #229	; 0xe5
 8007638:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 800763a:	697b      	ldr	r3, [r7, #20]
 800763c:	2b09      	cmp	r3, #9
 800763e:	d106      	bne.n	800764e <get_fileinfo+0x58>
 8007640:	693b      	ldr	r3, [r7, #16]
 8007642:	1c5a      	adds	r2, r3, #1
 8007644:	613a      	str	r2, [r7, #16]
 8007646:	683a      	ldr	r2, [r7, #0]
 8007648:	4413      	add	r3, r2
 800764a:	222e      	movs	r2, #46	; 0x2e
 800764c:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 800764e:	693b      	ldr	r3, [r7, #16]
 8007650:	1c5a      	adds	r2, r3, #1
 8007652:	613a      	str	r2, [r7, #16]
 8007654:	683a      	ldr	r2, [r7, #0]
 8007656:	4413      	add	r3, r2
 8007658:	7bfa      	ldrb	r2, [r7, #15]
 800765a:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 800765c:	697b      	ldr	r3, [r7, #20]
 800765e:	2b0a      	cmp	r3, #10
 8007660:	d9da      	bls.n	8007618 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 8007662:	683a      	ldr	r2, [r7, #0]
 8007664:	693b      	ldr	r3, [r7, #16]
 8007666:	4413      	add	r3, r2
 8007668:	3309      	adds	r3, #9
 800766a:	2200      	movs	r2, #0
 800766c:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6a1b      	ldr	r3, [r3, #32]
 8007672:	7ada      	ldrb	r2, [r3, #11]
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6a1b      	ldr	r3, [r3, #32]
 800767c:	331c      	adds	r3, #28
 800767e:	4618      	mov	r0, r3
 8007680:	f7fe fe76 	bl	8006370 <ld_dword>
 8007684:	4602      	mov	r2, r0
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6a1b      	ldr	r3, [r3, #32]
 800768e:	3316      	adds	r3, #22
 8007690:	4618      	mov	r0, r3
 8007692:	f7fe fe6d 	bl	8006370 <ld_dword>
 8007696:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	b29a      	uxth	r2, r3
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	80da      	strh	r2, [r3, #6]
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	0c1b      	lsrs	r3, r3, #16
 80076a4:	b29a      	uxth	r2, r3
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	809a      	strh	r2, [r3, #4]
 80076aa:	e000      	b.n	80076ae <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80076ac:	bf00      	nop
}
 80076ae:	3718      	adds	r7, #24
 80076b0:	46bd      	mov	sp, r7
 80076b2:	bd80      	pop	{r7, pc}

080076b4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b088      	sub	sp, #32
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
 80076bc:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	60fb      	str	r3, [r7, #12]
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	3324      	adds	r3, #36	; 0x24
 80076c8:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80076ca:	220b      	movs	r2, #11
 80076cc:	2120      	movs	r1, #32
 80076ce:	68b8      	ldr	r0, [r7, #8]
 80076d0:	f7fe fed9 	bl	8006486 <mem_set>
	si = i = 0; ni = 8;
 80076d4:	2300      	movs	r3, #0
 80076d6:	613b      	str	r3, [r7, #16]
 80076d8:	693b      	ldr	r3, [r7, #16]
 80076da:	61fb      	str	r3, [r7, #28]
 80076dc:	2308      	movs	r3, #8
 80076de:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80076e0:	69fb      	ldr	r3, [r7, #28]
 80076e2:	1c5a      	adds	r2, r3, #1
 80076e4:	61fa      	str	r2, [r7, #28]
 80076e6:	68fa      	ldr	r2, [r7, #12]
 80076e8:	4413      	add	r3, r2
 80076ea:	781b      	ldrb	r3, [r3, #0]
 80076ec:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80076ee:	7efb      	ldrb	r3, [r7, #27]
 80076f0:	2b20      	cmp	r3, #32
 80076f2:	d94e      	bls.n	8007792 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80076f4:	7efb      	ldrb	r3, [r7, #27]
 80076f6:	2b2f      	cmp	r3, #47	; 0x2f
 80076f8:	d006      	beq.n	8007708 <create_name+0x54>
 80076fa:	7efb      	ldrb	r3, [r7, #27]
 80076fc:	2b5c      	cmp	r3, #92	; 0x5c
 80076fe:	d110      	bne.n	8007722 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007700:	e002      	b.n	8007708 <create_name+0x54>
 8007702:	69fb      	ldr	r3, [r7, #28]
 8007704:	3301      	adds	r3, #1
 8007706:	61fb      	str	r3, [r7, #28]
 8007708:	68fa      	ldr	r2, [r7, #12]
 800770a:	69fb      	ldr	r3, [r7, #28]
 800770c:	4413      	add	r3, r2
 800770e:	781b      	ldrb	r3, [r3, #0]
 8007710:	2b2f      	cmp	r3, #47	; 0x2f
 8007712:	d0f6      	beq.n	8007702 <create_name+0x4e>
 8007714:	68fa      	ldr	r2, [r7, #12]
 8007716:	69fb      	ldr	r3, [r7, #28]
 8007718:	4413      	add	r3, r2
 800771a:	781b      	ldrb	r3, [r3, #0]
 800771c:	2b5c      	cmp	r3, #92	; 0x5c
 800771e:	d0f0      	beq.n	8007702 <create_name+0x4e>
			break;
 8007720:	e038      	b.n	8007794 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8007722:	7efb      	ldrb	r3, [r7, #27]
 8007724:	2b2e      	cmp	r3, #46	; 0x2e
 8007726:	d003      	beq.n	8007730 <create_name+0x7c>
 8007728:	693a      	ldr	r2, [r7, #16]
 800772a:	697b      	ldr	r3, [r7, #20]
 800772c:	429a      	cmp	r2, r3
 800772e:	d30c      	bcc.n	800774a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8007730:	697b      	ldr	r3, [r7, #20]
 8007732:	2b0b      	cmp	r3, #11
 8007734:	d002      	beq.n	800773c <create_name+0x88>
 8007736:	7efb      	ldrb	r3, [r7, #27]
 8007738:	2b2e      	cmp	r3, #46	; 0x2e
 800773a:	d001      	beq.n	8007740 <create_name+0x8c>
 800773c:	2306      	movs	r3, #6
 800773e:	e044      	b.n	80077ca <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8007740:	2308      	movs	r3, #8
 8007742:	613b      	str	r3, [r7, #16]
 8007744:	230b      	movs	r3, #11
 8007746:	617b      	str	r3, [r7, #20]
			continue;
 8007748:	e022      	b.n	8007790 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800774a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800774e:	2b00      	cmp	r3, #0
 8007750:	da04      	bge.n	800775c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8007752:	7efb      	ldrb	r3, [r7, #27]
 8007754:	3b80      	subs	r3, #128	; 0x80
 8007756:	4a1f      	ldr	r2, [pc, #124]	; (80077d4 <create_name+0x120>)
 8007758:	5cd3      	ldrb	r3, [r2, r3]
 800775a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800775c:	7efb      	ldrb	r3, [r7, #27]
 800775e:	4619      	mov	r1, r3
 8007760:	481d      	ldr	r0, [pc, #116]	; (80077d8 <create_name+0x124>)
 8007762:	f7fe fed2 	bl	800650a <chk_chr>
 8007766:	4603      	mov	r3, r0
 8007768:	2b00      	cmp	r3, #0
 800776a:	d001      	beq.n	8007770 <create_name+0xbc>
 800776c:	2306      	movs	r3, #6
 800776e:	e02c      	b.n	80077ca <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8007770:	7efb      	ldrb	r3, [r7, #27]
 8007772:	2b60      	cmp	r3, #96	; 0x60
 8007774:	d905      	bls.n	8007782 <create_name+0xce>
 8007776:	7efb      	ldrb	r3, [r7, #27]
 8007778:	2b7a      	cmp	r3, #122	; 0x7a
 800777a:	d802      	bhi.n	8007782 <create_name+0xce>
 800777c:	7efb      	ldrb	r3, [r7, #27]
 800777e:	3b20      	subs	r3, #32
 8007780:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8007782:	693b      	ldr	r3, [r7, #16]
 8007784:	1c5a      	adds	r2, r3, #1
 8007786:	613a      	str	r2, [r7, #16]
 8007788:	68ba      	ldr	r2, [r7, #8]
 800778a:	4413      	add	r3, r2
 800778c:	7efa      	ldrb	r2, [r7, #27]
 800778e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8007790:	e7a6      	b.n	80076e0 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007792:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8007794:	68fa      	ldr	r2, [r7, #12]
 8007796:	69fb      	ldr	r3, [r7, #28]
 8007798:	441a      	add	r2, r3
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800779e:	693b      	ldr	r3, [r7, #16]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d101      	bne.n	80077a8 <create_name+0xf4>
 80077a4:	2306      	movs	r3, #6
 80077a6:	e010      	b.n	80077ca <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	781b      	ldrb	r3, [r3, #0]
 80077ac:	2be5      	cmp	r3, #229	; 0xe5
 80077ae:	d102      	bne.n	80077b6 <create_name+0x102>
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	2205      	movs	r2, #5
 80077b4:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80077b6:	7efb      	ldrb	r3, [r7, #27]
 80077b8:	2b20      	cmp	r3, #32
 80077ba:	d801      	bhi.n	80077c0 <create_name+0x10c>
 80077bc:	2204      	movs	r2, #4
 80077be:	e000      	b.n	80077c2 <create_name+0x10e>
 80077c0:	2200      	movs	r2, #0
 80077c2:	68bb      	ldr	r3, [r7, #8]
 80077c4:	330b      	adds	r3, #11
 80077c6:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80077c8:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	3720      	adds	r7, #32
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bd80      	pop	{r7, pc}
 80077d2:	bf00      	nop
 80077d4:	0800a804 	.word	0x0800a804
 80077d8:	0800a78c 	.word	0x0800a78c

080077dc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b086      	sub	sp, #24
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
 80077e4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80077ea:	693b      	ldr	r3, [r7, #16]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80077f0:	e002      	b.n	80077f8 <follow_path+0x1c>
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	3301      	adds	r3, #1
 80077f6:	603b      	str	r3, [r7, #0]
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	781b      	ldrb	r3, [r3, #0]
 80077fc:	2b2f      	cmp	r3, #47	; 0x2f
 80077fe:	d0f8      	beq.n	80077f2 <follow_path+0x16>
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	781b      	ldrb	r3, [r3, #0]
 8007804:	2b5c      	cmp	r3, #92	; 0x5c
 8007806:	d0f4      	beq.n	80077f2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8007808:	693b      	ldr	r3, [r7, #16]
 800780a:	2200      	movs	r2, #0
 800780c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	781b      	ldrb	r3, [r3, #0]
 8007812:	2b1f      	cmp	r3, #31
 8007814:	d80a      	bhi.n	800782c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2280      	movs	r2, #128	; 0x80
 800781a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800781e:	2100      	movs	r1, #0
 8007820:	6878      	ldr	r0, [r7, #4]
 8007822:	f7ff fc1f 	bl	8007064 <dir_sdi>
 8007826:	4603      	mov	r3, r0
 8007828:	75fb      	strb	r3, [r7, #23]
 800782a:	e048      	b.n	80078be <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800782c:	463b      	mov	r3, r7
 800782e:	4619      	mov	r1, r3
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f7ff ff3f 	bl	80076b4 <create_name>
 8007836:	4603      	mov	r3, r0
 8007838:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800783a:	7dfb      	ldrb	r3, [r7, #23]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d139      	bne.n	80078b4 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f7ff fe51 	bl	80074e8 <dir_find>
 8007846:	4603      	mov	r3, r0
 8007848:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007850:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8007852:	7dfb      	ldrb	r3, [r7, #23]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d00a      	beq.n	800786e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007858:	7dfb      	ldrb	r3, [r7, #23]
 800785a:	2b04      	cmp	r3, #4
 800785c:	d12c      	bne.n	80078b8 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800785e:	7afb      	ldrb	r3, [r7, #11]
 8007860:	f003 0304 	and.w	r3, r3, #4
 8007864:	2b00      	cmp	r3, #0
 8007866:	d127      	bne.n	80078b8 <follow_path+0xdc>
 8007868:	2305      	movs	r3, #5
 800786a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800786c:	e024      	b.n	80078b8 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800786e:	7afb      	ldrb	r3, [r7, #11]
 8007870:	f003 0304 	and.w	r3, r3, #4
 8007874:	2b00      	cmp	r3, #0
 8007876:	d121      	bne.n	80078bc <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007878:	693b      	ldr	r3, [r7, #16]
 800787a:	799b      	ldrb	r3, [r3, #6]
 800787c:	f003 0310 	and.w	r3, r3, #16
 8007880:	2b00      	cmp	r3, #0
 8007882:	d102      	bne.n	800788a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8007884:	2305      	movs	r3, #5
 8007886:	75fb      	strb	r3, [r7, #23]
 8007888:	e019      	b.n	80078be <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	695b      	ldr	r3, [r3, #20]
 8007894:	68fa      	ldr	r2, [r7, #12]
 8007896:	8992      	ldrh	r2, [r2, #12]
 8007898:	fbb3 f0f2 	udiv	r0, r3, r2
 800789c:	fb02 f200 	mul.w	r2, r2, r0
 80078a0:	1a9b      	subs	r3, r3, r2
 80078a2:	440b      	add	r3, r1
 80078a4:	4619      	mov	r1, r3
 80078a6:	68f8      	ldr	r0, [r7, #12]
 80078a8:	f7ff fd82 	bl	80073b0 <ld_clust>
 80078ac:	4602      	mov	r2, r0
 80078ae:	693b      	ldr	r3, [r7, #16]
 80078b0:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80078b2:	e7bb      	b.n	800782c <follow_path+0x50>
			if (res != FR_OK) break;
 80078b4:	bf00      	nop
 80078b6:	e002      	b.n	80078be <follow_path+0xe2>
				break;
 80078b8:	bf00      	nop
 80078ba:	e000      	b.n	80078be <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80078bc:	bf00      	nop
			}
		}
	}

	return res;
 80078be:	7dfb      	ldrb	r3, [r7, #23]
}
 80078c0:	4618      	mov	r0, r3
 80078c2:	3718      	adds	r7, #24
 80078c4:	46bd      	mov	sp, r7
 80078c6:	bd80      	pop	{r7, pc}

080078c8 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80078c8:	b480      	push	{r7}
 80078ca:	b087      	sub	sp, #28
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80078d0:	f04f 33ff 	mov.w	r3, #4294967295
 80078d4:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d031      	beq.n	8007942 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	617b      	str	r3, [r7, #20]
 80078e4:	e002      	b.n	80078ec <get_ldnumber+0x24>
 80078e6:	697b      	ldr	r3, [r7, #20]
 80078e8:	3301      	adds	r3, #1
 80078ea:	617b      	str	r3, [r7, #20]
 80078ec:	697b      	ldr	r3, [r7, #20]
 80078ee:	781b      	ldrb	r3, [r3, #0]
 80078f0:	2b20      	cmp	r3, #32
 80078f2:	d903      	bls.n	80078fc <get_ldnumber+0x34>
 80078f4:	697b      	ldr	r3, [r7, #20]
 80078f6:	781b      	ldrb	r3, [r3, #0]
 80078f8:	2b3a      	cmp	r3, #58	; 0x3a
 80078fa:	d1f4      	bne.n	80078e6 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80078fc:	697b      	ldr	r3, [r7, #20]
 80078fe:	781b      	ldrb	r3, [r3, #0]
 8007900:	2b3a      	cmp	r3, #58	; 0x3a
 8007902:	d11c      	bne.n	800793e <get_ldnumber+0x76>
			tp = *path;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	1c5a      	adds	r2, r3, #1
 800790e:	60fa      	str	r2, [r7, #12]
 8007910:	781b      	ldrb	r3, [r3, #0]
 8007912:	3b30      	subs	r3, #48	; 0x30
 8007914:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007916:	68bb      	ldr	r3, [r7, #8]
 8007918:	2b09      	cmp	r3, #9
 800791a:	d80e      	bhi.n	800793a <get_ldnumber+0x72>
 800791c:	68fa      	ldr	r2, [r7, #12]
 800791e:	697b      	ldr	r3, [r7, #20]
 8007920:	429a      	cmp	r2, r3
 8007922:	d10a      	bne.n	800793a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007924:	68bb      	ldr	r3, [r7, #8]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d107      	bne.n	800793a <get_ldnumber+0x72>
					vol = (int)i;
 800792a:	68bb      	ldr	r3, [r7, #8]
 800792c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800792e:	697b      	ldr	r3, [r7, #20]
 8007930:	3301      	adds	r3, #1
 8007932:	617b      	str	r3, [r7, #20]
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	697a      	ldr	r2, [r7, #20]
 8007938:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800793a:	693b      	ldr	r3, [r7, #16]
 800793c:	e002      	b.n	8007944 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800793e:	2300      	movs	r3, #0
 8007940:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8007942:	693b      	ldr	r3, [r7, #16]
}
 8007944:	4618      	mov	r0, r3
 8007946:	371c      	adds	r7, #28
 8007948:	46bd      	mov	sp, r7
 800794a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794e:	4770      	bx	lr

08007950 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b082      	sub	sp, #8
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
 8007958:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2200      	movs	r2, #0
 800795e:	70da      	strb	r2, [r3, #3]
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f04f 32ff 	mov.w	r2, #4294967295
 8007966:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007968:	6839      	ldr	r1, [r7, #0]
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f7fe ff98 	bl	80068a0 <move_window>
 8007970:	4603      	mov	r3, r0
 8007972:	2b00      	cmp	r3, #0
 8007974:	d001      	beq.n	800797a <check_fs+0x2a>
 8007976:	2304      	movs	r3, #4
 8007978:	e038      	b.n	80079ec <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	3334      	adds	r3, #52	; 0x34
 800797e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007982:	4618      	mov	r0, r3
 8007984:	f7fe fcdc 	bl	8006340 <ld_word>
 8007988:	4603      	mov	r3, r0
 800798a:	461a      	mov	r2, r3
 800798c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007990:	429a      	cmp	r2, r3
 8007992:	d001      	beq.n	8007998 <check_fs+0x48>
 8007994:	2303      	movs	r3, #3
 8007996:	e029      	b.n	80079ec <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800799e:	2be9      	cmp	r3, #233	; 0xe9
 80079a0:	d009      	beq.n	80079b6 <check_fs+0x66>
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80079a8:	2beb      	cmp	r3, #235	; 0xeb
 80079aa:	d11e      	bne.n	80079ea <check_fs+0x9a>
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80079b2:	2b90      	cmp	r3, #144	; 0x90
 80079b4:	d119      	bne.n	80079ea <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	3334      	adds	r3, #52	; 0x34
 80079ba:	3336      	adds	r3, #54	; 0x36
 80079bc:	4618      	mov	r0, r3
 80079be:	f7fe fcd7 	bl	8006370 <ld_dword>
 80079c2:	4603      	mov	r3, r0
 80079c4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80079c8:	4a0a      	ldr	r2, [pc, #40]	; (80079f4 <check_fs+0xa4>)
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d101      	bne.n	80079d2 <check_fs+0x82>
 80079ce:	2300      	movs	r3, #0
 80079d0:	e00c      	b.n	80079ec <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	3334      	adds	r3, #52	; 0x34
 80079d6:	3352      	adds	r3, #82	; 0x52
 80079d8:	4618      	mov	r0, r3
 80079da:	f7fe fcc9 	bl	8006370 <ld_dword>
 80079de:	4603      	mov	r3, r0
 80079e0:	4a05      	ldr	r2, [pc, #20]	; (80079f8 <check_fs+0xa8>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d101      	bne.n	80079ea <check_fs+0x9a>
 80079e6:	2300      	movs	r3, #0
 80079e8:	e000      	b.n	80079ec <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80079ea:	2302      	movs	r3, #2
}
 80079ec:	4618      	mov	r0, r3
 80079ee:	3708      	adds	r7, #8
 80079f0:	46bd      	mov	sp, r7
 80079f2:	bd80      	pop	{r7, pc}
 80079f4:	00544146 	.word	0x00544146
 80079f8:	33544146 	.word	0x33544146

080079fc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b096      	sub	sp, #88	; 0x58
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	60f8      	str	r0, [r7, #12]
 8007a04:	60b9      	str	r1, [r7, #8]
 8007a06:	4613      	mov	r3, r2
 8007a08:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8007a0a:	68bb      	ldr	r3, [r7, #8]
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007a10:	68f8      	ldr	r0, [r7, #12]
 8007a12:	f7ff ff59 	bl	80078c8 <get_ldnumber>
 8007a16:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007a18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	da01      	bge.n	8007a22 <find_volume+0x26>
 8007a1e:	230b      	movs	r3, #11
 8007a20:	e265      	b.n	8007eee <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007a22:	4ab0      	ldr	r2, [pc, #704]	; (8007ce4 <find_volume+0x2e8>)
 8007a24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a2a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007a2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d101      	bne.n	8007a36 <find_volume+0x3a>
 8007a32:	230c      	movs	r3, #12
 8007a34:	e25b      	b.n	8007eee <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8007a36:	68bb      	ldr	r3, [r7, #8]
 8007a38:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007a3a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8007a3c:	79fb      	ldrb	r3, [r7, #7]
 8007a3e:	f023 0301 	bic.w	r3, r3, #1
 8007a42:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007a44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a46:	781b      	ldrb	r3, [r3, #0]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d01a      	beq.n	8007a82 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8007a4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a4e:	785b      	ldrb	r3, [r3, #1]
 8007a50:	4618      	mov	r0, r3
 8007a52:	f7fe fc07 	bl	8006264 <disk_status>
 8007a56:	4603      	mov	r3, r0
 8007a58:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007a5c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007a60:	f003 0301 	and.w	r3, r3, #1
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d10c      	bne.n	8007a82 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8007a68:	79fb      	ldrb	r3, [r7, #7]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d007      	beq.n	8007a7e <find_volume+0x82>
 8007a6e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007a72:	f003 0304 	and.w	r3, r3, #4
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d001      	beq.n	8007a7e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8007a7a:	230a      	movs	r3, #10
 8007a7c:	e237      	b.n	8007eee <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8007a7e:	2300      	movs	r3, #0
 8007a80:	e235      	b.n	8007eee <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8007a82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a84:	2200      	movs	r2, #0
 8007a86:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007a88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a8a:	b2da      	uxtb	r2, r3
 8007a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a8e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007a90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a92:	785b      	ldrb	r3, [r3, #1]
 8007a94:	4618      	mov	r0, r3
 8007a96:	f7fe fbf7 	bl	8006288 <disk_initialize>
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007aa0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007aa4:	f003 0301 	and.w	r3, r3, #1
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d001      	beq.n	8007ab0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007aac:	2303      	movs	r3, #3
 8007aae:	e21e      	b.n	8007eee <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007ab0:	79fb      	ldrb	r3, [r7, #7]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d007      	beq.n	8007ac6 <find_volume+0xca>
 8007ab6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007aba:	f003 0304 	and.w	r3, r3, #4
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d001      	beq.n	8007ac6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8007ac2:	230a      	movs	r3, #10
 8007ac4:	e213      	b.n	8007eee <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8007ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ac8:	7858      	ldrb	r0, [r3, #1]
 8007aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007acc:	330c      	adds	r3, #12
 8007ace:	461a      	mov	r2, r3
 8007ad0:	2102      	movs	r1, #2
 8007ad2:	f7fe fc1d 	bl	8006310 <disk_ioctl>
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d001      	beq.n	8007ae0 <find_volume+0xe4>
 8007adc:	2301      	movs	r3, #1
 8007ade:	e206      	b.n	8007eee <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8007ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ae2:	899b      	ldrh	r3, [r3, #12]
 8007ae4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ae8:	d80d      	bhi.n	8007b06 <find_volume+0x10a>
 8007aea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aec:	899b      	ldrh	r3, [r3, #12]
 8007aee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007af2:	d308      	bcc.n	8007b06 <find_volume+0x10a>
 8007af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007af6:	899b      	ldrh	r3, [r3, #12]
 8007af8:	461a      	mov	r2, r3
 8007afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007afc:	899b      	ldrh	r3, [r3, #12]
 8007afe:	3b01      	subs	r3, #1
 8007b00:	4013      	ands	r3, r2
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d001      	beq.n	8007b0a <find_volume+0x10e>
 8007b06:	2301      	movs	r3, #1
 8007b08:	e1f1      	b.n	8007eee <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8007b0e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007b10:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007b12:	f7ff ff1d 	bl	8007950 <check_fs>
 8007b16:	4603      	mov	r3, r0
 8007b18:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8007b1c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007b20:	2b02      	cmp	r3, #2
 8007b22:	d14b      	bne.n	8007bbc <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007b24:	2300      	movs	r3, #0
 8007b26:	643b      	str	r3, [r7, #64]	; 0x40
 8007b28:	e01f      	b.n	8007b6a <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8007b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b2c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007b30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b32:	011b      	lsls	r3, r3, #4
 8007b34:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8007b38:	4413      	add	r3, r2
 8007b3a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b3e:	3304      	adds	r3, #4
 8007b40:	781b      	ldrb	r3, [r3, #0]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d006      	beq.n	8007b54 <find_volume+0x158>
 8007b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b48:	3308      	adds	r3, #8
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	f7fe fc10 	bl	8006370 <ld_dword>
 8007b50:	4602      	mov	r2, r0
 8007b52:	e000      	b.n	8007b56 <find_volume+0x15a>
 8007b54:	2200      	movs	r2, #0
 8007b56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b58:	009b      	lsls	r3, r3, #2
 8007b5a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8007b5e:	440b      	add	r3, r1
 8007b60:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007b64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b66:	3301      	adds	r3, #1
 8007b68:	643b      	str	r3, [r7, #64]	; 0x40
 8007b6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b6c:	2b03      	cmp	r3, #3
 8007b6e:	d9dc      	bls.n	8007b2a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8007b70:	2300      	movs	r3, #0
 8007b72:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8007b74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d002      	beq.n	8007b80 <find_volume+0x184>
 8007b7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b7c:	3b01      	subs	r3, #1
 8007b7e:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8007b80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b82:	009b      	lsls	r3, r3, #2
 8007b84:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8007b88:	4413      	add	r3, r2
 8007b8a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007b8e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8007b90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d005      	beq.n	8007ba2 <find_volume+0x1a6>
 8007b96:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007b98:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007b9a:	f7ff fed9 	bl	8007950 <check_fs>
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	e000      	b.n	8007ba4 <find_volume+0x1a8>
 8007ba2:	2303      	movs	r3, #3
 8007ba4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007ba8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007bac:	2b01      	cmp	r3, #1
 8007bae:	d905      	bls.n	8007bbc <find_volume+0x1c0>
 8007bb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bb2:	3301      	adds	r3, #1
 8007bb4:	643b      	str	r3, [r7, #64]	; 0x40
 8007bb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bb8:	2b03      	cmp	r3, #3
 8007bba:	d9e1      	bls.n	8007b80 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007bbc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007bc0:	2b04      	cmp	r3, #4
 8007bc2:	d101      	bne.n	8007bc8 <find_volume+0x1cc>
 8007bc4:	2301      	movs	r3, #1
 8007bc6:	e192      	b.n	8007eee <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007bc8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007bcc:	2b01      	cmp	r3, #1
 8007bce:	d901      	bls.n	8007bd4 <find_volume+0x1d8>
 8007bd0:	230d      	movs	r3, #13
 8007bd2:	e18c      	b.n	8007eee <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007bd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bd6:	3334      	adds	r3, #52	; 0x34
 8007bd8:	330b      	adds	r3, #11
 8007bda:	4618      	mov	r0, r3
 8007bdc:	f7fe fbb0 	bl	8006340 <ld_word>
 8007be0:	4603      	mov	r3, r0
 8007be2:	461a      	mov	r2, r3
 8007be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007be6:	899b      	ldrh	r3, [r3, #12]
 8007be8:	429a      	cmp	r2, r3
 8007bea:	d001      	beq.n	8007bf0 <find_volume+0x1f4>
 8007bec:	230d      	movs	r3, #13
 8007bee:	e17e      	b.n	8007eee <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8007bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bf2:	3334      	adds	r3, #52	; 0x34
 8007bf4:	3316      	adds	r3, #22
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	f7fe fba2 	bl	8006340 <ld_word>
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8007c00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d106      	bne.n	8007c14 <find_volume+0x218>
 8007c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c08:	3334      	adds	r3, #52	; 0x34
 8007c0a:	3324      	adds	r3, #36	; 0x24
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	f7fe fbaf 	bl	8006370 <ld_dword>
 8007c12:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8007c14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c16:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007c18:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8007c1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c1c:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8007c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c22:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007c24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c26:	789b      	ldrb	r3, [r3, #2]
 8007c28:	2b01      	cmp	r3, #1
 8007c2a:	d005      	beq.n	8007c38 <find_volume+0x23c>
 8007c2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c2e:	789b      	ldrb	r3, [r3, #2]
 8007c30:	2b02      	cmp	r3, #2
 8007c32:	d001      	beq.n	8007c38 <find_volume+0x23c>
 8007c34:	230d      	movs	r3, #13
 8007c36:	e15a      	b.n	8007eee <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8007c38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c3a:	789b      	ldrb	r3, [r3, #2]
 8007c3c:	461a      	mov	r2, r3
 8007c3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c40:	fb02 f303 	mul.w	r3, r2, r3
 8007c44:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8007c46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007c4c:	b29a      	uxth	r2, r3
 8007c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c50:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8007c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c54:	895b      	ldrh	r3, [r3, #10]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d008      	beq.n	8007c6c <find_volume+0x270>
 8007c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c5c:	895b      	ldrh	r3, [r3, #10]
 8007c5e:	461a      	mov	r2, r3
 8007c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c62:	895b      	ldrh	r3, [r3, #10]
 8007c64:	3b01      	subs	r3, #1
 8007c66:	4013      	ands	r3, r2
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d001      	beq.n	8007c70 <find_volume+0x274>
 8007c6c:	230d      	movs	r3, #13
 8007c6e:	e13e      	b.n	8007eee <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8007c70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c72:	3334      	adds	r3, #52	; 0x34
 8007c74:	3311      	adds	r3, #17
 8007c76:	4618      	mov	r0, r3
 8007c78:	f7fe fb62 	bl	8006340 <ld_word>
 8007c7c:	4603      	mov	r3, r0
 8007c7e:	461a      	mov	r2, r3
 8007c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c82:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c86:	891b      	ldrh	r3, [r3, #8]
 8007c88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007c8a:	8992      	ldrh	r2, [r2, #12]
 8007c8c:	0952      	lsrs	r2, r2, #5
 8007c8e:	b292      	uxth	r2, r2
 8007c90:	fbb3 f1f2 	udiv	r1, r3, r2
 8007c94:	fb02 f201 	mul.w	r2, r2, r1
 8007c98:	1a9b      	subs	r3, r3, r2
 8007c9a:	b29b      	uxth	r3, r3
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d001      	beq.n	8007ca4 <find_volume+0x2a8>
 8007ca0:	230d      	movs	r3, #13
 8007ca2:	e124      	b.n	8007eee <find_volume+0x4f2>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8007ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ca6:	3334      	adds	r3, #52	; 0x34
 8007ca8:	3313      	adds	r3, #19
 8007caa:	4618      	mov	r0, r3
 8007cac:	f7fe fb48 	bl	8006340 <ld_word>
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8007cb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d106      	bne.n	8007cc8 <find_volume+0x2cc>
 8007cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cbc:	3334      	adds	r3, #52	; 0x34
 8007cbe:	3320      	adds	r3, #32
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	f7fe fb55 	bl	8006370 <ld_dword>
 8007cc6:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8007cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cca:	3334      	adds	r3, #52	; 0x34
 8007ccc:	330e      	adds	r3, #14
 8007cce:	4618      	mov	r0, r3
 8007cd0:	f7fe fb36 	bl	8006340 <ld_word>
 8007cd4:	4603      	mov	r3, r0
 8007cd6:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007cd8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d104      	bne.n	8007ce8 <find_volume+0x2ec>
 8007cde:	230d      	movs	r3, #13
 8007ce0:	e105      	b.n	8007eee <find_volume+0x4f2>
 8007ce2:	bf00      	nop
 8007ce4:	200000c8 	.word	0x200000c8

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8007ce8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007cea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007cec:	4413      	add	r3, r2
 8007cee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007cf0:	8911      	ldrh	r1, [r2, #8]
 8007cf2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007cf4:	8992      	ldrh	r2, [r2, #12]
 8007cf6:	0952      	lsrs	r2, r2, #5
 8007cf8:	b292      	uxth	r2, r2
 8007cfa:	fbb1 f2f2 	udiv	r2, r1, r2
 8007cfe:	b292      	uxth	r2, r2
 8007d00:	4413      	add	r3, r2
 8007d02:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8007d04:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d08:	429a      	cmp	r2, r3
 8007d0a:	d201      	bcs.n	8007d10 <find_volume+0x314>
 8007d0c:	230d      	movs	r3, #13
 8007d0e:	e0ee      	b.n	8007eee <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8007d10:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d14:	1ad3      	subs	r3, r2, r3
 8007d16:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d18:	8952      	ldrh	r2, [r2, #10]
 8007d1a:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d1e:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d101      	bne.n	8007d2a <find_volume+0x32e>
 8007d26:	230d      	movs	r3, #13
 8007d28:	e0e1      	b.n	8007eee <find_volume+0x4f2>
		fmt = FS_FAT32;
 8007d2a:	2303      	movs	r3, #3
 8007d2c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d32:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8007d36:	4293      	cmp	r3, r2
 8007d38:	d802      	bhi.n	8007d40 <find_volume+0x344>
 8007d3a:	2302      	movs	r3, #2
 8007d3c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d42:	f640 72f5 	movw	r2, #4085	; 0xff5
 8007d46:	4293      	cmp	r3, r2
 8007d48:	d802      	bhi.n	8007d50 <find_volume+0x354>
 8007d4a:	2301      	movs	r3, #1
 8007d4c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8007d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d52:	1c9a      	adds	r2, r3, #2
 8007d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d56:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8007d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d5a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007d5c:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007d5e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007d60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d62:	441a      	add	r2, r3
 8007d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d66:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8007d68:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d6c:	441a      	add	r2, r3
 8007d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d70:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8007d72:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007d76:	2b03      	cmp	r3, #3
 8007d78:	d11e      	bne.n	8007db8 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d7c:	3334      	adds	r3, #52	; 0x34
 8007d7e:	332a      	adds	r3, #42	; 0x2a
 8007d80:	4618      	mov	r0, r3
 8007d82:	f7fe fadd 	bl	8006340 <ld_word>
 8007d86:	4603      	mov	r3, r0
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d001      	beq.n	8007d90 <find_volume+0x394>
 8007d8c:	230d      	movs	r3, #13
 8007d8e:	e0ae      	b.n	8007eee <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8007d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d92:	891b      	ldrh	r3, [r3, #8]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d001      	beq.n	8007d9c <find_volume+0x3a0>
 8007d98:	230d      	movs	r3, #13
 8007d9a:	e0a8      	b.n	8007eee <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8007d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d9e:	3334      	adds	r3, #52	; 0x34
 8007da0:	332c      	adds	r3, #44	; 0x2c
 8007da2:	4618      	mov	r0, r3
 8007da4:	f7fe fae4 	bl	8006370 <ld_dword>
 8007da8:	4602      	mov	r2, r0
 8007daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dac:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8007dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007db0:	699b      	ldr	r3, [r3, #24]
 8007db2:	009b      	lsls	r3, r3, #2
 8007db4:	647b      	str	r3, [r7, #68]	; 0x44
 8007db6:	e01f      	b.n	8007df8 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8007db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dba:	891b      	ldrh	r3, [r3, #8]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d101      	bne.n	8007dc4 <find_volume+0x3c8>
 8007dc0:	230d      	movs	r3, #13
 8007dc2:	e094      	b.n	8007eee <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8007dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dc6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007dc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007dca:	441a      	add	r2, r3
 8007dcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dce:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007dd0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007dd4:	2b02      	cmp	r3, #2
 8007dd6:	d103      	bne.n	8007de0 <find_volume+0x3e4>
 8007dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dda:	699b      	ldr	r3, [r3, #24]
 8007ddc:	005b      	lsls	r3, r3, #1
 8007dde:	e00a      	b.n	8007df6 <find_volume+0x3fa>
 8007de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007de2:	699a      	ldr	r2, [r3, #24]
 8007de4:	4613      	mov	r3, r2
 8007de6:	005b      	lsls	r3, r3, #1
 8007de8:	4413      	add	r3, r2
 8007dea:	085a      	lsrs	r2, r3, #1
 8007dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dee:	699b      	ldr	r3, [r3, #24]
 8007df0:	f003 0301 	and.w	r3, r3, #1
 8007df4:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8007df6:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dfa:	69da      	ldr	r2, [r3, #28]
 8007dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dfe:	899b      	ldrh	r3, [r3, #12]
 8007e00:	4619      	mov	r1, r3
 8007e02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e04:	440b      	add	r3, r1
 8007e06:	3b01      	subs	r3, #1
 8007e08:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007e0a:	8989      	ldrh	r1, [r1, #12]
 8007e0c:	fbb3 f3f1 	udiv	r3, r3, r1
 8007e10:	429a      	cmp	r2, r3
 8007e12:	d201      	bcs.n	8007e18 <find_volume+0x41c>
 8007e14:	230d      	movs	r3, #13
 8007e16:	e06a      	b.n	8007eee <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8007e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e1a:	f04f 32ff 	mov.w	r2, #4294967295
 8007e1e:	615a      	str	r2, [r3, #20]
 8007e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e22:	695a      	ldr	r2, [r3, #20]
 8007e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e26:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8007e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e2a:	2280      	movs	r2, #128	; 0x80
 8007e2c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8007e2e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007e32:	2b03      	cmp	r3, #3
 8007e34:	d149      	bne.n	8007eca <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8007e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e38:	3334      	adds	r3, #52	; 0x34
 8007e3a:	3330      	adds	r3, #48	; 0x30
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	f7fe fa7f 	bl	8006340 <ld_word>
 8007e42:	4603      	mov	r3, r0
 8007e44:	2b01      	cmp	r3, #1
 8007e46:	d140      	bne.n	8007eca <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 8007e48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e4a:	3301      	adds	r3, #1
 8007e4c:	4619      	mov	r1, r3
 8007e4e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007e50:	f7fe fd26 	bl	80068a0 <move_window>
 8007e54:	4603      	mov	r3, r0
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d137      	bne.n	8007eca <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 8007e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e62:	3334      	adds	r3, #52	; 0x34
 8007e64:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007e68:	4618      	mov	r0, r3
 8007e6a:	f7fe fa69 	bl	8006340 <ld_word>
 8007e6e:	4603      	mov	r3, r0
 8007e70:	461a      	mov	r2, r3
 8007e72:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007e76:	429a      	cmp	r2, r3
 8007e78:	d127      	bne.n	8007eca <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8007e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e7c:	3334      	adds	r3, #52	; 0x34
 8007e7e:	4618      	mov	r0, r3
 8007e80:	f7fe fa76 	bl	8006370 <ld_dword>
 8007e84:	4603      	mov	r3, r0
 8007e86:	4a1c      	ldr	r2, [pc, #112]	; (8007ef8 <find_volume+0x4fc>)
 8007e88:	4293      	cmp	r3, r2
 8007e8a:	d11e      	bne.n	8007eca <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8007e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e8e:	3334      	adds	r3, #52	; 0x34
 8007e90:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007e94:	4618      	mov	r0, r3
 8007e96:	f7fe fa6b 	bl	8006370 <ld_dword>
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	4a17      	ldr	r2, [pc, #92]	; (8007efc <find_volume+0x500>)
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	d113      	bne.n	8007eca <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8007ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ea4:	3334      	adds	r3, #52	; 0x34
 8007ea6:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8007eaa:	4618      	mov	r0, r3
 8007eac:	f7fe fa60 	bl	8006370 <ld_dword>
 8007eb0:	4602      	mov	r2, r0
 8007eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eb4:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8007eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eb8:	3334      	adds	r3, #52	; 0x34
 8007eba:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	f7fe fa56 	bl	8006370 <ld_dword>
 8007ec4:	4602      	mov	r2, r0
 8007ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ec8:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8007eca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ecc:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8007ed0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8007ed2:	4b0b      	ldr	r3, [pc, #44]	; (8007f00 <find_volume+0x504>)
 8007ed4:	881b      	ldrh	r3, [r3, #0]
 8007ed6:	3301      	adds	r3, #1
 8007ed8:	b29a      	uxth	r2, r3
 8007eda:	4b09      	ldr	r3, [pc, #36]	; (8007f00 <find_volume+0x504>)
 8007edc:	801a      	strh	r2, [r3, #0]
 8007ede:	4b08      	ldr	r3, [pc, #32]	; (8007f00 <find_volume+0x504>)
 8007ee0:	881a      	ldrh	r2, [r3, #0]
 8007ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ee4:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8007ee6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007ee8:	f7fe fc72 	bl	80067d0 <clear_lock>
#endif
	return FR_OK;
 8007eec:	2300      	movs	r3, #0
}
 8007eee:	4618      	mov	r0, r3
 8007ef0:	3758      	adds	r7, #88	; 0x58
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	bd80      	pop	{r7, pc}
 8007ef6:	bf00      	nop
 8007ef8:	41615252 	.word	0x41615252
 8007efc:	61417272 	.word	0x61417272
 8007f00:	200000cc 	.word	0x200000cc

08007f04 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b084      	sub	sp, #16
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
 8007f0c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8007f0e:	2309      	movs	r3, #9
 8007f10:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d01c      	beq.n	8007f52 <validate+0x4e>
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d018      	beq.n	8007f52 <validate+0x4e>
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	781b      	ldrb	r3, [r3, #0]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d013      	beq.n	8007f52 <validate+0x4e>
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	889a      	ldrh	r2, [r3, #4]
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	88db      	ldrh	r3, [r3, #6]
 8007f34:	429a      	cmp	r2, r3
 8007f36:	d10c      	bne.n	8007f52 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	785b      	ldrb	r3, [r3, #1]
 8007f3e:	4618      	mov	r0, r3
 8007f40:	f7fe f990 	bl	8006264 <disk_status>
 8007f44:	4603      	mov	r3, r0
 8007f46:	f003 0301 	and.w	r3, r3, #1
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d101      	bne.n	8007f52 <validate+0x4e>
			res = FR_OK;
 8007f4e:	2300      	movs	r3, #0
 8007f50:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8007f52:	7bfb      	ldrb	r3, [r7, #15]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d102      	bne.n	8007f5e <validate+0x5a>
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	e000      	b.n	8007f60 <validate+0x5c>
 8007f5e:	2300      	movs	r3, #0
 8007f60:	683a      	ldr	r2, [r7, #0]
 8007f62:	6013      	str	r3, [r2, #0]
	return res;
 8007f64:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f66:	4618      	mov	r0, r3
 8007f68:	3710      	adds	r7, #16
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bd80      	pop	{r7, pc}
	...

08007f70 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b088      	sub	sp, #32
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	60f8      	str	r0, [r7, #12]
 8007f78:	60b9      	str	r1, [r7, #8]
 8007f7a:	4613      	mov	r3, r2
 8007f7c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8007f7e:	68bb      	ldr	r3, [r7, #8]
 8007f80:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8007f82:	f107 0310 	add.w	r3, r7, #16
 8007f86:	4618      	mov	r0, r3
 8007f88:	f7ff fc9e 	bl	80078c8 <get_ldnumber>
 8007f8c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8007f8e:	69fb      	ldr	r3, [r7, #28]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	da01      	bge.n	8007f98 <f_mount+0x28>
 8007f94:	230b      	movs	r3, #11
 8007f96:	e02b      	b.n	8007ff0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007f98:	4a17      	ldr	r2, [pc, #92]	; (8007ff8 <f_mount+0x88>)
 8007f9a:	69fb      	ldr	r3, [r7, #28]
 8007f9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007fa0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8007fa2:	69bb      	ldr	r3, [r7, #24]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d005      	beq.n	8007fb4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8007fa8:	69b8      	ldr	r0, [r7, #24]
 8007faa:	f7fe fc11 	bl	80067d0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8007fae:	69bb      	ldr	r3, [r7, #24]
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d002      	beq.n	8007fc0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007fc0:	68fa      	ldr	r2, [r7, #12]
 8007fc2:	490d      	ldr	r1, [pc, #52]	; (8007ff8 <f_mount+0x88>)
 8007fc4:	69fb      	ldr	r3, [r7, #28]
 8007fc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d002      	beq.n	8007fd6 <f_mount+0x66>
 8007fd0:	79fb      	ldrb	r3, [r7, #7]
 8007fd2:	2b01      	cmp	r3, #1
 8007fd4:	d001      	beq.n	8007fda <f_mount+0x6a>
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	e00a      	b.n	8007ff0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8007fda:	f107 010c 	add.w	r1, r7, #12
 8007fde:	f107 0308 	add.w	r3, r7, #8
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	f7ff fd09 	bl	80079fc <find_volume>
 8007fea:	4603      	mov	r3, r0
 8007fec:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8007fee:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	3720      	adds	r7, #32
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	bd80      	pop	{r7, pc}
 8007ff8:	200000c8 	.word	0x200000c8

08007ffc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b098      	sub	sp, #96	; 0x60
 8008000:	af00      	add	r7, sp, #0
 8008002:	60f8      	str	r0, [r7, #12]
 8008004:	60b9      	str	r1, [r7, #8]
 8008006:	4613      	mov	r3, r2
 8008008:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d101      	bne.n	8008014 <f_open+0x18>
 8008010:	2309      	movs	r3, #9
 8008012:	e1bb      	b.n	800838c <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8008014:	79fb      	ldrb	r3, [r7, #7]
 8008016:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800801a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800801c:	79fa      	ldrb	r2, [r7, #7]
 800801e:	f107 0110 	add.w	r1, r7, #16
 8008022:	f107 0308 	add.w	r3, r7, #8
 8008026:	4618      	mov	r0, r3
 8008028:	f7ff fce8 	bl	80079fc <find_volume>
 800802c:	4603      	mov	r3, r0
 800802e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8008032:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008036:	2b00      	cmp	r3, #0
 8008038:	f040 819f 	bne.w	800837a <f_open+0x37e>
		dj.obj.fs = fs;
 800803c:	693b      	ldr	r3, [r7, #16]
 800803e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8008040:	68ba      	ldr	r2, [r7, #8]
 8008042:	f107 0314 	add.w	r3, r7, #20
 8008046:	4611      	mov	r1, r2
 8008048:	4618      	mov	r0, r3
 800804a:	f7ff fbc7 	bl	80077dc <follow_path>
 800804e:	4603      	mov	r3, r0
 8008050:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8008054:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008058:	2b00      	cmp	r3, #0
 800805a:	d11a      	bne.n	8008092 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800805c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008060:	b25b      	sxtb	r3, r3
 8008062:	2b00      	cmp	r3, #0
 8008064:	da03      	bge.n	800806e <f_open+0x72>
				res = FR_INVALID_NAME;
 8008066:	2306      	movs	r3, #6
 8008068:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800806c:	e011      	b.n	8008092 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800806e:	79fb      	ldrb	r3, [r7, #7]
 8008070:	f023 0301 	bic.w	r3, r3, #1
 8008074:	2b00      	cmp	r3, #0
 8008076:	bf14      	ite	ne
 8008078:	2301      	movne	r3, #1
 800807a:	2300      	moveq	r3, #0
 800807c:	b2db      	uxtb	r3, r3
 800807e:	461a      	mov	r2, r3
 8008080:	f107 0314 	add.w	r3, r7, #20
 8008084:	4611      	mov	r1, r2
 8008086:	4618      	mov	r0, r3
 8008088:	f7fe fa5a 	bl	8006540 <chk_lock>
 800808c:	4603      	mov	r3, r0
 800808e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8008092:	79fb      	ldrb	r3, [r7, #7]
 8008094:	f003 031c 	and.w	r3, r3, #28
 8008098:	2b00      	cmp	r3, #0
 800809a:	d07f      	beq.n	800819c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800809c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d017      	beq.n	80080d4 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80080a4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80080a8:	2b04      	cmp	r3, #4
 80080aa:	d10e      	bne.n	80080ca <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80080ac:	f7fe faa4 	bl	80065f8 <enq_lock>
 80080b0:	4603      	mov	r3, r0
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d006      	beq.n	80080c4 <f_open+0xc8>
 80080b6:	f107 0314 	add.w	r3, r7, #20
 80080ba:	4618      	mov	r0, r3
 80080bc:	f7ff fa69 	bl	8007592 <dir_register>
 80080c0:	4603      	mov	r3, r0
 80080c2:	e000      	b.n	80080c6 <f_open+0xca>
 80080c4:	2312      	movs	r3, #18
 80080c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80080ca:	79fb      	ldrb	r3, [r7, #7]
 80080cc:	f043 0308 	orr.w	r3, r3, #8
 80080d0:	71fb      	strb	r3, [r7, #7]
 80080d2:	e010      	b.n	80080f6 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80080d4:	7ebb      	ldrb	r3, [r7, #26]
 80080d6:	f003 0311 	and.w	r3, r3, #17
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d003      	beq.n	80080e6 <f_open+0xea>
					res = FR_DENIED;
 80080de:	2307      	movs	r3, #7
 80080e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80080e4:	e007      	b.n	80080f6 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80080e6:	79fb      	ldrb	r3, [r7, #7]
 80080e8:	f003 0304 	and.w	r3, r3, #4
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d002      	beq.n	80080f6 <f_open+0xfa>
 80080f0:	2308      	movs	r3, #8
 80080f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80080f6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d168      	bne.n	80081d0 <f_open+0x1d4>
 80080fe:	79fb      	ldrb	r3, [r7, #7]
 8008100:	f003 0308 	and.w	r3, r3, #8
 8008104:	2b00      	cmp	r3, #0
 8008106:	d063      	beq.n	80081d0 <f_open+0x1d4>
				dw = GET_FATTIME();
 8008108:	f7fe f84c 	bl	80061a4 <get_fattime>
 800810c:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800810e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008110:	330e      	adds	r3, #14
 8008112:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008114:	4618      	mov	r0, r3
 8008116:	f7fe f969 	bl	80063ec <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800811a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800811c:	3316      	adds	r3, #22
 800811e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008120:	4618      	mov	r0, r3
 8008122:	f7fe f963 	bl	80063ec <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8008126:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008128:	330b      	adds	r3, #11
 800812a:	2220      	movs	r2, #32
 800812c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800812e:	693b      	ldr	r3, [r7, #16]
 8008130:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008132:	4611      	mov	r1, r2
 8008134:	4618      	mov	r0, r3
 8008136:	f7ff f93b 	bl	80073b0 <ld_clust>
 800813a:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800813c:	693b      	ldr	r3, [r7, #16]
 800813e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008140:	2200      	movs	r2, #0
 8008142:	4618      	mov	r0, r3
 8008144:	f7ff f953 	bl	80073ee <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8008148:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800814a:	331c      	adds	r3, #28
 800814c:	2100      	movs	r1, #0
 800814e:	4618      	mov	r0, r3
 8008150:	f7fe f94c 	bl	80063ec <st_dword>
					fs->wflag = 1;
 8008154:	693b      	ldr	r3, [r7, #16]
 8008156:	2201      	movs	r2, #1
 8008158:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800815a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800815c:	2b00      	cmp	r3, #0
 800815e:	d037      	beq.n	80081d0 <f_open+0x1d4>
						dw = fs->winsect;
 8008160:	693b      	ldr	r3, [r7, #16]
 8008162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008164:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8008166:	f107 0314 	add.w	r3, r7, #20
 800816a:	2200      	movs	r2, #0
 800816c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800816e:	4618      	mov	r0, r3
 8008170:	f7fe fe43 	bl	8006dfa <remove_chain>
 8008174:	4603      	mov	r3, r0
 8008176:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800817a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800817e:	2b00      	cmp	r3, #0
 8008180:	d126      	bne.n	80081d0 <f_open+0x1d4>
							res = move_window(fs, dw);
 8008182:	693b      	ldr	r3, [r7, #16]
 8008184:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008186:	4618      	mov	r0, r3
 8008188:	f7fe fb8a 	bl	80068a0 <move_window>
 800818c:	4603      	mov	r3, r0
 800818e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8008192:	693b      	ldr	r3, [r7, #16]
 8008194:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008196:	3a01      	subs	r2, #1
 8008198:	611a      	str	r2, [r3, #16]
 800819a:	e019      	b.n	80081d0 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800819c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d115      	bne.n	80081d0 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80081a4:	7ebb      	ldrb	r3, [r7, #26]
 80081a6:	f003 0310 	and.w	r3, r3, #16
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d003      	beq.n	80081b6 <f_open+0x1ba>
					res = FR_NO_FILE;
 80081ae:	2304      	movs	r3, #4
 80081b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80081b4:	e00c      	b.n	80081d0 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80081b6:	79fb      	ldrb	r3, [r7, #7]
 80081b8:	f003 0302 	and.w	r3, r3, #2
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d007      	beq.n	80081d0 <f_open+0x1d4>
 80081c0:	7ebb      	ldrb	r3, [r7, #26]
 80081c2:	f003 0301 	and.w	r3, r3, #1
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d002      	beq.n	80081d0 <f_open+0x1d4>
						res = FR_DENIED;
 80081ca:	2307      	movs	r3, #7
 80081cc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80081d0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d128      	bne.n	800822a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80081d8:	79fb      	ldrb	r3, [r7, #7]
 80081da:	f003 0308 	and.w	r3, r3, #8
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d003      	beq.n	80081ea <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80081e2:	79fb      	ldrb	r3, [r7, #7]
 80081e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081e8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80081ea:	693b      	ldr	r3, [r7, #16]
 80081ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80081f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80081f8:	79fb      	ldrb	r3, [r7, #7]
 80081fa:	f023 0301 	bic.w	r3, r3, #1
 80081fe:	2b00      	cmp	r3, #0
 8008200:	bf14      	ite	ne
 8008202:	2301      	movne	r3, #1
 8008204:	2300      	moveq	r3, #0
 8008206:	b2db      	uxtb	r3, r3
 8008208:	461a      	mov	r2, r3
 800820a:	f107 0314 	add.w	r3, r7, #20
 800820e:	4611      	mov	r1, r2
 8008210:	4618      	mov	r0, r3
 8008212:	f7fe fa13 	bl	800663c <inc_lock>
 8008216:	4602      	mov	r2, r0
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	691b      	ldr	r3, [r3, #16]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d102      	bne.n	800822a <f_open+0x22e>
 8008224:	2302      	movs	r3, #2
 8008226:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800822a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800822e:	2b00      	cmp	r3, #0
 8008230:	f040 80a3 	bne.w	800837a <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8008234:	693b      	ldr	r3, [r7, #16]
 8008236:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008238:	4611      	mov	r1, r2
 800823a:	4618      	mov	r0, r3
 800823c:	f7ff f8b8 	bl	80073b0 <ld_clust>
 8008240:	4602      	mov	r2, r0
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8008246:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008248:	331c      	adds	r3, #28
 800824a:	4618      	mov	r0, r3
 800824c:	f7fe f890 	bl	8006370 <ld_dword>
 8008250:	4602      	mov	r2, r0
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	2200      	movs	r2, #0
 800825a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800825c:	693a      	ldr	r2, [r7, #16]
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8008262:	693b      	ldr	r3, [r7, #16]
 8008264:	88da      	ldrh	r2, [r3, #6]
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	79fa      	ldrb	r2, [r7, #7]
 800826e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	2200      	movs	r2, #0
 8008274:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	2200      	movs	r2, #0
 800827a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	2200      	movs	r2, #0
 8008280:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	3330      	adds	r3, #48	; 0x30
 8008286:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800828a:	2100      	movs	r1, #0
 800828c:	4618      	mov	r0, r3
 800828e:	f7fe f8fa 	bl	8006486 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8008292:	79fb      	ldrb	r3, [r7, #7]
 8008294:	f003 0320 	and.w	r3, r3, #32
 8008298:	2b00      	cmp	r3, #0
 800829a:	d06e      	beq.n	800837a <f_open+0x37e>
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	68db      	ldr	r3, [r3, #12]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d06a      	beq.n	800837a <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	68da      	ldr	r2, [r3, #12]
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80082ac:	693b      	ldr	r3, [r7, #16]
 80082ae:	895b      	ldrh	r3, [r3, #10]
 80082b0:	461a      	mov	r2, r3
 80082b2:	693b      	ldr	r3, [r7, #16]
 80082b4:	899b      	ldrh	r3, [r3, #12]
 80082b6:	fb03 f302 	mul.w	r3, r3, r2
 80082ba:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	689b      	ldr	r3, [r3, #8]
 80082c0:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	68db      	ldr	r3, [r3, #12]
 80082c6:	657b      	str	r3, [r7, #84]	; 0x54
 80082c8:	e016      	b.n	80082f8 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80082ce:	4618      	mov	r0, r3
 80082d0:	f7fe fba3 	bl	8006a1a <get_fat>
 80082d4:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80082d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80082d8:	2b01      	cmp	r3, #1
 80082da:	d802      	bhi.n	80082e2 <f_open+0x2e6>
 80082dc:	2302      	movs	r3, #2
 80082de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80082e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80082e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082e8:	d102      	bne.n	80082f0 <f_open+0x2f4>
 80082ea:	2301      	movs	r3, #1
 80082ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80082f0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80082f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80082f4:	1ad3      	subs	r3, r2, r3
 80082f6:	657b      	str	r3, [r7, #84]	; 0x54
 80082f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d103      	bne.n	8008308 <f_open+0x30c>
 8008300:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008302:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008304:	429a      	cmp	r2, r3
 8008306:	d8e0      	bhi.n	80082ca <f_open+0x2ce>
				}
				fp->clust = clst;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800830c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800830e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008312:	2b00      	cmp	r3, #0
 8008314:	d131      	bne.n	800837a <f_open+0x37e>
 8008316:	693b      	ldr	r3, [r7, #16]
 8008318:	899b      	ldrh	r3, [r3, #12]
 800831a:	461a      	mov	r2, r3
 800831c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800831e:	fbb3 f1f2 	udiv	r1, r3, r2
 8008322:	fb02 f201 	mul.w	r2, r2, r1
 8008326:	1a9b      	subs	r3, r3, r2
 8008328:	2b00      	cmp	r3, #0
 800832a:	d026      	beq.n	800837a <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800832c:	693b      	ldr	r3, [r7, #16]
 800832e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008330:	4618      	mov	r0, r3
 8008332:	f7fe fb53 	bl	80069dc <clust2sect>
 8008336:	6478      	str	r0, [r7, #68]	; 0x44
 8008338:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800833a:	2b00      	cmp	r3, #0
 800833c:	d103      	bne.n	8008346 <f_open+0x34a>
						res = FR_INT_ERR;
 800833e:	2302      	movs	r3, #2
 8008340:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008344:	e019      	b.n	800837a <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8008346:	693b      	ldr	r3, [r7, #16]
 8008348:	899b      	ldrh	r3, [r3, #12]
 800834a:	461a      	mov	r2, r3
 800834c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800834e:	fbb3 f2f2 	udiv	r2, r3, r2
 8008352:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008354:	441a      	add	r2, r3
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800835a:	693b      	ldr	r3, [r7, #16]
 800835c:	7858      	ldrb	r0, [r3, #1]
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	6a1a      	ldr	r2, [r3, #32]
 8008368:	2301      	movs	r3, #1
 800836a:	f7fd ffa1 	bl	80062b0 <disk_read>
 800836e:	4603      	mov	r3, r0
 8008370:	2b00      	cmp	r3, #0
 8008372:	d002      	beq.n	800837a <f_open+0x37e>
 8008374:	2301      	movs	r3, #1
 8008376:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800837a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800837e:	2b00      	cmp	r3, #0
 8008380:	d002      	beq.n	8008388 <f_open+0x38c>
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	2200      	movs	r2, #0
 8008386:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8008388:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800838c:	4618      	mov	r0, r3
 800838e:	3760      	adds	r7, #96	; 0x60
 8008390:	46bd      	mov	sp, r7
 8008392:	bd80      	pop	{r7, pc}

08008394 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b08e      	sub	sp, #56	; 0x38
 8008398:	af00      	add	r7, sp, #0
 800839a:	60f8      	str	r0, [r7, #12]
 800839c:	60b9      	str	r1, [r7, #8]
 800839e:	607a      	str	r2, [r7, #4]
 80083a0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 80083a6:	683b      	ldr	r3, [r7, #0]
 80083a8:	2200      	movs	r2, #0
 80083aa:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	f107 0214 	add.w	r2, r7, #20
 80083b2:	4611      	mov	r1, r2
 80083b4:	4618      	mov	r0, r3
 80083b6:	f7ff fda5 	bl	8007f04 <validate>
 80083ba:	4603      	mov	r3, r0
 80083bc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80083c0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d107      	bne.n	80083d8 <f_read+0x44>
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	7d5b      	ldrb	r3, [r3, #21]
 80083cc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80083d0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d002      	beq.n	80083de <f_read+0x4a>
 80083d8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80083dc:	e135      	b.n	800864a <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	7d1b      	ldrb	r3, [r3, #20]
 80083e2:	f003 0301 	and.w	r3, r3, #1
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d101      	bne.n	80083ee <f_read+0x5a>
 80083ea:	2307      	movs	r3, #7
 80083ec:	e12d      	b.n	800864a <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	68da      	ldr	r2, [r3, #12]
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	699b      	ldr	r3, [r3, #24]
 80083f6:	1ad3      	subs	r3, r2, r3
 80083f8:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80083fa:	687a      	ldr	r2, [r7, #4]
 80083fc:	6a3b      	ldr	r3, [r7, #32]
 80083fe:	429a      	cmp	r2, r3
 8008400:	f240 811e 	bls.w	8008640 <f_read+0x2ac>
 8008404:	6a3b      	ldr	r3, [r7, #32]
 8008406:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8008408:	e11a      	b.n	8008640 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	699b      	ldr	r3, [r3, #24]
 800840e:	697a      	ldr	r2, [r7, #20]
 8008410:	8992      	ldrh	r2, [r2, #12]
 8008412:	fbb3 f1f2 	udiv	r1, r3, r2
 8008416:	fb02 f201 	mul.w	r2, r2, r1
 800841a:	1a9b      	subs	r3, r3, r2
 800841c:	2b00      	cmp	r3, #0
 800841e:	f040 80d5 	bne.w	80085cc <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	699b      	ldr	r3, [r3, #24]
 8008426:	697a      	ldr	r2, [r7, #20]
 8008428:	8992      	ldrh	r2, [r2, #12]
 800842a:	fbb3 f3f2 	udiv	r3, r3, r2
 800842e:	697a      	ldr	r2, [r7, #20]
 8008430:	8952      	ldrh	r2, [r2, #10]
 8008432:	3a01      	subs	r2, #1
 8008434:	4013      	ands	r3, r2
 8008436:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8008438:	69fb      	ldr	r3, [r7, #28]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d12f      	bne.n	800849e <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	699b      	ldr	r3, [r3, #24]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d103      	bne.n	800844e <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	689b      	ldr	r3, [r3, #8]
 800844a:	633b      	str	r3, [r7, #48]	; 0x30
 800844c:	e013      	b.n	8008476 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008452:	2b00      	cmp	r3, #0
 8008454:	d007      	beq.n	8008466 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	699b      	ldr	r3, [r3, #24]
 800845a:	4619      	mov	r1, r3
 800845c:	68f8      	ldr	r0, [r7, #12]
 800845e:	f7fe fdc9 	bl	8006ff4 <clmt_clust>
 8008462:	6338      	str	r0, [r7, #48]	; 0x30
 8008464:	e007      	b.n	8008476 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8008466:	68fa      	ldr	r2, [r7, #12]
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	69db      	ldr	r3, [r3, #28]
 800846c:	4619      	mov	r1, r3
 800846e:	4610      	mov	r0, r2
 8008470:	f7fe fad3 	bl	8006a1a <get_fat>
 8008474:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8008476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008478:	2b01      	cmp	r3, #1
 800847a:	d804      	bhi.n	8008486 <f_read+0xf2>
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	2202      	movs	r2, #2
 8008480:	755a      	strb	r2, [r3, #21]
 8008482:	2302      	movs	r3, #2
 8008484:	e0e1      	b.n	800864a <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800848c:	d104      	bne.n	8008498 <f_read+0x104>
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	2201      	movs	r2, #1
 8008492:	755a      	strb	r2, [r3, #21]
 8008494:	2301      	movs	r3, #1
 8008496:	e0d8      	b.n	800864a <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800849c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800849e:	697a      	ldr	r2, [r7, #20]
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	69db      	ldr	r3, [r3, #28]
 80084a4:	4619      	mov	r1, r3
 80084a6:	4610      	mov	r0, r2
 80084a8:	f7fe fa98 	bl	80069dc <clust2sect>
 80084ac:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80084ae:	69bb      	ldr	r3, [r7, #24]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d104      	bne.n	80084be <f_read+0x12a>
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	2202      	movs	r2, #2
 80084b8:	755a      	strb	r2, [r3, #21]
 80084ba:	2302      	movs	r3, #2
 80084bc:	e0c5      	b.n	800864a <f_read+0x2b6>
			sect += csect;
 80084be:	69ba      	ldr	r2, [r7, #24]
 80084c0:	69fb      	ldr	r3, [r7, #28]
 80084c2:	4413      	add	r3, r2
 80084c4:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80084c6:	697b      	ldr	r3, [r7, #20]
 80084c8:	899b      	ldrh	r3, [r3, #12]
 80084ca:	461a      	mov	r2, r3
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	fbb3 f3f2 	udiv	r3, r3, r2
 80084d2:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80084d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d041      	beq.n	800855e <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80084da:	69fa      	ldr	r2, [r7, #28]
 80084dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084de:	4413      	add	r3, r2
 80084e0:	697a      	ldr	r2, [r7, #20]
 80084e2:	8952      	ldrh	r2, [r2, #10]
 80084e4:	4293      	cmp	r3, r2
 80084e6:	d905      	bls.n	80084f4 <f_read+0x160>
					cc = fs->csize - csect;
 80084e8:	697b      	ldr	r3, [r7, #20]
 80084ea:	895b      	ldrh	r3, [r3, #10]
 80084ec:	461a      	mov	r2, r3
 80084ee:	69fb      	ldr	r3, [r7, #28]
 80084f0:	1ad3      	subs	r3, r2, r3
 80084f2:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80084f4:	697b      	ldr	r3, [r7, #20]
 80084f6:	7858      	ldrb	r0, [r3, #1]
 80084f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084fa:	69ba      	ldr	r2, [r7, #24]
 80084fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80084fe:	f7fd fed7 	bl	80062b0 <disk_read>
 8008502:	4603      	mov	r3, r0
 8008504:	2b00      	cmp	r3, #0
 8008506:	d004      	beq.n	8008512 <f_read+0x17e>
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	2201      	movs	r2, #1
 800850c:	755a      	strb	r2, [r3, #21]
 800850e:	2301      	movs	r3, #1
 8008510:	e09b      	b.n	800864a <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	7d1b      	ldrb	r3, [r3, #20]
 8008516:	b25b      	sxtb	r3, r3
 8008518:	2b00      	cmp	r3, #0
 800851a:	da18      	bge.n	800854e <f_read+0x1ba>
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	6a1a      	ldr	r2, [r3, #32]
 8008520:	69bb      	ldr	r3, [r7, #24]
 8008522:	1ad3      	subs	r3, r2, r3
 8008524:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008526:	429a      	cmp	r2, r3
 8008528:	d911      	bls.n	800854e <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	6a1a      	ldr	r2, [r3, #32]
 800852e:	69bb      	ldr	r3, [r7, #24]
 8008530:	1ad3      	subs	r3, r2, r3
 8008532:	697a      	ldr	r2, [r7, #20]
 8008534:	8992      	ldrh	r2, [r2, #12]
 8008536:	fb02 f303 	mul.w	r3, r2, r3
 800853a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800853c:	18d0      	adds	r0, r2, r3
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008544:	697b      	ldr	r3, [r7, #20]
 8008546:	899b      	ldrh	r3, [r3, #12]
 8008548:	461a      	mov	r2, r3
 800854a:	f7fd ff7b 	bl	8006444 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800854e:	697b      	ldr	r3, [r7, #20]
 8008550:	899b      	ldrh	r3, [r3, #12]
 8008552:	461a      	mov	r2, r3
 8008554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008556:	fb02 f303 	mul.w	r3, r2, r3
 800855a:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800855c:	e05c      	b.n	8008618 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	6a1b      	ldr	r3, [r3, #32]
 8008562:	69ba      	ldr	r2, [r7, #24]
 8008564:	429a      	cmp	r2, r3
 8008566:	d02e      	beq.n	80085c6 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	7d1b      	ldrb	r3, [r3, #20]
 800856c:	b25b      	sxtb	r3, r3
 800856e:	2b00      	cmp	r3, #0
 8008570:	da18      	bge.n	80085a4 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008572:	697b      	ldr	r3, [r7, #20]
 8008574:	7858      	ldrb	r0, [r3, #1]
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	6a1a      	ldr	r2, [r3, #32]
 8008580:	2301      	movs	r3, #1
 8008582:	f7fd fead 	bl	80062e0 <disk_write>
 8008586:	4603      	mov	r3, r0
 8008588:	2b00      	cmp	r3, #0
 800858a:	d004      	beq.n	8008596 <f_read+0x202>
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	2201      	movs	r2, #1
 8008590:	755a      	strb	r2, [r3, #21]
 8008592:	2301      	movs	r3, #1
 8008594:	e059      	b.n	800864a <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	7d1b      	ldrb	r3, [r3, #20]
 800859a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800859e:	b2da      	uxtb	r2, r3
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80085a4:	697b      	ldr	r3, [r7, #20]
 80085a6:	7858      	ldrb	r0, [r3, #1]
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80085ae:	2301      	movs	r3, #1
 80085b0:	69ba      	ldr	r2, [r7, #24]
 80085b2:	f7fd fe7d 	bl	80062b0 <disk_read>
 80085b6:	4603      	mov	r3, r0
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d004      	beq.n	80085c6 <f_read+0x232>
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	2201      	movs	r2, #1
 80085c0:	755a      	strb	r2, [r3, #21]
 80085c2:	2301      	movs	r3, #1
 80085c4:	e041      	b.n	800864a <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	69ba      	ldr	r2, [r7, #24]
 80085ca:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80085cc:	697b      	ldr	r3, [r7, #20]
 80085ce:	899b      	ldrh	r3, [r3, #12]
 80085d0:	4618      	mov	r0, r3
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	699b      	ldr	r3, [r3, #24]
 80085d6:	697a      	ldr	r2, [r7, #20]
 80085d8:	8992      	ldrh	r2, [r2, #12]
 80085da:	fbb3 f1f2 	udiv	r1, r3, r2
 80085de:	fb02 f201 	mul.w	r2, r2, r1
 80085e2:	1a9b      	subs	r3, r3, r2
 80085e4:	1ac3      	subs	r3, r0, r3
 80085e6:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80085e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	429a      	cmp	r2, r3
 80085ee:	d901      	bls.n	80085f4 <f_read+0x260>
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	699b      	ldr	r3, [r3, #24]
 80085fe:	697a      	ldr	r2, [r7, #20]
 8008600:	8992      	ldrh	r2, [r2, #12]
 8008602:	fbb3 f0f2 	udiv	r0, r3, r2
 8008606:	fb02 f200 	mul.w	r2, r2, r0
 800860a:	1a9b      	subs	r3, r3, r2
 800860c:	440b      	add	r3, r1
 800860e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008610:	4619      	mov	r1, r3
 8008612:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008614:	f7fd ff16 	bl	8006444 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8008618:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800861a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800861c:	4413      	add	r3, r2
 800861e:	627b      	str	r3, [r7, #36]	; 0x24
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	699a      	ldr	r2, [r3, #24]
 8008624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008626:	441a      	add	r2, r3
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	619a      	str	r2, [r3, #24]
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	681a      	ldr	r2, [r3, #0]
 8008630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008632:	441a      	add	r2, r3
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	601a      	str	r2, [r3, #0]
 8008638:	687a      	ldr	r2, [r7, #4]
 800863a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800863c:	1ad3      	subs	r3, r2, r3
 800863e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2b00      	cmp	r3, #0
 8008644:	f47f aee1 	bne.w	800840a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8008648:	2300      	movs	r3, #0
}
 800864a:	4618      	mov	r0, r3
 800864c:	3738      	adds	r7, #56	; 0x38
 800864e:	46bd      	mov	sp, r7
 8008650:	bd80      	pop	{r7, pc}

08008652 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8008652:	b580      	push	{r7, lr}
 8008654:	b08c      	sub	sp, #48	; 0x30
 8008656:	af00      	add	r7, sp, #0
 8008658:	60f8      	str	r0, [r7, #12]
 800865a:	60b9      	str	r1, [r7, #8]
 800865c:	607a      	str	r2, [r7, #4]
 800865e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8008660:	68bb      	ldr	r3, [r7, #8]
 8008662:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	2200      	movs	r2, #0
 8008668:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	f107 0210 	add.w	r2, r7, #16
 8008670:	4611      	mov	r1, r2
 8008672:	4618      	mov	r0, r3
 8008674:	f7ff fc46 	bl	8007f04 <validate>
 8008678:	4603      	mov	r3, r0
 800867a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800867e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008682:	2b00      	cmp	r3, #0
 8008684:	d107      	bne.n	8008696 <f_write+0x44>
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	7d5b      	ldrb	r3, [r3, #21]
 800868a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800868e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008692:	2b00      	cmp	r3, #0
 8008694:	d002      	beq.n	800869c <f_write+0x4a>
 8008696:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800869a:	e16a      	b.n	8008972 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	7d1b      	ldrb	r3, [r3, #20]
 80086a0:	f003 0302 	and.w	r3, r3, #2
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d101      	bne.n	80086ac <f_write+0x5a>
 80086a8:	2307      	movs	r3, #7
 80086aa:	e162      	b.n	8008972 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	699a      	ldr	r2, [r3, #24]
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	441a      	add	r2, r3
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	699b      	ldr	r3, [r3, #24]
 80086b8:	429a      	cmp	r2, r3
 80086ba:	f080 814c 	bcs.w	8008956 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	699b      	ldr	r3, [r3, #24]
 80086c2:	43db      	mvns	r3, r3
 80086c4:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80086c6:	e146      	b.n	8008956 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	699b      	ldr	r3, [r3, #24]
 80086cc:	693a      	ldr	r2, [r7, #16]
 80086ce:	8992      	ldrh	r2, [r2, #12]
 80086d0:	fbb3 f1f2 	udiv	r1, r3, r2
 80086d4:	fb02 f201 	mul.w	r2, r2, r1
 80086d8:	1a9b      	subs	r3, r3, r2
 80086da:	2b00      	cmp	r3, #0
 80086dc:	f040 80f1 	bne.w	80088c2 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	699b      	ldr	r3, [r3, #24]
 80086e4:	693a      	ldr	r2, [r7, #16]
 80086e6:	8992      	ldrh	r2, [r2, #12]
 80086e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80086ec:	693a      	ldr	r2, [r7, #16]
 80086ee:	8952      	ldrh	r2, [r2, #10]
 80086f0:	3a01      	subs	r2, #1
 80086f2:	4013      	ands	r3, r2
 80086f4:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80086f6:	69bb      	ldr	r3, [r7, #24]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d143      	bne.n	8008784 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	699b      	ldr	r3, [r3, #24]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d10c      	bne.n	800871e <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	689b      	ldr	r3, [r3, #8]
 8008708:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800870a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800870c:	2b00      	cmp	r3, #0
 800870e:	d11a      	bne.n	8008746 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	2100      	movs	r1, #0
 8008714:	4618      	mov	r0, r3
 8008716:	f7fe fbd5 	bl	8006ec4 <create_chain>
 800871a:	62b8      	str	r0, [r7, #40]	; 0x28
 800871c:	e013      	b.n	8008746 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008722:	2b00      	cmp	r3, #0
 8008724:	d007      	beq.n	8008736 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	699b      	ldr	r3, [r3, #24]
 800872a:	4619      	mov	r1, r3
 800872c:	68f8      	ldr	r0, [r7, #12]
 800872e:	f7fe fc61 	bl	8006ff4 <clmt_clust>
 8008732:	62b8      	str	r0, [r7, #40]	; 0x28
 8008734:	e007      	b.n	8008746 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8008736:	68fa      	ldr	r2, [r7, #12]
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	69db      	ldr	r3, [r3, #28]
 800873c:	4619      	mov	r1, r3
 800873e:	4610      	mov	r0, r2
 8008740:	f7fe fbc0 	bl	8006ec4 <create_chain>
 8008744:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008748:	2b00      	cmp	r3, #0
 800874a:	f000 8109 	beq.w	8008960 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800874e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008750:	2b01      	cmp	r3, #1
 8008752:	d104      	bne.n	800875e <f_write+0x10c>
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	2202      	movs	r2, #2
 8008758:	755a      	strb	r2, [r3, #21]
 800875a:	2302      	movs	r3, #2
 800875c:	e109      	b.n	8008972 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800875e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008764:	d104      	bne.n	8008770 <f_write+0x11e>
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	2201      	movs	r2, #1
 800876a:	755a      	strb	r2, [r3, #21]
 800876c:	2301      	movs	r3, #1
 800876e:	e100      	b.n	8008972 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008774:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	689b      	ldr	r3, [r3, #8]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d102      	bne.n	8008784 <f_write+0x132>
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008782:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	7d1b      	ldrb	r3, [r3, #20]
 8008788:	b25b      	sxtb	r3, r3
 800878a:	2b00      	cmp	r3, #0
 800878c:	da18      	bge.n	80087c0 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800878e:	693b      	ldr	r3, [r7, #16]
 8008790:	7858      	ldrb	r0, [r3, #1]
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	6a1a      	ldr	r2, [r3, #32]
 800879c:	2301      	movs	r3, #1
 800879e:	f7fd fd9f 	bl	80062e0 <disk_write>
 80087a2:	4603      	mov	r3, r0
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d004      	beq.n	80087b2 <f_write+0x160>
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	2201      	movs	r2, #1
 80087ac:	755a      	strb	r2, [r3, #21]
 80087ae:	2301      	movs	r3, #1
 80087b0:	e0df      	b.n	8008972 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	7d1b      	ldrb	r3, [r3, #20]
 80087b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087ba:	b2da      	uxtb	r2, r3
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80087c0:	693a      	ldr	r2, [r7, #16]
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	69db      	ldr	r3, [r3, #28]
 80087c6:	4619      	mov	r1, r3
 80087c8:	4610      	mov	r0, r2
 80087ca:	f7fe f907 	bl	80069dc <clust2sect>
 80087ce:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80087d0:	697b      	ldr	r3, [r7, #20]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d104      	bne.n	80087e0 <f_write+0x18e>
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	2202      	movs	r2, #2
 80087da:	755a      	strb	r2, [r3, #21]
 80087dc:	2302      	movs	r3, #2
 80087de:	e0c8      	b.n	8008972 <f_write+0x320>
			sect += csect;
 80087e0:	697a      	ldr	r2, [r7, #20]
 80087e2:	69bb      	ldr	r3, [r7, #24]
 80087e4:	4413      	add	r3, r2
 80087e6:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80087e8:	693b      	ldr	r3, [r7, #16]
 80087ea:	899b      	ldrh	r3, [r3, #12]
 80087ec:	461a      	mov	r2, r3
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80087f4:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80087f6:	6a3b      	ldr	r3, [r7, #32]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d043      	beq.n	8008884 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80087fc:	69ba      	ldr	r2, [r7, #24]
 80087fe:	6a3b      	ldr	r3, [r7, #32]
 8008800:	4413      	add	r3, r2
 8008802:	693a      	ldr	r2, [r7, #16]
 8008804:	8952      	ldrh	r2, [r2, #10]
 8008806:	4293      	cmp	r3, r2
 8008808:	d905      	bls.n	8008816 <f_write+0x1c4>
					cc = fs->csize - csect;
 800880a:	693b      	ldr	r3, [r7, #16]
 800880c:	895b      	ldrh	r3, [r3, #10]
 800880e:	461a      	mov	r2, r3
 8008810:	69bb      	ldr	r3, [r7, #24]
 8008812:	1ad3      	subs	r3, r2, r3
 8008814:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008816:	693b      	ldr	r3, [r7, #16]
 8008818:	7858      	ldrb	r0, [r3, #1]
 800881a:	6a3b      	ldr	r3, [r7, #32]
 800881c:	697a      	ldr	r2, [r7, #20]
 800881e:	69f9      	ldr	r1, [r7, #28]
 8008820:	f7fd fd5e 	bl	80062e0 <disk_write>
 8008824:	4603      	mov	r3, r0
 8008826:	2b00      	cmp	r3, #0
 8008828:	d004      	beq.n	8008834 <f_write+0x1e2>
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	2201      	movs	r2, #1
 800882e:	755a      	strb	r2, [r3, #21]
 8008830:	2301      	movs	r3, #1
 8008832:	e09e      	b.n	8008972 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	6a1a      	ldr	r2, [r3, #32]
 8008838:	697b      	ldr	r3, [r7, #20]
 800883a:	1ad3      	subs	r3, r2, r3
 800883c:	6a3a      	ldr	r2, [r7, #32]
 800883e:	429a      	cmp	r2, r3
 8008840:	d918      	bls.n	8008874 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	6a1a      	ldr	r2, [r3, #32]
 800884c:	697b      	ldr	r3, [r7, #20]
 800884e:	1ad3      	subs	r3, r2, r3
 8008850:	693a      	ldr	r2, [r7, #16]
 8008852:	8992      	ldrh	r2, [r2, #12]
 8008854:	fb02 f303 	mul.w	r3, r2, r3
 8008858:	69fa      	ldr	r2, [r7, #28]
 800885a:	18d1      	adds	r1, r2, r3
 800885c:	693b      	ldr	r3, [r7, #16]
 800885e:	899b      	ldrh	r3, [r3, #12]
 8008860:	461a      	mov	r2, r3
 8008862:	f7fd fdef 	bl	8006444 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	7d1b      	ldrb	r3, [r3, #20]
 800886a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800886e:	b2da      	uxtb	r2, r3
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8008874:	693b      	ldr	r3, [r7, #16]
 8008876:	899b      	ldrh	r3, [r3, #12]
 8008878:	461a      	mov	r2, r3
 800887a:	6a3b      	ldr	r3, [r7, #32]
 800887c:	fb02 f303 	mul.w	r3, r2, r3
 8008880:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8008882:	e04b      	b.n	800891c <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	6a1b      	ldr	r3, [r3, #32]
 8008888:	697a      	ldr	r2, [r7, #20]
 800888a:	429a      	cmp	r2, r3
 800888c:	d016      	beq.n	80088bc <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	699a      	ldr	r2, [r3, #24]
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008896:	429a      	cmp	r2, r3
 8008898:	d210      	bcs.n	80088bc <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800889a:	693b      	ldr	r3, [r7, #16]
 800889c:	7858      	ldrb	r0, [r3, #1]
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80088a4:	2301      	movs	r3, #1
 80088a6:	697a      	ldr	r2, [r7, #20]
 80088a8:	f7fd fd02 	bl	80062b0 <disk_read>
 80088ac:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d004      	beq.n	80088bc <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	2201      	movs	r2, #1
 80088b6:	755a      	strb	r2, [r3, #21]
 80088b8:	2301      	movs	r3, #1
 80088ba:	e05a      	b.n	8008972 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	697a      	ldr	r2, [r7, #20]
 80088c0:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80088c2:	693b      	ldr	r3, [r7, #16]
 80088c4:	899b      	ldrh	r3, [r3, #12]
 80088c6:	4618      	mov	r0, r3
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	699b      	ldr	r3, [r3, #24]
 80088cc:	693a      	ldr	r2, [r7, #16]
 80088ce:	8992      	ldrh	r2, [r2, #12]
 80088d0:	fbb3 f1f2 	udiv	r1, r3, r2
 80088d4:	fb02 f201 	mul.w	r2, r2, r1
 80088d8:	1a9b      	subs	r3, r3, r2
 80088da:	1ac3      	subs	r3, r0, r3
 80088dc:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80088de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	429a      	cmp	r2, r3
 80088e4:	d901      	bls.n	80088ea <f_write+0x298>
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	699b      	ldr	r3, [r3, #24]
 80088f4:	693a      	ldr	r2, [r7, #16]
 80088f6:	8992      	ldrh	r2, [r2, #12]
 80088f8:	fbb3 f0f2 	udiv	r0, r3, r2
 80088fc:	fb02 f200 	mul.w	r2, r2, r0
 8008900:	1a9b      	subs	r3, r3, r2
 8008902:	440b      	add	r3, r1
 8008904:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008906:	69f9      	ldr	r1, [r7, #28]
 8008908:	4618      	mov	r0, r3
 800890a:	f7fd fd9b 	bl	8006444 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	7d1b      	ldrb	r3, [r3, #20]
 8008912:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008916:	b2da      	uxtb	r2, r3
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800891c:	69fa      	ldr	r2, [r7, #28]
 800891e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008920:	4413      	add	r3, r2
 8008922:	61fb      	str	r3, [r7, #28]
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	699a      	ldr	r2, [r3, #24]
 8008928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800892a:	441a      	add	r2, r3
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	619a      	str	r2, [r3, #24]
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	68da      	ldr	r2, [r3, #12]
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	699b      	ldr	r3, [r3, #24]
 8008938:	429a      	cmp	r2, r3
 800893a:	bf38      	it	cc
 800893c:	461a      	movcc	r2, r3
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	60da      	str	r2, [r3, #12]
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	681a      	ldr	r2, [r3, #0]
 8008946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008948:	441a      	add	r2, r3
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	601a      	str	r2, [r3, #0]
 800894e:	687a      	ldr	r2, [r7, #4]
 8008950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008952:	1ad3      	subs	r3, r2, r3
 8008954:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2b00      	cmp	r3, #0
 800895a:	f47f aeb5 	bne.w	80086c8 <f_write+0x76>
 800895e:	e000      	b.n	8008962 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008960:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	7d1b      	ldrb	r3, [r3, #20]
 8008966:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800896a:	b2da      	uxtb	r2, r3
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8008970:	2300      	movs	r3, #0
}
 8008972:	4618      	mov	r0, r3
 8008974:	3730      	adds	r7, #48	; 0x30
 8008976:	46bd      	mov	sp, r7
 8008978:	bd80      	pop	{r7, pc}

0800897a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800897a:	b580      	push	{r7, lr}
 800897c:	b086      	sub	sp, #24
 800897e:	af00      	add	r7, sp, #0
 8008980:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	f107 0208 	add.w	r2, r7, #8
 8008988:	4611      	mov	r1, r2
 800898a:	4618      	mov	r0, r3
 800898c:	f7ff faba 	bl	8007f04 <validate>
 8008990:	4603      	mov	r3, r0
 8008992:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008994:	7dfb      	ldrb	r3, [r7, #23]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d168      	bne.n	8008a6c <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	7d1b      	ldrb	r3, [r3, #20]
 800899e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d062      	beq.n	8008a6c <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	7d1b      	ldrb	r3, [r3, #20]
 80089aa:	b25b      	sxtb	r3, r3
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	da15      	bge.n	80089dc <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80089b0:	68bb      	ldr	r3, [r7, #8]
 80089b2:	7858      	ldrb	r0, [r3, #1]
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	6a1a      	ldr	r2, [r3, #32]
 80089be:	2301      	movs	r3, #1
 80089c0:	f7fd fc8e 	bl	80062e0 <disk_write>
 80089c4:	4603      	mov	r3, r0
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d001      	beq.n	80089ce <f_sync+0x54>
 80089ca:	2301      	movs	r3, #1
 80089cc:	e04f      	b.n	8008a6e <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	7d1b      	ldrb	r3, [r3, #20]
 80089d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089d6:	b2da      	uxtb	r2, r3
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80089dc:	f7fd fbe2 	bl	80061a4 <get_fattime>
 80089e0:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80089e2:	68ba      	ldr	r2, [r7, #8]
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089e8:	4619      	mov	r1, r3
 80089ea:	4610      	mov	r0, r2
 80089ec:	f7fd ff58 	bl	80068a0 <move_window>
 80089f0:	4603      	mov	r3, r0
 80089f2:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80089f4:	7dfb      	ldrb	r3, [r7, #23]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d138      	bne.n	8008a6c <f_sync+0xf2>
					dir = fp->dir_ptr;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089fe:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	330b      	adds	r3, #11
 8008a04:	781a      	ldrb	r2, [r3, #0]
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	330b      	adds	r3, #11
 8008a0a:	f042 0220 	orr.w	r2, r2, #32
 8008a0e:	b2d2      	uxtb	r2, r2
 8008a10:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	6818      	ldr	r0, [r3, #0]
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	689b      	ldr	r3, [r3, #8]
 8008a1a:	461a      	mov	r2, r3
 8008a1c:	68f9      	ldr	r1, [r7, #12]
 8008a1e:	f7fe fce6 	bl	80073ee <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	f103 021c 	add.w	r2, r3, #28
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	68db      	ldr	r3, [r3, #12]
 8008a2c:	4619      	mov	r1, r3
 8008a2e:	4610      	mov	r0, r2
 8008a30:	f7fd fcdc 	bl	80063ec <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	3316      	adds	r3, #22
 8008a38:	6939      	ldr	r1, [r7, #16]
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	f7fd fcd6 	bl	80063ec <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	3312      	adds	r3, #18
 8008a44:	2100      	movs	r1, #0
 8008a46:	4618      	mov	r0, r3
 8008a48:	f7fd fcb5 	bl	80063b6 <st_word>
					fs->wflag = 1;
 8008a4c:	68bb      	ldr	r3, [r7, #8]
 8008a4e:	2201      	movs	r2, #1
 8008a50:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8008a52:	68bb      	ldr	r3, [r7, #8]
 8008a54:	4618      	mov	r0, r3
 8008a56:	f7fd ff51 	bl	80068fc <sync_fs>
 8008a5a:	4603      	mov	r3, r0
 8008a5c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	7d1b      	ldrb	r3, [r3, #20]
 8008a62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a66:	b2da      	uxtb	r2, r3
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8008a6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a6e:	4618      	mov	r0, r3
 8008a70:	3718      	adds	r7, #24
 8008a72:	46bd      	mov	sp, r7
 8008a74:	bd80      	pop	{r7, pc}

08008a76 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8008a76:	b580      	push	{r7, lr}
 8008a78:	b084      	sub	sp, #16
 8008a7a:	af00      	add	r7, sp, #0
 8008a7c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008a7e:	6878      	ldr	r0, [r7, #4]
 8008a80:	f7ff ff7b 	bl	800897a <f_sync>
 8008a84:	4603      	mov	r3, r0
 8008a86:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008a88:	7bfb      	ldrb	r3, [r7, #15]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d118      	bne.n	8008ac0 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	f107 0208 	add.w	r2, r7, #8
 8008a94:	4611      	mov	r1, r2
 8008a96:	4618      	mov	r0, r3
 8008a98:	f7ff fa34 	bl	8007f04 <validate>
 8008a9c:	4603      	mov	r3, r0
 8008a9e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008aa0:	7bfb      	ldrb	r3, [r7, #15]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d10c      	bne.n	8008ac0 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	691b      	ldr	r3, [r3, #16]
 8008aaa:	4618      	mov	r0, r3
 8008aac:	f7fd fe54 	bl	8006758 <dec_lock>
 8008ab0:	4603      	mov	r3, r0
 8008ab2:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8008ab4:	7bfb      	ldrb	r3, [r7, #15]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d102      	bne.n	8008ac0 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	2200      	movs	r2, #0
 8008abe:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8008ac0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	3710      	adds	r7, #16
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	bd80      	pop	{r7, pc}

08008aca <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8008aca:	b580      	push	{r7, lr}
 8008acc:	b090      	sub	sp, #64	; 0x40
 8008ace:	af00      	add	r7, sp, #0
 8008ad0:	6078      	str	r0, [r7, #4]
 8008ad2:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	f107 0208 	add.w	r2, r7, #8
 8008ada:	4611      	mov	r1, r2
 8008adc:	4618      	mov	r0, r3
 8008ade:	f7ff fa11 	bl	8007f04 <validate>
 8008ae2:	4603      	mov	r3, r0
 8008ae4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8008ae8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d103      	bne.n	8008af8 <f_lseek+0x2e>
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	7d5b      	ldrb	r3, [r3, #21]
 8008af4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8008af8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d002      	beq.n	8008b06 <f_lseek+0x3c>
 8008b00:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008b04:	e201      	b.n	8008f0a <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	f000 80d9 	beq.w	8008cc2 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b16:	d15a      	bne.n	8008bce <f_lseek+0x104>
			tbl = fp->cltbl;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b1c:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8008b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b20:	1d1a      	adds	r2, r3, #4
 8008b22:	627a      	str	r2, [r7, #36]	; 0x24
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	617b      	str	r3, [r7, #20]
 8008b28:	2302      	movs	r3, #2
 8008b2a:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	689b      	ldr	r3, [r3, #8]
 8008b30:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8008b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d03a      	beq.n	8008bae <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8008b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b3a:	613b      	str	r3, [r7, #16]
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b42:	3302      	adds	r3, #2
 8008b44:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8008b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b48:	60fb      	str	r3, [r7, #12]
 8008b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b4c:	3301      	adds	r3, #1
 8008b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008b54:	4618      	mov	r0, r3
 8008b56:	f7fd ff60 	bl	8006a1a <get_fat>
 8008b5a:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8008b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b5e:	2b01      	cmp	r3, #1
 8008b60:	d804      	bhi.n	8008b6c <f_lseek+0xa2>
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	2202      	movs	r2, #2
 8008b66:	755a      	strb	r2, [r3, #21]
 8008b68:	2302      	movs	r3, #2
 8008b6a:	e1ce      	b.n	8008f0a <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b72:	d104      	bne.n	8008b7e <f_lseek+0xb4>
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2201      	movs	r2, #1
 8008b78:	755a      	strb	r2, [r3, #21]
 8008b7a:	2301      	movs	r3, #1
 8008b7c:	e1c5      	b.n	8008f0a <f_lseek+0x440>
					} while (cl == pcl + 1);
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	3301      	adds	r3, #1
 8008b82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b84:	429a      	cmp	r2, r3
 8008b86:	d0de      	beq.n	8008b46 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8008b88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b8a:	697b      	ldr	r3, [r7, #20]
 8008b8c:	429a      	cmp	r2, r3
 8008b8e:	d809      	bhi.n	8008ba4 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8008b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b92:	1d1a      	adds	r2, r3, #4
 8008b94:	627a      	str	r2, [r7, #36]	; 0x24
 8008b96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b98:	601a      	str	r2, [r3, #0]
 8008b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b9c:	1d1a      	adds	r2, r3, #4
 8008b9e:	627a      	str	r2, [r7, #36]	; 0x24
 8008ba0:	693a      	ldr	r2, [r7, #16]
 8008ba2:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8008ba4:	68bb      	ldr	r3, [r7, #8]
 8008ba6:	699b      	ldr	r3, [r3, #24]
 8008ba8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008baa:	429a      	cmp	r2, r3
 8008bac:	d3c4      	bcc.n	8008b38 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008bb4:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8008bb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008bb8:	697b      	ldr	r3, [r7, #20]
 8008bba:	429a      	cmp	r2, r3
 8008bbc:	d803      	bhi.n	8008bc6 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8008bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	601a      	str	r2, [r3, #0]
 8008bc4:	e19f      	b.n	8008f06 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8008bc6:	2311      	movs	r3, #17
 8008bc8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8008bcc:	e19b      	b.n	8008f06 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	68db      	ldr	r3, [r3, #12]
 8008bd2:	683a      	ldr	r2, [r7, #0]
 8008bd4:	429a      	cmp	r2, r3
 8008bd6:	d902      	bls.n	8008bde <f_lseek+0x114>
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	68db      	ldr	r3, [r3, #12]
 8008bdc:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	683a      	ldr	r2, [r7, #0]
 8008be2:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	f000 818d 	beq.w	8008f06 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	3b01      	subs	r3, #1
 8008bf0:	4619      	mov	r1, r3
 8008bf2:	6878      	ldr	r0, [r7, #4]
 8008bf4:	f7fe f9fe 	bl	8006ff4 <clmt_clust>
 8008bf8:	4602      	mov	r2, r0
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8008bfe:	68ba      	ldr	r2, [r7, #8]
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	69db      	ldr	r3, [r3, #28]
 8008c04:	4619      	mov	r1, r3
 8008c06:	4610      	mov	r0, r2
 8008c08:	f7fd fee8 	bl	80069dc <clust2sect>
 8008c0c:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8008c0e:	69bb      	ldr	r3, [r7, #24]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d104      	bne.n	8008c1e <f_lseek+0x154>
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2202      	movs	r2, #2
 8008c18:	755a      	strb	r2, [r3, #21]
 8008c1a:	2302      	movs	r3, #2
 8008c1c:	e175      	b.n	8008f0a <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	3b01      	subs	r3, #1
 8008c22:	68ba      	ldr	r2, [r7, #8]
 8008c24:	8992      	ldrh	r2, [r2, #12]
 8008c26:	fbb3 f3f2 	udiv	r3, r3, r2
 8008c2a:	68ba      	ldr	r2, [r7, #8]
 8008c2c:	8952      	ldrh	r2, [r2, #10]
 8008c2e:	3a01      	subs	r2, #1
 8008c30:	4013      	ands	r3, r2
 8008c32:	69ba      	ldr	r2, [r7, #24]
 8008c34:	4413      	add	r3, r2
 8008c36:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	699b      	ldr	r3, [r3, #24]
 8008c3c:	68ba      	ldr	r2, [r7, #8]
 8008c3e:	8992      	ldrh	r2, [r2, #12]
 8008c40:	fbb3 f1f2 	udiv	r1, r3, r2
 8008c44:	fb02 f201 	mul.w	r2, r2, r1
 8008c48:	1a9b      	subs	r3, r3, r2
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	f000 815b 	beq.w	8008f06 <f_lseek+0x43c>
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	6a1b      	ldr	r3, [r3, #32]
 8008c54:	69ba      	ldr	r2, [r7, #24]
 8008c56:	429a      	cmp	r2, r3
 8008c58:	f000 8155 	beq.w	8008f06 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	7d1b      	ldrb	r3, [r3, #20]
 8008c60:	b25b      	sxtb	r3, r3
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	da18      	bge.n	8008c98 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008c66:	68bb      	ldr	r3, [r7, #8]
 8008c68:	7858      	ldrb	r0, [r3, #1]
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	6a1a      	ldr	r2, [r3, #32]
 8008c74:	2301      	movs	r3, #1
 8008c76:	f7fd fb33 	bl	80062e0 <disk_write>
 8008c7a:	4603      	mov	r3, r0
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d004      	beq.n	8008c8a <f_lseek+0x1c0>
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2201      	movs	r2, #1
 8008c84:	755a      	strb	r2, [r3, #21]
 8008c86:	2301      	movs	r3, #1
 8008c88:	e13f      	b.n	8008f0a <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	7d1b      	ldrb	r3, [r3, #20]
 8008c8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c92:	b2da      	uxtb	r2, r3
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8008c98:	68bb      	ldr	r3, [r7, #8]
 8008c9a:	7858      	ldrb	r0, [r3, #1]
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008ca2:	2301      	movs	r3, #1
 8008ca4:	69ba      	ldr	r2, [r7, #24]
 8008ca6:	f7fd fb03 	bl	80062b0 <disk_read>
 8008caa:	4603      	mov	r3, r0
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d004      	beq.n	8008cba <f_lseek+0x1f0>
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2201      	movs	r2, #1
 8008cb4:	755a      	strb	r2, [r3, #21]
 8008cb6:	2301      	movs	r3, #1
 8008cb8:	e127      	b.n	8008f0a <f_lseek+0x440>
#endif
					fp->sect = dsc;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	69ba      	ldr	r2, [r7, #24]
 8008cbe:	621a      	str	r2, [r3, #32]
 8008cc0:	e121      	b.n	8008f06 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	68db      	ldr	r3, [r3, #12]
 8008cc6:	683a      	ldr	r2, [r7, #0]
 8008cc8:	429a      	cmp	r2, r3
 8008cca:	d908      	bls.n	8008cde <f_lseek+0x214>
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	7d1b      	ldrb	r3, [r3, #20]
 8008cd0:	f003 0302 	and.w	r3, r3, #2
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d102      	bne.n	8008cde <f_lseek+0x214>
			ofs = fp->obj.objsize;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	68db      	ldr	r3, [r3, #12]
 8008cdc:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	699b      	ldr	r3, [r3, #24]
 8008ce2:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	637b      	str	r3, [r7, #52]	; 0x34
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008cec:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	f000 80b5 	beq.w	8008e60 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8008cf6:	68bb      	ldr	r3, [r7, #8]
 8008cf8:	895b      	ldrh	r3, [r3, #10]
 8008cfa:	461a      	mov	r2, r3
 8008cfc:	68bb      	ldr	r3, [r7, #8]
 8008cfe:	899b      	ldrh	r3, [r3, #12]
 8008d00:	fb03 f302 	mul.w	r3, r3, r2
 8008d04:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8008d06:	6a3b      	ldr	r3, [r7, #32]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d01b      	beq.n	8008d44 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	1e5a      	subs	r2, r3, #1
 8008d10:	69fb      	ldr	r3, [r7, #28]
 8008d12:	fbb2 f2f3 	udiv	r2, r2, r3
 8008d16:	6a3b      	ldr	r3, [r7, #32]
 8008d18:	1e59      	subs	r1, r3, #1
 8008d1a:	69fb      	ldr	r3, [r7, #28]
 8008d1c:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8008d20:	429a      	cmp	r2, r3
 8008d22:	d30f      	bcc.n	8008d44 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8008d24:	6a3b      	ldr	r3, [r7, #32]
 8008d26:	1e5a      	subs	r2, r3, #1
 8008d28:	69fb      	ldr	r3, [r7, #28]
 8008d2a:	425b      	negs	r3, r3
 8008d2c:	401a      	ands	r2, r3
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	699b      	ldr	r3, [r3, #24]
 8008d36:	683a      	ldr	r2, [r7, #0]
 8008d38:	1ad3      	subs	r3, r2, r3
 8008d3a:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	69db      	ldr	r3, [r3, #28]
 8008d40:	63bb      	str	r3, [r7, #56]	; 0x38
 8008d42:	e022      	b.n	8008d8a <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	689b      	ldr	r3, [r3, #8]
 8008d48:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8008d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d119      	bne.n	8008d84 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	2100      	movs	r1, #0
 8008d54:	4618      	mov	r0, r3
 8008d56:	f7fe f8b5 	bl	8006ec4 <create_chain>
 8008d5a:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008d5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d5e:	2b01      	cmp	r3, #1
 8008d60:	d104      	bne.n	8008d6c <f_lseek+0x2a2>
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	2202      	movs	r2, #2
 8008d66:	755a      	strb	r2, [r3, #21]
 8008d68:	2302      	movs	r3, #2
 8008d6a:	e0ce      	b.n	8008f0a <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d72:	d104      	bne.n	8008d7e <f_lseek+0x2b4>
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	2201      	movs	r2, #1
 8008d78:	755a      	strb	r2, [r3, #21]
 8008d7a:	2301      	movs	r3, #1
 8008d7c:	e0c5      	b.n	8008f0a <f_lseek+0x440>
					fp->obj.sclust = clst;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008d82:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008d88:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8008d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d067      	beq.n	8008e60 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 8008d90:	e03a      	b.n	8008e08 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 8008d92:	683a      	ldr	r2, [r7, #0]
 8008d94:	69fb      	ldr	r3, [r7, #28]
 8008d96:	1ad3      	subs	r3, r2, r3
 8008d98:	603b      	str	r3, [r7, #0]
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	699a      	ldr	r2, [r3, #24]
 8008d9e:	69fb      	ldr	r3, [r7, #28]
 8008da0:	441a      	add	r2, r3
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	7d1b      	ldrb	r3, [r3, #20]
 8008daa:	f003 0302 	and.w	r3, r3, #2
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d00b      	beq.n	8008dca <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008db6:	4618      	mov	r0, r3
 8008db8:	f7fe f884 	bl	8006ec4 <create_chain>
 8008dbc:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8008dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d108      	bne.n	8008dd6 <f_lseek+0x30c>
							ofs = 0; break;
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	603b      	str	r3, [r7, #0]
 8008dc8:	e022      	b.n	8008e10 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008dce:	4618      	mov	r0, r3
 8008dd0:	f7fd fe23 	bl	8006a1a <get_fat>
 8008dd4:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ddc:	d104      	bne.n	8008de8 <f_lseek+0x31e>
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	2201      	movs	r2, #1
 8008de2:	755a      	strb	r2, [r3, #21]
 8008de4:	2301      	movs	r3, #1
 8008de6:	e090      	b.n	8008f0a <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8008de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dea:	2b01      	cmp	r3, #1
 8008dec:	d904      	bls.n	8008df8 <f_lseek+0x32e>
 8008dee:	68bb      	ldr	r3, [r7, #8]
 8008df0:	699b      	ldr	r3, [r3, #24]
 8008df2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008df4:	429a      	cmp	r2, r3
 8008df6:	d304      	bcc.n	8008e02 <f_lseek+0x338>
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2202      	movs	r2, #2
 8008dfc:	755a      	strb	r2, [r3, #21]
 8008dfe:	2302      	movs	r3, #2
 8008e00:	e083      	b.n	8008f0a <f_lseek+0x440>
					fp->clust = clst;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008e06:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8008e08:	683a      	ldr	r2, [r7, #0]
 8008e0a:	69fb      	ldr	r3, [r7, #28]
 8008e0c:	429a      	cmp	r2, r3
 8008e0e:	d8c0      	bhi.n	8008d92 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	699a      	ldr	r2, [r3, #24]
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	441a      	add	r2, r3
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8008e1c:	68bb      	ldr	r3, [r7, #8]
 8008e1e:	899b      	ldrh	r3, [r3, #12]
 8008e20:	461a      	mov	r2, r3
 8008e22:	683b      	ldr	r3, [r7, #0]
 8008e24:	fbb3 f1f2 	udiv	r1, r3, r2
 8008e28:	fb02 f201 	mul.w	r2, r2, r1
 8008e2c:	1a9b      	subs	r3, r3, r2
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d016      	beq.n	8008e60 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8008e32:	68bb      	ldr	r3, [r7, #8]
 8008e34:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008e36:	4618      	mov	r0, r3
 8008e38:	f7fd fdd0 	bl	80069dc <clust2sect>
 8008e3c:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8008e3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d104      	bne.n	8008e4e <f_lseek+0x384>
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2202      	movs	r2, #2
 8008e48:	755a      	strb	r2, [r3, #21]
 8008e4a:	2302      	movs	r3, #2
 8008e4c:	e05d      	b.n	8008f0a <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 8008e4e:	68bb      	ldr	r3, [r7, #8]
 8008e50:	899b      	ldrh	r3, [r3, #12]
 8008e52:	461a      	mov	r2, r3
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	fbb3 f3f2 	udiv	r3, r3, r2
 8008e5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008e5c:	4413      	add	r3, r2
 8008e5e:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	699a      	ldr	r2, [r3, #24]
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	68db      	ldr	r3, [r3, #12]
 8008e68:	429a      	cmp	r2, r3
 8008e6a:	d90a      	bls.n	8008e82 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	699a      	ldr	r2, [r3, #24]
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	7d1b      	ldrb	r3, [r3, #20]
 8008e78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e7c:	b2da      	uxtb	r2, r3
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	699b      	ldr	r3, [r3, #24]
 8008e86:	68ba      	ldr	r2, [r7, #8]
 8008e88:	8992      	ldrh	r2, [r2, #12]
 8008e8a:	fbb3 f1f2 	udiv	r1, r3, r2
 8008e8e:	fb02 f201 	mul.w	r2, r2, r1
 8008e92:	1a9b      	subs	r3, r3, r2
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d036      	beq.n	8008f06 <f_lseek+0x43c>
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	6a1b      	ldr	r3, [r3, #32]
 8008e9c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008e9e:	429a      	cmp	r2, r3
 8008ea0:	d031      	beq.n	8008f06 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	7d1b      	ldrb	r3, [r3, #20]
 8008ea6:	b25b      	sxtb	r3, r3
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	da18      	bge.n	8008ede <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008eac:	68bb      	ldr	r3, [r7, #8]
 8008eae:	7858      	ldrb	r0, [r3, #1]
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	6a1a      	ldr	r2, [r3, #32]
 8008eba:	2301      	movs	r3, #1
 8008ebc:	f7fd fa10 	bl	80062e0 <disk_write>
 8008ec0:	4603      	mov	r3, r0
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d004      	beq.n	8008ed0 <f_lseek+0x406>
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	2201      	movs	r2, #1
 8008eca:	755a      	strb	r2, [r3, #21]
 8008ecc:	2301      	movs	r3, #1
 8008ece:	e01c      	b.n	8008f0a <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	7d1b      	ldrb	r3, [r3, #20]
 8008ed4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ed8:	b2da      	uxtb	r2, r3
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8008ede:	68bb      	ldr	r3, [r7, #8]
 8008ee0:	7858      	ldrb	r0, [r3, #1]
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008ee8:	2301      	movs	r3, #1
 8008eea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008eec:	f7fd f9e0 	bl	80062b0 <disk_read>
 8008ef0:	4603      	mov	r3, r0
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d004      	beq.n	8008f00 <f_lseek+0x436>
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	2201      	movs	r2, #1
 8008efa:	755a      	strb	r2, [r3, #21]
 8008efc:	2301      	movs	r3, #1
 8008efe:	e004      	b.n	8008f0a <f_lseek+0x440>
#endif
			fp->sect = nsect;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008f04:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8008f06:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	3740      	adds	r7, #64	; 0x40
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bd80      	pop	{r7, pc}

08008f12 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8008f12:	b580      	push	{r7, lr}
 8008f14:	b086      	sub	sp, #24
 8008f16:	af00      	add	r7, sp, #0
 8008f18:	6078      	str	r0, [r7, #4]
 8008f1a:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d101      	bne.n	8008f26 <f_opendir+0x14>
 8008f22:	2309      	movs	r3, #9
 8008f24:	e064      	b.n	8008ff0 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 8008f2a:	f107 010c 	add.w	r1, r7, #12
 8008f2e:	463b      	mov	r3, r7
 8008f30:	2200      	movs	r2, #0
 8008f32:	4618      	mov	r0, r3
 8008f34:	f7fe fd62 	bl	80079fc <find_volume>
 8008f38:	4603      	mov	r3, r0
 8008f3a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008f3c:	7dfb      	ldrb	r3, [r7, #23]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d14f      	bne.n	8008fe2 <f_opendir+0xd0>
		obj->fs = fs;
 8008f42:	68fa      	ldr	r2, [r7, #12]
 8008f44:	693b      	ldr	r3, [r7, #16]
 8008f46:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8008f48:	683b      	ldr	r3, [r7, #0]
 8008f4a:	4619      	mov	r1, r3
 8008f4c:	6878      	ldr	r0, [r7, #4]
 8008f4e:	f7fe fc45 	bl	80077dc <follow_path>
 8008f52:	4603      	mov	r3, r0
 8008f54:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8008f56:	7dfb      	ldrb	r3, [r7, #23]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d13d      	bne.n	8008fd8 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008f62:	b25b      	sxtb	r3, r3
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	db12      	blt.n	8008f8e <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8008f68:	693b      	ldr	r3, [r7, #16]
 8008f6a:	799b      	ldrb	r3, [r3, #6]
 8008f6c:	f003 0310 	and.w	r3, r3, #16
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d00a      	beq.n	8008f8a <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8008f74:	68fa      	ldr	r2, [r7, #12]
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	6a1b      	ldr	r3, [r3, #32]
 8008f7a:	4619      	mov	r1, r3
 8008f7c:	4610      	mov	r0, r2
 8008f7e:	f7fe fa17 	bl	80073b0 <ld_clust>
 8008f82:	4602      	mov	r2, r0
 8008f84:	693b      	ldr	r3, [r7, #16]
 8008f86:	609a      	str	r2, [r3, #8]
 8008f88:	e001      	b.n	8008f8e <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8008f8a:	2305      	movs	r3, #5
 8008f8c:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 8008f8e:	7dfb      	ldrb	r3, [r7, #23]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d121      	bne.n	8008fd8 <f_opendir+0xc6>
				obj->id = fs->id;
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	88da      	ldrh	r2, [r3, #6]
 8008f98:	693b      	ldr	r3, [r7, #16]
 8008f9a:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8008f9c:	2100      	movs	r1, #0
 8008f9e:	6878      	ldr	r0, [r7, #4]
 8008fa0:	f7fe f860 	bl	8007064 <dir_sdi>
 8008fa4:	4603      	mov	r3, r0
 8008fa6:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8008fa8:	7dfb      	ldrb	r3, [r7, #23]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d114      	bne.n	8008fd8 <f_opendir+0xc6>
					if (obj->sclust) {
 8008fae:	693b      	ldr	r3, [r7, #16]
 8008fb0:	689b      	ldr	r3, [r3, #8]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d00d      	beq.n	8008fd2 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8008fb6:	2100      	movs	r1, #0
 8008fb8:	6878      	ldr	r0, [r7, #4]
 8008fba:	f7fd fb3f 	bl	800663c <inc_lock>
 8008fbe:	4602      	mov	r2, r0
 8008fc0:	693b      	ldr	r3, [r7, #16]
 8008fc2:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8008fc4:	693b      	ldr	r3, [r7, #16]
 8008fc6:	691b      	ldr	r3, [r3, #16]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d105      	bne.n	8008fd8 <f_opendir+0xc6>
 8008fcc:	2312      	movs	r3, #18
 8008fce:	75fb      	strb	r3, [r7, #23]
 8008fd0:	e002      	b.n	8008fd8 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8008fd2:	693b      	ldr	r3, [r7, #16]
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8008fd8:	7dfb      	ldrb	r3, [r7, #23]
 8008fda:	2b04      	cmp	r3, #4
 8008fdc:	d101      	bne.n	8008fe2 <f_opendir+0xd0>
 8008fde:	2305      	movs	r3, #5
 8008fe0:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8008fe2:	7dfb      	ldrb	r3, [r7, #23]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d002      	beq.n	8008fee <f_opendir+0xdc>
 8008fe8:	693b      	ldr	r3, [r7, #16]
 8008fea:	2200      	movs	r2, #0
 8008fec:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8008fee:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	3718      	adds	r7, #24
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	bd80      	pop	{r7, pc}

08008ff8 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b084      	sub	sp, #16
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	f107 0208 	add.w	r2, r7, #8
 8009006:	4611      	mov	r1, r2
 8009008:	4618      	mov	r0, r3
 800900a:	f7fe ff7b 	bl	8007f04 <validate>
 800900e:	4603      	mov	r3, r0
 8009010:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8009012:	7bfb      	ldrb	r3, [r7, #15]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d110      	bne.n	800903a <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	691b      	ldr	r3, [r3, #16]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d006      	beq.n	800902e <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	691b      	ldr	r3, [r3, #16]
 8009024:	4618      	mov	r0, r3
 8009026:	f7fd fb97 	bl	8006758 <dec_lock>
 800902a:	4603      	mov	r3, r0
 800902c:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800902e:	7bfb      	ldrb	r3, [r7, #15]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d102      	bne.n	800903a <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2200      	movs	r2, #0
 8009038:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 800903a:	7bfb      	ldrb	r3, [r7, #15]
}
 800903c:	4618      	mov	r0, r3
 800903e:	3710      	adds	r7, #16
 8009040:	46bd      	mov	sp, r7
 8009042:	bd80      	pop	{r7, pc}

08009044 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b084      	sub	sp, #16
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
 800904c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	f107 0208 	add.w	r2, r7, #8
 8009054:	4611      	mov	r1, r2
 8009056:	4618      	mov	r0, r3
 8009058:	f7fe ff54 	bl	8007f04 <validate>
 800905c:	4603      	mov	r3, r0
 800905e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8009060:	7bfb      	ldrb	r3, [r7, #15]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d126      	bne.n	80090b4 <f_readdir+0x70>
		if (!fno) {
 8009066:	683b      	ldr	r3, [r7, #0]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d106      	bne.n	800907a <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800906c:	2100      	movs	r1, #0
 800906e:	6878      	ldr	r0, [r7, #4]
 8009070:	f7fd fff8 	bl	8007064 <dir_sdi>
 8009074:	4603      	mov	r3, r0
 8009076:	73fb      	strb	r3, [r7, #15]
 8009078:	e01c      	b.n	80090b4 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800907a:	2100      	movs	r1, #0
 800907c:	6878      	ldr	r0, [r7, #4]
 800907e:	f7fe f9d6 	bl	800742e <dir_read>
 8009082:	4603      	mov	r3, r0
 8009084:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8009086:	7bfb      	ldrb	r3, [r7, #15]
 8009088:	2b04      	cmp	r3, #4
 800908a:	d101      	bne.n	8009090 <f_readdir+0x4c>
 800908c:	2300      	movs	r3, #0
 800908e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 8009090:	7bfb      	ldrb	r3, [r7, #15]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d10e      	bne.n	80090b4 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 8009096:	6839      	ldr	r1, [r7, #0]
 8009098:	6878      	ldr	r0, [r7, #4]
 800909a:	f7fe faac 	bl	80075f6 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800909e:	2100      	movs	r1, #0
 80090a0:	6878      	ldr	r0, [r7, #4]
 80090a2:	f7fe f868 	bl	8007176 <dir_next>
 80090a6:	4603      	mov	r3, r0
 80090a8:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 80090aa:	7bfb      	ldrb	r3, [r7, #15]
 80090ac:	2b04      	cmp	r3, #4
 80090ae:	d101      	bne.n	80090b4 <f_readdir+0x70>
 80090b0:	2300      	movs	r3, #0
 80090b2:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 80090b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80090b6:	4618      	mov	r0, r3
 80090b8:	3710      	adds	r7, #16
 80090ba:	46bd      	mov	sp, r7
 80090bc:	bd80      	pop	{r7, pc}

080090be <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 80090be:	b580      	push	{r7, lr}
 80090c0:	b092      	sub	sp, #72	; 0x48
 80090c2:	af00      	add	r7, sp, #0
 80090c4:	60f8      	str	r0, [r7, #12]
 80090c6:	60b9      	str	r1, [r7, #8]
 80090c8:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 80090ca:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80090ce:	f107 030c 	add.w	r3, r7, #12
 80090d2:	2200      	movs	r2, #0
 80090d4:	4618      	mov	r0, r3
 80090d6:	f7fe fc91 	bl	80079fc <find_volume>
 80090da:	4603      	mov	r3, r0
 80090dc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 80090e0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	f040 8099 	bne.w	800921c <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 80090ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 80090f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090f2:	695a      	ldr	r2, [r3, #20]
 80090f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090f6:	699b      	ldr	r3, [r3, #24]
 80090f8:	3b02      	subs	r3, #2
 80090fa:	429a      	cmp	r2, r3
 80090fc:	d804      	bhi.n	8009108 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 80090fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009100:	695a      	ldr	r2, [r3, #20]
 8009102:	68bb      	ldr	r3, [r7, #8]
 8009104:	601a      	str	r2, [r3, #0]
 8009106:	e089      	b.n	800921c <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8009108:	2300      	movs	r3, #0
 800910a:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800910c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800910e:	781b      	ldrb	r3, [r3, #0]
 8009110:	2b01      	cmp	r3, #1
 8009112:	d128      	bne.n	8009166 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8009114:	2302      	movs	r3, #2
 8009116:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800911a:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800911c:	f107 0314 	add.w	r3, r7, #20
 8009120:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009122:	4618      	mov	r0, r3
 8009124:	f7fd fc79 	bl	8006a1a <get_fat>
 8009128:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800912a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800912c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009130:	d103      	bne.n	800913a <f_getfree+0x7c>
 8009132:	2301      	movs	r3, #1
 8009134:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8009138:	e063      	b.n	8009202 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800913a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800913c:	2b01      	cmp	r3, #1
 800913e:	d103      	bne.n	8009148 <f_getfree+0x8a>
 8009140:	2302      	movs	r3, #2
 8009142:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8009146:	e05c      	b.n	8009202 <f_getfree+0x144>
					if (stat == 0) nfree++;
 8009148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800914a:	2b00      	cmp	r3, #0
 800914c:	d102      	bne.n	8009154 <f_getfree+0x96>
 800914e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009150:	3301      	adds	r3, #1
 8009152:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 8009154:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009156:	3301      	adds	r3, #1
 8009158:	63fb      	str	r3, [r7, #60]	; 0x3c
 800915a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800915c:	699b      	ldr	r3, [r3, #24]
 800915e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009160:	429a      	cmp	r2, r3
 8009162:	d3db      	bcc.n	800911c <f_getfree+0x5e>
 8009164:	e04d      	b.n	8009202 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8009166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009168:	699b      	ldr	r3, [r3, #24]
 800916a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800916c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800916e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009170:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 8009172:	2300      	movs	r3, #0
 8009174:	637b      	str	r3, [r7, #52]	; 0x34
 8009176:	2300      	movs	r3, #0
 8009178:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 800917a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800917c:	2b00      	cmp	r3, #0
 800917e:	d113      	bne.n	80091a8 <f_getfree+0xea>
							res = move_window(fs, sect++);
 8009180:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009184:	1c5a      	adds	r2, r3, #1
 8009186:	63ba      	str	r2, [r7, #56]	; 0x38
 8009188:	4619      	mov	r1, r3
 800918a:	f7fd fb89 	bl	80068a0 <move_window>
 800918e:	4603      	mov	r3, r0
 8009190:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 8009194:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009198:	2b00      	cmp	r3, #0
 800919a:	d131      	bne.n	8009200 <f_getfree+0x142>
							p = fs->win;
 800919c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800919e:	3334      	adds	r3, #52	; 0x34
 80091a0:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 80091a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091a4:	899b      	ldrh	r3, [r3, #12]
 80091a6:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 80091a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091aa:	781b      	ldrb	r3, [r3, #0]
 80091ac:	2b02      	cmp	r3, #2
 80091ae:	d10f      	bne.n	80091d0 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 80091b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80091b2:	f7fd f8c5 	bl	8006340 <ld_word>
 80091b6:	4603      	mov	r3, r0
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d102      	bne.n	80091c2 <f_getfree+0x104>
 80091bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091be:	3301      	adds	r3, #1
 80091c0:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 80091c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091c4:	3302      	adds	r3, #2
 80091c6:	633b      	str	r3, [r7, #48]	; 0x30
 80091c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091ca:	3b02      	subs	r3, #2
 80091cc:	637b      	str	r3, [r7, #52]	; 0x34
 80091ce:	e010      	b.n	80091f2 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 80091d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80091d2:	f7fd f8cd 	bl	8006370 <ld_dword>
 80091d6:	4603      	mov	r3, r0
 80091d8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d102      	bne.n	80091e6 <f_getfree+0x128>
 80091e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091e2:	3301      	adds	r3, #1
 80091e4:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 80091e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091e8:	3304      	adds	r3, #4
 80091ea:	633b      	str	r3, [r7, #48]	; 0x30
 80091ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091ee:	3b04      	subs	r3, #4
 80091f0:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 80091f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091f4:	3b01      	subs	r3, #1
 80091f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80091f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d1bd      	bne.n	800917a <f_getfree+0xbc>
 80091fe:	e000      	b.n	8009202 <f_getfree+0x144>
							if (res != FR_OK) break;
 8009200:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8009202:	68bb      	ldr	r3, [r7, #8]
 8009204:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009206:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8009208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800920a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800920c:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800920e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009210:	791a      	ldrb	r2, [r3, #4]
 8009212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009214:	f042 0201 	orr.w	r2, r2, #1
 8009218:	b2d2      	uxtb	r2, r2
 800921a:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800921c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8009220:	4618      	mov	r0, r3
 8009222:	3748      	adds	r7, #72	; 0x48
 8009224:	46bd      	mov	sp, r7
 8009226:	bd80      	pop	{r7, pc}

08009228 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009228:	b480      	push	{r7}
 800922a:	b087      	sub	sp, #28
 800922c:	af00      	add	r7, sp, #0
 800922e:	60f8      	str	r0, [r7, #12]
 8009230:	60b9      	str	r1, [r7, #8]
 8009232:	4613      	mov	r3, r2
 8009234:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009236:	2301      	movs	r3, #1
 8009238:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800923a:	2300      	movs	r3, #0
 800923c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800923e:	4b1f      	ldr	r3, [pc, #124]	; (80092bc <FATFS_LinkDriverEx+0x94>)
 8009240:	7a5b      	ldrb	r3, [r3, #9]
 8009242:	b2db      	uxtb	r3, r3
 8009244:	2b00      	cmp	r3, #0
 8009246:	d131      	bne.n	80092ac <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009248:	4b1c      	ldr	r3, [pc, #112]	; (80092bc <FATFS_LinkDriverEx+0x94>)
 800924a:	7a5b      	ldrb	r3, [r3, #9]
 800924c:	b2db      	uxtb	r3, r3
 800924e:	461a      	mov	r2, r3
 8009250:	4b1a      	ldr	r3, [pc, #104]	; (80092bc <FATFS_LinkDriverEx+0x94>)
 8009252:	2100      	movs	r1, #0
 8009254:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8009256:	4b19      	ldr	r3, [pc, #100]	; (80092bc <FATFS_LinkDriverEx+0x94>)
 8009258:	7a5b      	ldrb	r3, [r3, #9]
 800925a:	b2db      	uxtb	r3, r3
 800925c:	4a17      	ldr	r2, [pc, #92]	; (80092bc <FATFS_LinkDriverEx+0x94>)
 800925e:	009b      	lsls	r3, r3, #2
 8009260:	4413      	add	r3, r2
 8009262:	68fa      	ldr	r2, [r7, #12]
 8009264:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8009266:	4b15      	ldr	r3, [pc, #84]	; (80092bc <FATFS_LinkDriverEx+0x94>)
 8009268:	7a5b      	ldrb	r3, [r3, #9]
 800926a:	b2db      	uxtb	r3, r3
 800926c:	461a      	mov	r2, r3
 800926e:	4b13      	ldr	r3, [pc, #76]	; (80092bc <FATFS_LinkDriverEx+0x94>)
 8009270:	4413      	add	r3, r2
 8009272:	79fa      	ldrb	r2, [r7, #7]
 8009274:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009276:	4b11      	ldr	r3, [pc, #68]	; (80092bc <FATFS_LinkDriverEx+0x94>)
 8009278:	7a5b      	ldrb	r3, [r3, #9]
 800927a:	b2db      	uxtb	r3, r3
 800927c:	1c5a      	adds	r2, r3, #1
 800927e:	b2d1      	uxtb	r1, r2
 8009280:	4a0e      	ldr	r2, [pc, #56]	; (80092bc <FATFS_LinkDriverEx+0x94>)
 8009282:	7251      	strb	r1, [r2, #9]
 8009284:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009286:	7dbb      	ldrb	r3, [r7, #22]
 8009288:	3330      	adds	r3, #48	; 0x30
 800928a:	b2da      	uxtb	r2, r3
 800928c:	68bb      	ldr	r3, [r7, #8]
 800928e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009290:	68bb      	ldr	r3, [r7, #8]
 8009292:	3301      	adds	r3, #1
 8009294:	223a      	movs	r2, #58	; 0x3a
 8009296:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009298:	68bb      	ldr	r3, [r7, #8]
 800929a:	3302      	adds	r3, #2
 800929c:	222f      	movs	r2, #47	; 0x2f
 800929e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80092a0:	68bb      	ldr	r3, [r7, #8]
 80092a2:	3303      	adds	r3, #3
 80092a4:	2200      	movs	r2, #0
 80092a6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80092a8:	2300      	movs	r3, #0
 80092aa:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80092ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80092ae:	4618      	mov	r0, r3
 80092b0:	371c      	adds	r7, #28
 80092b2:	46bd      	mov	sp, r7
 80092b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b8:	4770      	bx	lr
 80092ba:	bf00      	nop
 80092bc:	200000f0 	.word	0x200000f0

080092c0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b082      	sub	sp, #8
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
 80092c8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80092ca:	2200      	movs	r2, #0
 80092cc:	6839      	ldr	r1, [r7, #0]
 80092ce:	6878      	ldr	r0, [r7, #4]
 80092d0:	f7ff ffaa 	bl	8009228 <FATFS_LinkDriverEx>
 80092d4:	4603      	mov	r3, r0
}
 80092d6:	4618      	mov	r0, r3
 80092d8:	3708      	adds	r7, #8
 80092da:	46bd      	mov	sp, r7
 80092dc:	bd80      	pop	{r7, pc}
	...

080092e0 <__errno>:
 80092e0:	4b01      	ldr	r3, [pc, #4]	; (80092e8 <__errno+0x8>)
 80092e2:	6818      	ldr	r0, [r3, #0]
 80092e4:	4770      	bx	lr
 80092e6:	bf00      	nop
 80092e8:	20000024 	.word	0x20000024

080092ec <__libc_init_array>:
 80092ec:	b570      	push	{r4, r5, r6, lr}
 80092ee:	4d0d      	ldr	r5, [pc, #52]	; (8009324 <__libc_init_array+0x38>)
 80092f0:	4c0d      	ldr	r4, [pc, #52]	; (8009328 <__libc_init_array+0x3c>)
 80092f2:	1b64      	subs	r4, r4, r5
 80092f4:	10a4      	asrs	r4, r4, #2
 80092f6:	2600      	movs	r6, #0
 80092f8:	42a6      	cmp	r6, r4
 80092fa:	d109      	bne.n	8009310 <__libc_init_array+0x24>
 80092fc:	4d0b      	ldr	r5, [pc, #44]	; (800932c <__libc_init_array+0x40>)
 80092fe:	4c0c      	ldr	r4, [pc, #48]	; (8009330 <__libc_init_array+0x44>)
 8009300:	f001 f9be 	bl	800a680 <_init>
 8009304:	1b64      	subs	r4, r4, r5
 8009306:	10a4      	asrs	r4, r4, #2
 8009308:	2600      	movs	r6, #0
 800930a:	42a6      	cmp	r6, r4
 800930c:	d105      	bne.n	800931a <__libc_init_array+0x2e>
 800930e:	bd70      	pop	{r4, r5, r6, pc}
 8009310:	f855 3b04 	ldr.w	r3, [r5], #4
 8009314:	4798      	blx	r3
 8009316:	3601      	adds	r6, #1
 8009318:	e7ee      	b.n	80092f8 <__libc_init_array+0xc>
 800931a:	f855 3b04 	ldr.w	r3, [r5], #4
 800931e:	4798      	blx	r3
 8009320:	3601      	adds	r6, #1
 8009322:	e7f2      	b.n	800930a <__libc_init_array+0x1e>
 8009324:	0800a924 	.word	0x0800a924
 8009328:	0800a924 	.word	0x0800a924
 800932c:	0800a924 	.word	0x0800a924
 8009330:	0800a928 	.word	0x0800a928

08009334 <memset>:
 8009334:	4402      	add	r2, r0
 8009336:	4603      	mov	r3, r0
 8009338:	4293      	cmp	r3, r2
 800933a:	d100      	bne.n	800933e <memset+0xa>
 800933c:	4770      	bx	lr
 800933e:	f803 1b01 	strb.w	r1, [r3], #1
 8009342:	e7f9      	b.n	8009338 <memset+0x4>

08009344 <iprintf>:
 8009344:	b40f      	push	{r0, r1, r2, r3}
 8009346:	4b0a      	ldr	r3, [pc, #40]	; (8009370 <iprintf+0x2c>)
 8009348:	b513      	push	{r0, r1, r4, lr}
 800934a:	681c      	ldr	r4, [r3, #0]
 800934c:	b124      	cbz	r4, 8009358 <iprintf+0x14>
 800934e:	69a3      	ldr	r3, [r4, #24]
 8009350:	b913      	cbnz	r3, 8009358 <iprintf+0x14>
 8009352:	4620      	mov	r0, r4
 8009354:	f000 fa7e 	bl	8009854 <__sinit>
 8009358:	ab05      	add	r3, sp, #20
 800935a:	9a04      	ldr	r2, [sp, #16]
 800935c:	68a1      	ldr	r1, [r4, #8]
 800935e:	9301      	str	r3, [sp, #4]
 8009360:	4620      	mov	r0, r4
 8009362:	f000 fdab 	bl	8009ebc <_vfiprintf_r>
 8009366:	b002      	add	sp, #8
 8009368:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800936c:	b004      	add	sp, #16
 800936e:	4770      	bx	lr
 8009370:	20000024 	.word	0x20000024

08009374 <_puts_r>:
 8009374:	b570      	push	{r4, r5, r6, lr}
 8009376:	460e      	mov	r6, r1
 8009378:	4605      	mov	r5, r0
 800937a:	b118      	cbz	r0, 8009384 <_puts_r+0x10>
 800937c:	6983      	ldr	r3, [r0, #24]
 800937e:	b90b      	cbnz	r3, 8009384 <_puts_r+0x10>
 8009380:	f000 fa68 	bl	8009854 <__sinit>
 8009384:	69ab      	ldr	r3, [r5, #24]
 8009386:	68ac      	ldr	r4, [r5, #8]
 8009388:	b913      	cbnz	r3, 8009390 <_puts_r+0x1c>
 800938a:	4628      	mov	r0, r5
 800938c:	f000 fa62 	bl	8009854 <__sinit>
 8009390:	4b2c      	ldr	r3, [pc, #176]	; (8009444 <_puts_r+0xd0>)
 8009392:	429c      	cmp	r4, r3
 8009394:	d120      	bne.n	80093d8 <_puts_r+0x64>
 8009396:	686c      	ldr	r4, [r5, #4]
 8009398:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800939a:	07db      	lsls	r3, r3, #31
 800939c:	d405      	bmi.n	80093aa <_puts_r+0x36>
 800939e:	89a3      	ldrh	r3, [r4, #12]
 80093a0:	0598      	lsls	r0, r3, #22
 80093a2:	d402      	bmi.n	80093aa <_puts_r+0x36>
 80093a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80093a6:	f000 faf3 	bl	8009990 <__retarget_lock_acquire_recursive>
 80093aa:	89a3      	ldrh	r3, [r4, #12]
 80093ac:	0719      	lsls	r1, r3, #28
 80093ae:	d51d      	bpl.n	80093ec <_puts_r+0x78>
 80093b0:	6923      	ldr	r3, [r4, #16]
 80093b2:	b1db      	cbz	r3, 80093ec <_puts_r+0x78>
 80093b4:	3e01      	subs	r6, #1
 80093b6:	68a3      	ldr	r3, [r4, #8]
 80093b8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80093bc:	3b01      	subs	r3, #1
 80093be:	60a3      	str	r3, [r4, #8]
 80093c0:	bb39      	cbnz	r1, 8009412 <_puts_r+0x9e>
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	da38      	bge.n	8009438 <_puts_r+0xc4>
 80093c6:	4622      	mov	r2, r4
 80093c8:	210a      	movs	r1, #10
 80093ca:	4628      	mov	r0, r5
 80093cc:	f000 f868 	bl	80094a0 <__swbuf_r>
 80093d0:	3001      	adds	r0, #1
 80093d2:	d011      	beq.n	80093f8 <_puts_r+0x84>
 80093d4:	250a      	movs	r5, #10
 80093d6:	e011      	b.n	80093fc <_puts_r+0x88>
 80093d8:	4b1b      	ldr	r3, [pc, #108]	; (8009448 <_puts_r+0xd4>)
 80093da:	429c      	cmp	r4, r3
 80093dc:	d101      	bne.n	80093e2 <_puts_r+0x6e>
 80093de:	68ac      	ldr	r4, [r5, #8]
 80093e0:	e7da      	b.n	8009398 <_puts_r+0x24>
 80093e2:	4b1a      	ldr	r3, [pc, #104]	; (800944c <_puts_r+0xd8>)
 80093e4:	429c      	cmp	r4, r3
 80093e6:	bf08      	it	eq
 80093e8:	68ec      	ldreq	r4, [r5, #12]
 80093ea:	e7d5      	b.n	8009398 <_puts_r+0x24>
 80093ec:	4621      	mov	r1, r4
 80093ee:	4628      	mov	r0, r5
 80093f0:	f000 f8a8 	bl	8009544 <__swsetup_r>
 80093f4:	2800      	cmp	r0, #0
 80093f6:	d0dd      	beq.n	80093b4 <_puts_r+0x40>
 80093f8:	f04f 35ff 	mov.w	r5, #4294967295
 80093fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80093fe:	07da      	lsls	r2, r3, #31
 8009400:	d405      	bmi.n	800940e <_puts_r+0x9a>
 8009402:	89a3      	ldrh	r3, [r4, #12]
 8009404:	059b      	lsls	r3, r3, #22
 8009406:	d402      	bmi.n	800940e <_puts_r+0x9a>
 8009408:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800940a:	f000 fac2 	bl	8009992 <__retarget_lock_release_recursive>
 800940e:	4628      	mov	r0, r5
 8009410:	bd70      	pop	{r4, r5, r6, pc}
 8009412:	2b00      	cmp	r3, #0
 8009414:	da04      	bge.n	8009420 <_puts_r+0xac>
 8009416:	69a2      	ldr	r2, [r4, #24]
 8009418:	429a      	cmp	r2, r3
 800941a:	dc06      	bgt.n	800942a <_puts_r+0xb6>
 800941c:	290a      	cmp	r1, #10
 800941e:	d004      	beq.n	800942a <_puts_r+0xb6>
 8009420:	6823      	ldr	r3, [r4, #0]
 8009422:	1c5a      	adds	r2, r3, #1
 8009424:	6022      	str	r2, [r4, #0]
 8009426:	7019      	strb	r1, [r3, #0]
 8009428:	e7c5      	b.n	80093b6 <_puts_r+0x42>
 800942a:	4622      	mov	r2, r4
 800942c:	4628      	mov	r0, r5
 800942e:	f000 f837 	bl	80094a0 <__swbuf_r>
 8009432:	3001      	adds	r0, #1
 8009434:	d1bf      	bne.n	80093b6 <_puts_r+0x42>
 8009436:	e7df      	b.n	80093f8 <_puts_r+0x84>
 8009438:	6823      	ldr	r3, [r4, #0]
 800943a:	250a      	movs	r5, #10
 800943c:	1c5a      	adds	r2, r3, #1
 800943e:	6022      	str	r2, [r4, #0]
 8009440:	701d      	strb	r5, [r3, #0]
 8009442:	e7db      	b.n	80093fc <_puts_r+0x88>
 8009444:	0800a8a8 	.word	0x0800a8a8
 8009448:	0800a8c8 	.word	0x0800a8c8
 800944c:	0800a888 	.word	0x0800a888

08009450 <puts>:
 8009450:	4b02      	ldr	r3, [pc, #8]	; (800945c <puts+0xc>)
 8009452:	4601      	mov	r1, r0
 8009454:	6818      	ldr	r0, [r3, #0]
 8009456:	f7ff bf8d 	b.w	8009374 <_puts_r>
 800945a:	bf00      	nop
 800945c:	20000024 	.word	0x20000024

08009460 <siprintf>:
 8009460:	b40e      	push	{r1, r2, r3}
 8009462:	b500      	push	{lr}
 8009464:	b09c      	sub	sp, #112	; 0x70
 8009466:	ab1d      	add	r3, sp, #116	; 0x74
 8009468:	9002      	str	r0, [sp, #8]
 800946a:	9006      	str	r0, [sp, #24]
 800946c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009470:	4809      	ldr	r0, [pc, #36]	; (8009498 <siprintf+0x38>)
 8009472:	9107      	str	r1, [sp, #28]
 8009474:	9104      	str	r1, [sp, #16]
 8009476:	4909      	ldr	r1, [pc, #36]	; (800949c <siprintf+0x3c>)
 8009478:	f853 2b04 	ldr.w	r2, [r3], #4
 800947c:	9105      	str	r1, [sp, #20]
 800947e:	6800      	ldr	r0, [r0, #0]
 8009480:	9301      	str	r3, [sp, #4]
 8009482:	a902      	add	r1, sp, #8
 8009484:	f000 fbf0 	bl	8009c68 <_svfiprintf_r>
 8009488:	9b02      	ldr	r3, [sp, #8]
 800948a:	2200      	movs	r2, #0
 800948c:	701a      	strb	r2, [r3, #0]
 800948e:	b01c      	add	sp, #112	; 0x70
 8009490:	f85d eb04 	ldr.w	lr, [sp], #4
 8009494:	b003      	add	sp, #12
 8009496:	4770      	bx	lr
 8009498:	20000024 	.word	0x20000024
 800949c:	ffff0208 	.word	0xffff0208

080094a0 <__swbuf_r>:
 80094a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094a2:	460e      	mov	r6, r1
 80094a4:	4614      	mov	r4, r2
 80094a6:	4605      	mov	r5, r0
 80094a8:	b118      	cbz	r0, 80094b2 <__swbuf_r+0x12>
 80094aa:	6983      	ldr	r3, [r0, #24]
 80094ac:	b90b      	cbnz	r3, 80094b2 <__swbuf_r+0x12>
 80094ae:	f000 f9d1 	bl	8009854 <__sinit>
 80094b2:	4b21      	ldr	r3, [pc, #132]	; (8009538 <__swbuf_r+0x98>)
 80094b4:	429c      	cmp	r4, r3
 80094b6:	d12b      	bne.n	8009510 <__swbuf_r+0x70>
 80094b8:	686c      	ldr	r4, [r5, #4]
 80094ba:	69a3      	ldr	r3, [r4, #24]
 80094bc:	60a3      	str	r3, [r4, #8]
 80094be:	89a3      	ldrh	r3, [r4, #12]
 80094c0:	071a      	lsls	r2, r3, #28
 80094c2:	d52f      	bpl.n	8009524 <__swbuf_r+0x84>
 80094c4:	6923      	ldr	r3, [r4, #16]
 80094c6:	b36b      	cbz	r3, 8009524 <__swbuf_r+0x84>
 80094c8:	6923      	ldr	r3, [r4, #16]
 80094ca:	6820      	ldr	r0, [r4, #0]
 80094cc:	1ac0      	subs	r0, r0, r3
 80094ce:	6963      	ldr	r3, [r4, #20]
 80094d0:	b2f6      	uxtb	r6, r6
 80094d2:	4283      	cmp	r3, r0
 80094d4:	4637      	mov	r7, r6
 80094d6:	dc04      	bgt.n	80094e2 <__swbuf_r+0x42>
 80094d8:	4621      	mov	r1, r4
 80094da:	4628      	mov	r0, r5
 80094dc:	f000 f926 	bl	800972c <_fflush_r>
 80094e0:	bb30      	cbnz	r0, 8009530 <__swbuf_r+0x90>
 80094e2:	68a3      	ldr	r3, [r4, #8]
 80094e4:	3b01      	subs	r3, #1
 80094e6:	60a3      	str	r3, [r4, #8]
 80094e8:	6823      	ldr	r3, [r4, #0]
 80094ea:	1c5a      	adds	r2, r3, #1
 80094ec:	6022      	str	r2, [r4, #0]
 80094ee:	701e      	strb	r6, [r3, #0]
 80094f0:	6963      	ldr	r3, [r4, #20]
 80094f2:	3001      	adds	r0, #1
 80094f4:	4283      	cmp	r3, r0
 80094f6:	d004      	beq.n	8009502 <__swbuf_r+0x62>
 80094f8:	89a3      	ldrh	r3, [r4, #12]
 80094fa:	07db      	lsls	r3, r3, #31
 80094fc:	d506      	bpl.n	800950c <__swbuf_r+0x6c>
 80094fe:	2e0a      	cmp	r6, #10
 8009500:	d104      	bne.n	800950c <__swbuf_r+0x6c>
 8009502:	4621      	mov	r1, r4
 8009504:	4628      	mov	r0, r5
 8009506:	f000 f911 	bl	800972c <_fflush_r>
 800950a:	b988      	cbnz	r0, 8009530 <__swbuf_r+0x90>
 800950c:	4638      	mov	r0, r7
 800950e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009510:	4b0a      	ldr	r3, [pc, #40]	; (800953c <__swbuf_r+0x9c>)
 8009512:	429c      	cmp	r4, r3
 8009514:	d101      	bne.n	800951a <__swbuf_r+0x7a>
 8009516:	68ac      	ldr	r4, [r5, #8]
 8009518:	e7cf      	b.n	80094ba <__swbuf_r+0x1a>
 800951a:	4b09      	ldr	r3, [pc, #36]	; (8009540 <__swbuf_r+0xa0>)
 800951c:	429c      	cmp	r4, r3
 800951e:	bf08      	it	eq
 8009520:	68ec      	ldreq	r4, [r5, #12]
 8009522:	e7ca      	b.n	80094ba <__swbuf_r+0x1a>
 8009524:	4621      	mov	r1, r4
 8009526:	4628      	mov	r0, r5
 8009528:	f000 f80c 	bl	8009544 <__swsetup_r>
 800952c:	2800      	cmp	r0, #0
 800952e:	d0cb      	beq.n	80094c8 <__swbuf_r+0x28>
 8009530:	f04f 37ff 	mov.w	r7, #4294967295
 8009534:	e7ea      	b.n	800950c <__swbuf_r+0x6c>
 8009536:	bf00      	nop
 8009538:	0800a8a8 	.word	0x0800a8a8
 800953c:	0800a8c8 	.word	0x0800a8c8
 8009540:	0800a888 	.word	0x0800a888

08009544 <__swsetup_r>:
 8009544:	4b32      	ldr	r3, [pc, #200]	; (8009610 <__swsetup_r+0xcc>)
 8009546:	b570      	push	{r4, r5, r6, lr}
 8009548:	681d      	ldr	r5, [r3, #0]
 800954a:	4606      	mov	r6, r0
 800954c:	460c      	mov	r4, r1
 800954e:	b125      	cbz	r5, 800955a <__swsetup_r+0x16>
 8009550:	69ab      	ldr	r3, [r5, #24]
 8009552:	b913      	cbnz	r3, 800955a <__swsetup_r+0x16>
 8009554:	4628      	mov	r0, r5
 8009556:	f000 f97d 	bl	8009854 <__sinit>
 800955a:	4b2e      	ldr	r3, [pc, #184]	; (8009614 <__swsetup_r+0xd0>)
 800955c:	429c      	cmp	r4, r3
 800955e:	d10f      	bne.n	8009580 <__swsetup_r+0x3c>
 8009560:	686c      	ldr	r4, [r5, #4]
 8009562:	89a3      	ldrh	r3, [r4, #12]
 8009564:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009568:	0719      	lsls	r1, r3, #28
 800956a:	d42c      	bmi.n	80095c6 <__swsetup_r+0x82>
 800956c:	06dd      	lsls	r5, r3, #27
 800956e:	d411      	bmi.n	8009594 <__swsetup_r+0x50>
 8009570:	2309      	movs	r3, #9
 8009572:	6033      	str	r3, [r6, #0]
 8009574:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009578:	81a3      	strh	r3, [r4, #12]
 800957a:	f04f 30ff 	mov.w	r0, #4294967295
 800957e:	e03e      	b.n	80095fe <__swsetup_r+0xba>
 8009580:	4b25      	ldr	r3, [pc, #148]	; (8009618 <__swsetup_r+0xd4>)
 8009582:	429c      	cmp	r4, r3
 8009584:	d101      	bne.n	800958a <__swsetup_r+0x46>
 8009586:	68ac      	ldr	r4, [r5, #8]
 8009588:	e7eb      	b.n	8009562 <__swsetup_r+0x1e>
 800958a:	4b24      	ldr	r3, [pc, #144]	; (800961c <__swsetup_r+0xd8>)
 800958c:	429c      	cmp	r4, r3
 800958e:	bf08      	it	eq
 8009590:	68ec      	ldreq	r4, [r5, #12]
 8009592:	e7e6      	b.n	8009562 <__swsetup_r+0x1e>
 8009594:	0758      	lsls	r0, r3, #29
 8009596:	d512      	bpl.n	80095be <__swsetup_r+0x7a>
 8009598:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800959a:	b141      	cbz	r1, 80095ae <__swsetup_r+0x6a>
 800959c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80095a0:	4299      	cmp	r1, r3
 80095a2:	d002      	beq.n	80095aa <__swsetup_r+0x66>
 80095a4:	4630      	mov	r0, r6
 80095a6:	f000 fa59 	bl	8009a5c <_free_r>
 80095aa:	2300      	movs	r3, #0
 80095ac:	6363      	str	r3, [r4, #52]	; 0x34
 80095ae:	89a3      	ldrh	r3, [r4, #12]
 80095b0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80095b4:	81a3      	strh	r3, [r4, #12]
 80095b6:	2300      	movs	r3, #0
 80095b8:	6063      	str	r3, [r4, #4]
 80095ba:	6923      	ldr	r3, [r4, #16]
 80095bc:	6023      	str	r3, [r4, #0]
 80095be:	89a3      	ldrh	r3, [r4, #12]
 80095c0:	f043 0308 	orr.w	r3, r3, #8
 80095c4:	81a3      	strh	r3, [r4, #12]
 80095c6:	6923      	ldr	r3, [r4, #16]
 80095c8:	b94b      	cbnz	r3, 80095de <__swsetup_r+0x9a>
 80095ca:	89a3      	ldrh	r3, [r4, #12]
 80095cc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80095d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80095d4:	d003      	beq.n	80095de <__swsetup_r+0x9a>
 80095d6:	4621      	mov	r1, r4
 80095d8:	4630      	mov	r0, r6
 80095da:	f000 f9ff 	bl	80099dc <__smakebuf_r>
 80095de:	89a0      	ldrh	r0, [r4, #12]
 80095e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80095e4:	f010 0301 	ands.w	r3, r0, #1
 80095e8:	d00a      	beq.n	8009600 <__swsetup_r+0xbc>
 80095ea:	2300      	movs	r3, #0
 80095ec:	60a3      	str	r3, [r4, #8]
 80095ee:	6963      	ldr	r3, [r4, #20]
 80095f0:	425b      	negs	r3, r3
 80095f2:	61a3      	str	r3, [r4, #24]
 80095f4:	6923      	ldr	r3, [r4, #16]
 80095f6:	b943      	cbnz	r3, 800960a <__swsetup_r+0xc6>
 80095f8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80095fc:	d1ba      	bne.n	8009574 <__swsetup_r+0x30>
 80095fe:	bd70      	pop	{r4, r5, r6, pc}
 8009600:	0781      	lsls	r1, r0, #30
 8009602:	bf58      	it	pl
 8009604:	6963      	ldrpl	r3, [r4, #20]
 8009606:	60a3      	str	r3, [r4, #8]
 8009608:	e7f4      	b.n	80095f4 <__swsetup_r+0xb0>
 800960a:	2000      	movs	r0, #0
 800960c:	e7f7      	b.n	80095fe <__swsetup_r+0xba>
 800960e:	bf00      	nop
 8009610:	20000024 	.word	0x20000024
 8009614:	0800a8a8 	.word	0x0800a8a8
 8009618:	0800a8c8 	.word	0x0800a8c8
 800961c:	0800a888 	.word	0x0800a888

08009620 <__sflush_r>:
 8009620:	898a      	ldrh	r2, [r1, #12]
 8009622:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009626:	4605      	mov	r5, r0
 8009628:	0710      	lsls	r0, r2, #28
 800962a:	460c      	mov	r4, r1
 800962c:	d458      	bmi.n	80096e0 <__sflush_r+0xc0>
 800962e:	684b      	ldr	r3, [r1, #4]
 8009630:	2b00      	cmp	r3, #0
 8009632:	dc05      	bgt.n	8009640 <__sflush_r+0x20>
 8009634:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009636:	2b00      	cmp	r3, #0
 8009638:	dc02      	bgt.n	8009640 <__sflush_r+0x20>
 800963a:	2000      	movs	r0, #0
 800963c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009640:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009642:	2e00      	cmp	r6, #0
 8009644:	d0f9      	beq.n	800963a <__sflush_r+0x1a>
 8009646:	2300      	movs	r3, #0
 8009648:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800964c:	682f      	ldr	r7, [r5, #0]
 800964e:	602b      	str	r3, [r5, #0]
 8009650:	d032      	beq.n	80096b8 <__sflush_r+0x98>
 8009652:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009654:	89a3      	ldrh	r3, [r4, #12]
 8009656:	075a      	lsls	r2, r3, #29
 8009658:	d505      	bpl.n	8009666 <__sflush_r+0x46>
 800965a:	6863      	ldr	r3, [r4, #4]
 800965c:	1ac0      	subs	r0, r0, r3
 800965e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009660:	b10b      	cbz	r3, 8009666 <__sflush_r+0x46>
 8009662:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009664:	1ac0      	subs	r0, r0, r3
 8009666:	2300      	movs	r3, #0
 8009668:	4602      	mov	r2, r0
 800966a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800966c:	6a21      	ldr	r1, [r4, #32]
 800966e:	4628      	mov	r0, r5
 8009670:	47b0      	blx	r6
 8009672:	1c43      	adds	r3, r0, #1
 8009674:	89a3      	ldrh	r3, [r4, #12]
 8009676:	d106      	bne.n	8009686 <__sflush_r+0x66>
 8009678:	6829      	ldr	r1, [r5, #0]
 800967a:	291d      	cmp	r1, #29
 800967c:	d82c      	bhi.n	80096d8 <__sflush_r+0xb8>
 800967e:	4a2a      	ldr	r2, [pc, #168]	; (8009728 <__sflush_r+0x108>)
 8009680:	40ca      	lsrs	r2, r1
 8009682:	07d6      	lsls	r6, r2, #31
 8009684:	d528      	bpl.n	80096d8 <__sflush_r+0xb8>
 8009686:	2200      	movs	r2, #0
 8009688:	6062      	str	r2, [r4, #4]
 800968a:	04d9      	lsls	r1, r3, #19
 800968c:	6922      	ldr	r2, [r4, #16]
 800968e:	6022      	str	r2, [r4, #0]
 8009690:	d504      	bpl.n	800969c <__sflush_r+0x7c>
 8009692:	1c42      	adds	r2, r0, #1
 8009694:	d101      	bne.n	800969a <__sflush_r+0x7a>
 8009696:	682b      	ldr	r3, [r5, #0]
 8009698:	b903      	cbnz	r3, 800969c <__sflush_r+0x7c>
 800969a:	6560      	str	r0, [r4, #84]	; 0x54
 800969c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800969e:	602f      	str	r7, [r5, #0]
 80096a0:	2900      	cmp	r1, #0
 80096a2:	d0ca      	beq.n	800963a <__sflush_r+0x1a>
 80096a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80096a8:	4299      	cmp	r1, r3
 80096aa:	d002      	beq.n	80096b2 <__sflush_r+0x92>
 80096ac:	4628      	mov	r0, r5
 80096ae:	f000 f9d5 	bl	8009a5c <_free_r>
 80096b2:	2000      	movs	r0, #0
 80096b4:	6360      	str	r0, [r4, #52]	; 0x34
 80096b6:	e7c1      	b.n	800963c <__sflush_r+0x1c>
 80096b8:	6a21      	ldr	r1, [r4, #32]
 80096ba:	2301      	movs	r3, #1
 80096bc:	4628      	mov	r0, r5
 80096be:	47b0      	blx	r6
 80096c0:	1c41      	adds	r1, r0, #1
 80096c2:	d1c7      	bne.n	8009654 <__sflush_r+0x34>
 80096c4:	682b      	ldr	r3, [r5, #0]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d0c4      	beq.n	8009654 <__sflush_r+0x34>
 80096ca:	2b1d      	cmp	r3, #29
 80096cc:	d001      	beq.n	80096d2 <__sflush_r+0xb2>
 80096ce:	2b16      	cmp	r3, #22
 80096d0:	d101      	bne.n	80096d6 <__sflush_r+0xb6>
 80096d2:	602f      	str	r7, [r5, #0]
 80096d4:	e7b1      	b.n	800963a <__sflush_r+0x1a>
 80096d6:	89a3      	ldrh	r3, [r4, #12]
 80096d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80096dc:	81a3      	strh	r3, [r4, #12]
 80096de:	e7ad      	b.n	800963c <__sflush_r+0x1c>
 80096e0:	690f      	ldr	r7, [r1, #16]
 80096e2:	2f00      	cmp	r7, #0
 80096e4:	d0a9      	beq.n	800963a <__sflush_r+0x1a>
 80096e6:	0793      	lsls	r3, r2, #30
 80096e8:	680e      	ldr	r6, [r1, #0]
 80096ea:	bf08      	it	eq
 80096ec:	694b      	ldreq	r3, [r1, #20]
 80096ee:	600f      	str	r7, [r1, #0]
 80096f0:	bf18      	it	ne
 80096f2:	2300      	movne	r3, #0
 80096f4:	eba6 0807 	sub.w	r8, r6, r7
 80096f8:	608b      	str	r3, [r1, #8]
 80096fa:	f1b8 0f00 	cmp.w	r8, #0
 80096fe:	dd9c      	ble.n	800963a <__sflush_r+0x1a>
 8009700:	6a21      	ldr	r1, [r4, #32]
 8009702:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009704:	4643      	mov	r3, r8
 8009706:	463a      	mov	r2, r7
 8009708:	4628      	mov	r0, r5
 800970a:	47b0      	blx	r6
 800970c:	2800      	cmp	r0, #0
 800970e:	dc06      	bgt.n	800971e <__sflush_r+0xfe>
 8009710:	89a3      	ldrh	r3, [r4, #12]
 8009712:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009716:	81a3      	strh	r3, [r4, #12]
 8009718:	f04f 30ff 	mov.w	r0, #4294967295
 800971c:	e78e      	b.n	800963c <__sflush_r+0x1c>
 800971e:	4407      	add	r7, r0
 8009720:	eba8 0800 	sub.w	r8, r8, r0
 8009724:	e7e9      	b.n	80096fa <__sflush_r+0xda>
 8009726:	bf00      	nop
 8009728:	20400001 	.word	0x20400001

0800972c <_fflush_r>:
 800972c:	b538      	push	{r3, r4, r5, lr}
 800972e:	690b      	ldr	r3, [r1, #16]
 8009730:	4605      	mov	r5, r0
 8009732:	460c      	mov	r4, r1
 8009734:	b913      	cbnz	r3, 800973c <_fflush_r+0x10>
 8009736:	2500      	movs	r5, #0
 8009738:	4628      	mov	r0, r5
 800973a:	bd38      	pop	{r3, r4, r5, pc}
 800973c:	b118      	cbz	r0, 8009746 <_fflush_r+0x1a>
 800973e:	6983      	ldr	r3, [r0, #24]
 8009740:	b90b      	cbnz	r3, 8009746 <_fflush_r+0x1a>
 8009742:	f000 f887 	bl	8009854 <__sinit>
 8009746:	4b14      	ldr	r3, [pc, #80]	; (8009798 <_fflush_r+0x6c>)
 8009748:	429c      	cmp	r4, r3
 800974a:	d11b      	bne.n	8009784 <_fflush_r+0x58>
 800974c:	686c      	ldr	r4, [r5, #4]
 800974e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d0ef      	beq.n	8009736 <_fflush_r+0xa>
 8009756:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009758:	07d0      	lsls	r0, r2, #31
 800975a:	d404      	bmi.n	8009766 <_fflush_r+0x3a>
 800975c:	0599      	lsls	r1, r3, #22
 800975e:	d402      	bmi.n	8009766 <_fflush_r+0x3a>
 8009760:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009762:	f000 f915 	bl	8009990 <__retarget_lock_acquire_recursive>
 8009766:	4628      	mov	r0, r5
 8009768:	4621      	mov	r1, r4
 800976a:	f7ff ff59 	bl	8009620 <__sflush_r>
 800976e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009770:	07da      	lsls	r2, r3, #31
 8009772:	4605      	mov	r5, r0
 8009774:	d4e0      	bmi.n	8009738 <_fflush_r+0xc>
 8009776:	89a3      	ldrh	r3, [r4, #12]
 8009778:	059b      	lsls	r3, r3, #22
 800977a:	d4dd      	bmi.n	8009738 <_fflush_r+0xc>
 800977c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800977e:	f000 f908 	bl	8009992 <__retarget_lock_release_recursive>
 8009782:	e7d9      	b.n	8009738 <_fflush_r+0xc>
 8009784:	4b05      	ldr	r3, [pc, #20]	; (800979c <_fflush_r+0x70>)
 8009786:	429c      	cmp	r4, r3
 8009788:	d101      	bne.n	800978e <_fflush_r+0x62>
 800978a:	68ac      	ldr	r4, [r5, #8]
 800978c:	e7df      	b.n	800974e <_fflush_r+0x22>
 800978e:	4b04      	ldr	r3, [pc, #16]	; (80097a0 <_fflush_r+0x74>)
 8009790:	429c      	cmp	r4, r3
 8009792:	bf08      	it	eq
 8009794:	68ec      	ldreq	r4, [r5, #12]
 8009796:	e7da      	b.n	800974e <_fflush_r+0x22>
 8009798:	0800a8a8 	.word	0x0800a8a8
 800979c:	0800a8c8 	.word	0x0800a8c8
 80097a0:	0800a888 	.word	0x0800a888

080097a4 <std>:
 80097a4:	2300      	movs	r3, #0
 80097a6:	b510      	push	{r4, lr}
 80097a8:	4604      	mov	r4, r0
 80097aa:	e9c0 3300 	strd	r3, r3, [r0]
 80097ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80097b2:	6083      	str	r3, [r0, #8]
 80097b4:	8181      	strh	r1, [r0, #12]
 80097b6:	6643      	str	r3, [r0, #100]	; 0x64
 80097b8:	81c2      	strh	r2, [r0, #14]
 80097ba:	6183      	str	r3, [r0, #24]
 80097bc:	4619      	mov	r1, r3
 80097be:	2208      	movs	r2, #8
 80097c0:	305c      	adds	r0, #92	; 0x5c
 80097c2:	f7ff fdb7 	bl	8009334 <memset>
 80097c6:	4b05      	ldr	r3, [pc, #20]	; (80097dc <std+0x38>)
 80097c8:	6263      	str	r3, [r4, #36]	; 0x24
 80097ca:	4b05      	ldr	r3, [pc, #20]	; (80097e0 <std+0x3c>)
 80097cc:	62a3      	str	r3, [r4, #40]	; 0x28
 80097ce:	4b05      	ldr	r3, [pc, #20]	; (80097e4 <std+0x40>)
 80097d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80097d2:	4b05      	ldr	r3, [pc, #20]	; (80097e8 <std+0x44>)
 80097d4:	6224      	str	r4, [r4, #32]
 80097d6:	6323      	str	r3, [r4, #48]	; 0x30
 80097d8:	bd10      	pop	{r4, pc}
 80097da:	bf00      	nop
 80097dc:	0800a465 	.word	0x0800a465
 80097e0:	0800a487 	.word	0x0800a487
 80097e4:	0800a4bf 	.word	0x0800a4bf
 80097e8:	0800a4e3 	.word	0x0800a4e3

080097ec <_cleanup_r>:
 80097ec:	4901      	ldr	r1, [pc, #4]	; (80097f4 <_cleanup_r+0x8>)
 80097ee:	f000 b8af 	b.w	8009950 <_fwalk_reent>
 80097f2:	bf00      	nop
 80097f4:	0800972d 	.word	0x0800972d

080097f8 <__sfmoreglue>:
 80097f8:	b570      	push	{r4, r5, r6, lr}
 80097fa:	1e4a      	subs	r2, r1, #1
 80097fc:	2568      	movs	r5, #104	; 0x68
 80097fe:	4355      	muls	r5, r2
 8009800:	460e      	mov	r6, r1
 8009802:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009806:	f000 f979 	bl	8009afc <_malloc_r>
 800980a:	4604      	mov	r4, r0
 800980c:	b140      	cbz	r0, 8009820 <__sfmoreglue+0x28>
 800980e:	2100      	movs	r1, #0
 8009810:	e9c0 1600 	strd	r1, r6, [r0]
 8009814:	300c      	adds	r0, #12
 8009816:	60a0      	str	r0, [r4, #8]
 8009818:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800981c:	f7ff fd8a 	bl	8009334 <memset>
 8009820:	4620      	mov	r0, r4
 8009822:	bd70      	pop	{r4, r5, r6, pc}

08009824 <__sfp_lock_acquire>:
 8009824:	4801      	ldr	r0, [pc, #4]	; (800982c <__sfp_lock_acquire+0x8>)
 8009826:	f000 b8b3 	b.w	8009990 <__retarget_lock_acquire_recursive>
 800982a:	bf00      	nop
 800982c:	2000437c 	.word	0x2000437c

08009830 <__sfp_lock_release>:
 8009830:	4801      	ldr	r0, [pc, #4]	; (8009838 <__sfp_lock_release+0x8>)
 8009832:	f000 b8ae 	b.w	8009992 <__retarget_lock_release_recursive>
 8009836:	bf00      	nop
 8009838:	2000437c 	.word	0x2000437c

0800983c <__sinit_lock_acquire>:
 800983c:	4801      	ldr	r0, [pc, #4]	; (8009844 <__sinit_lock_acquire+0x8>)
 800983e:	f000 b8a7 	b.w	8009990 <__retarget_lock_acquire_recursive>
 8009842:	bf00      	nop
 8009844:	20004377 	.word	0x20004377

08009848 <__sinit_lock_release>:
 8009848:	4801      	ldr	r0, [pc, #4]	; (8009850 <__sinit_lock_release+0x8>)
 800984a:	f000 b8a2 	b.w	8009992 <__retarget_lock_release_recursive>
 800984e:	bf00      	nop
 8009850:	20004377 	.word	0x20004377

08009854 <__sinit>:
 8009854:	b510      	push	{r4, lr}
 8009856:	4604      	mov	r4, r0
 8009858:	f7ff fff0 	bl	800983c <__sinit_lock_acquire>
 800985c:	69a3      	ldr	r3, [r4, #24]
 800985e:	b11b      	cbz	r3, 8009868 <__sinit+0x14>
 8009860:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009864:	f7ff bff0 	b.w	8009848 <__sinit_lock_release>
 8009868:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800986c:	6523      	str	r3, [r4, #80]	; 0x50
 800986e:	4b13      	ldr	r3, [pc, #76]	; (80098bc <__sinit+0x68>)
 8009870:	4a13      	ldr	r2, [pc, #76]	; (80098c0 <__sinit+0x6c>)
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	62a2      	str	r2, [r4, #40]	; 0x28
 8009876:	42a3      	cmp	r3, r4
 8009878:	bf04      	itt	eq
 800987a:	2301      	moveq	r3, #1
 800987c:	61a3      	streq	r3, [r4, #24]
 800987e:	4620      	mov	r0, r4
 8009880:	f000 f820 	bl	80098c4 <__sfp>
 8009884:	6060      	str	r0, [r4, #4]
 8009886:	4620      	mov	r0, r4
 8009888:	f000 f81c 	bl	80098c4 <__sfp>
 800988c:	60a0      	str	r0, [r4, #8]
 800988e:	4620      	mov	r0, r4
 8009890:	f000 f818 	bl	80098c4 <__sfp>
 8009894:	2200      	movs	r2, #0
 8009896:	60e0      	str	r0, [r4, #12]
 8009898:	2104      	movs	r1, #4
 800989a:	6860      	ldr	r0, [r4, #4]
 800989c:	f7ff ff82 	bl	80097a4 <std>
 80098a0:	68a0      	ldr	r0, [r4, #8]
 80098a2:	2201      	movs	r2, #1
 80098a4:	2109      	movs	r1, #9
 80098a6:	f7ff ff7d 	bl	80097a4 <std>
 80098aa:	68e0      	ldr	r0, [r4, #12]
 80098ac:	2202      	movs	r2, #2
 80098ae:	2112      	movs	r1, #18
 80098b0:	f7ff ff78 	bl	80097a4 <std>
 80098b4:	2301      	movs	r3, #1
 80098b6:	61a3      	str	r3, [r4, #24]
 80098b8:	e7d2      	b.n	8009860 <__sinit+0xc>
 80098ba:	bf00      	nop
 80098bc:	0800a884 	.word	0x0800a884
 80098c0:	080097ed 	.word	0x080097ed

080098c4 <__sfp>:
 80098c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098c6:	4607      	mov	r7, r0
 80098c8:	f7ff ffac 	bl	8009824 <__sfp_lock_acquire>
 80098cc:	4b1e      	ldr	r3, [pc, #120]	; (8009948 <__sfp+0x84>)
 80098ce:	681e      	ldr	r6, [r3, #0]
 80098d0:	69b3      	ldr	r3, [r6, #24]
 80098d2:	b913      	cbnz	r3, 80098da <__sfp+0x16>
 80098d4:	4630      	mov	r0, r6
 80098d6:	f7ff ffbd 	bl	8009854 <__sinit>
 80098da:	3648      	adds	r6, #72	; 0x48
 80098dc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80098e0:	3b01      	subs	r3, #1
 80098e2:	d503      	bpl.n	80098ec <__sfp+0x28>
 80098e4:	6833      	ldr	r3, [r6, #0]
 80098e6:	b30b      	cbz	r3, 800992c <__sfp+0x68>
 80098e8:	6836      	ldr	r6, [r6, #0]
 80098ea:	e7f7      	b.n	80098dc <__sfp+0x18>
 80098ec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80098f0:	b9d5      	cbnz	r5, 8009928 <__sfp+0x64>
 80098f2:	4b16      	ldr	r3, [pc, #88]	; (800994c <__sfp+0x88>)
 80098f4:	60e3      	str	r3, [r4, #12]
 80098f6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80098fa:	6665      	str	r5, [r4, #100]	; 0x64
 80098fc:	f000 f847 	bl	800998e <__retarget_lock_init_recursive>
 8009900:	f7ff ff96 	bl	8009830 <__sfp_lock_release>
 8009904:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009908:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800990c:	6025      	str	r5, [r4, #0]
 800990e:	61a5      	str	r5, [r4, #24]
 8009910:	2208      	movs	r2, #8
 8009912:	4629      	mov	r1, r5
 8009914:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009918:	f7ff fd0c 	bl	8009334 <memset>
 800991c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009920:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009924:	4620      	mov	r0, r4
 8009926:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009928:	3468      	adds	r4, #104	; 0x68
 800992a:	e7d9      	b.n	80098e0 <__sfp+0x1c>
 800992c:	2104      	movs	r1, #4
 800992e:	4638      	mov	r0, r7
 8009930:	f7ff ff62 	bl	80097f8 <__sfmoreglue>
 8009934:	4604      	mov	r4, r0
 8009936:	6030      	str	r0, [r6, #0]
 8009938:	2800      	cmp	r0, #0
 800993a:	d1d5      	bne.n	80098e8 <__sfp+0x24>
 800993c:	f7ff ff78 	bl	8009830 <__sfp_lock_release>
 8009940:	230c      	movs	r3, #12
 8009942:	603b      	str	r3, [r7, #0]
 8009944:	e7ee      	b.n	8009924 <__sfp+0x60>
 8009946:	bf00      	nop
 8009948:	0800a884 	.word	0x0800a884
 800994c:	ffff0001 	.word	0xffff0001

08009950 <_fwalk_reent>:
 8009950:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009954:	4606      	mov	r6, r0
 8009956:	4688      	mov	r8, r1
 8009958:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800995c:	2700      	movs	r7, #0
 800995e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009962:	f1b9 0901 	subs.w	r9, r9, #1
 8009966:	d505      	bpl.n	8009974 <_fwalk_reent+0x24>
 8009968:	6824      	ldr	r4, [r4, #0]
 800996a:	2c00      	cmp	r4, #0
 800996c:	d1f7      	bne.n	800995e <_fwalk_reent+0xe>
 800996e:	4638      	mov	r0, r7
 8009970:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009974:	89ab      	ldrh	r3, [r5, #12]
 8009976:	2b01      	cmp	r3, #1
 8009978:	d907      	bls.n	800998a <_fwalk_reent+0x3a>
 800997a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800997e:	3301      	adds	r3, #1
 8009980:	d003      	beq.n	800998a <_fwalk_reent+0x3a>
 8009982:	4629      	mov	r1, r5
 8009984:	4630      	mov	r0, r6
 8009986:	47c0      	blx	r8
 8009988:	4307      	orrs	r7, r0
 800998a:	3568      	adds	r5, #104	; 0x68
 800998c:	e7e9      	b.n	8009962 <_fwalk_reent+0x12>

0800998e <__retarget_lock_init_recursive>:
 800998e:	4770      	bx	lr

08009990 <__retarget_lock_acquire_recursive>:
 8009990:	4770      	bx	lr

08009992 <__retarget_lock_release_recursive>:
 8009992:	4770      	bx	lr

08009994 <__swhatbuf_r>:
 8009994:	b570      	push	{r4, r5, r6, lr}
 8009996:	460e      	mov	r6, r1
 8009998:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800999c:	2900      	cmp	r1, #0
 800999e:	b096      	sub	sp, #88	; 0x58
 80099a0:	4614      	mov	r4, r2
 80099a2:	461d      	mov	r5, r3
 80099a4:	da07      	bge.n	80099b6 <__swhatbuf_r+0x22>
 80099a6:	2300      	movs	r3, #0
 80099a8:	602b      	str	r3, [r5, #0]
 80099aa:	89b3      	ldrh	r3, [r6, #12]
 80099ac:	061a      	lsls	r2, r3, #24
 80099ae:	d410      	bmi.n	80099d2 <__swhatbuf_r+0x3e>
 80099b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80099b4:	e00e      	b.n	80099d4 <__swhatbuf_r+0x40>
 80099b6:	466a      	mov	r2, sp
 80099b8:	f000 fdba 	bl	800a530 <_fstat_r>
 80099bc:	2800      	cmp	r0, #0
 80099be:	dbf2      	blt.n	80099a6 <__swhatbuf_r+0x12>
 80099c0:	9a01      	ldr	r2, [sp, #4]
 80099c2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80099c6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80099ca:	425a      	negs	r2, r3
 80099cc:	415a      	adcs	r2, r3
 80099ce:	602a      	str	r2, [r5, #0]
 80099d0:	e7ee      	b.n	80099b0 <__swhatbuf_r+0x1c>
 80099d2:	2340      	movs	r3, #64	; 0x40
 80099d4:	2000      	movs	r0, #0
 80099d6:	6023      	str	r3, [r4, #0]
 80099d8:	b016      	add	sp, #88	; 0x58
 80099da:	bd70      	pop	{r4, r5, r6, pc}

080099dc <__smakebuf_r>:
 80099dc:	898b      	ldrh	r3, [r1, #12]
 80099de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80099e0:	079d      	lsls	r5, r3, #30
 80099e2:	4606      	mov	r6, r0
 80099e4:	460c      	mov	r4, r1
 80099e6:	d507      	bpl.n	80099f8 <__smakebuf_r+0x1c>
 80099e8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80099ec:	6023      	str	r3, [r4, #0]
 80099ee:	6123      	str	r3, [r4, #16]
 80099f0:	2301      	movs	r3, #1
 80099f2:	6163      	str	r3, [r4, #20]
 80099f4:	b002      	add	sp, #8
 80099f6:	bd70      	pop	{r4, r5, r6, pc}
 80099f8:	ab01      	add	r3, sp, #4
 80099fa:	466a      	mov	r2, sp
 80099fc:	f7ff ffca 	bl	8009994 <__swhatbuf_r>
 8009a00:	9900      	ldr	r1, [sp, #0]
 8009a02:	4605      	mov	r5, r0
 8009a04:	4630      	mov	r0, r6
 8009a06:	f000 f879 	bl	8009afc <_malloc_r>
 8009a0a:	b948      	cbnz	r0, 8009a20 <__smakebuf_r+0x44>
 8009a0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a10:	059a      	lsls	r2, r3, #22
 8009a12:	d4ef      	bmi.n	80099f4 <__smakebuf_r+0x18>
 8009a14:	f023 0303 	bic.w	r3, r3, #3
 8009a18:	f043 0302 	orr.w	r3, r3, #2
 8009a1c:	81a3      	strh	r3, [r4, #12]
 8009a1e:	e7e3      	b.n	80099e8 <__smakebuf_r+0xc>
 8009a20:	4b0d      	ldr	r3, [pc, #52]	; (8009a58 <__smakebuf_r+0x7c>)
 8009a22:	62b3      	str	r3, [r6, #40]	; 0x28
 8009a24:	89a3      	ldrh	r3, [r4, #12]
 8009a26:	6020      	str	r0, [r4, #0]
 8009a28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a2c:	81a3      	strh	r3, [r4, #12]
 8009a2e:	9b00      	ldr	r3, [sp, #0]
 8009a30:	6163      	str	r3, [r4, #20]
 8009a32:	9b01      	ldr	r3, [sp, #4]
 8009a34:	6120      	str	r0, [r4, #16]
 8009a36:	b15b      	cbz	r3, 8009a50 <__smakebuf_r+0x74>
 8009a38:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009a3c:	4630      	mov	r0, r6
 8009a3e:	f000 fd89 	bl	800a554 <_isatty_r>
 8009a42:	b128      	cbz	r0, 8009a50 <__smakebuf_r+0x74>
 8009a44:	89a3      	ldrh	r3, [r4, #12]
 8009a46:	f023 0303 	bic.w	r3, r3, #3
 8009a4a:	f043 0301 	orr.w	r3, r3, #1
 8009a4e:	81a3      	strh	r3, [r4, #12]
 8009a50:	89a0      	ldrh	r0, [r4, #12]
 8009a52:	4305      	orrs	r5, r0
 8009a54:	81a5      	strh	r5, [r4, #12]
 8009a56:	e7cd      	b.n	80099f4 <__smakebuf_r+0x18>
 8009a58:	080097ed 	.word	0x080097ed

08009a5c <_free_r>:
 8009a5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009a5e:	2900      	cmp	r1, #0
 8009a60:	d048      	beq.n	8009af4 <_free_r+0x98>
 8009a62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a66:	9001      	str	r0, [sp, #4]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	f1a1 0404 	sub.w	r4, r1, #4
 8009a6e:	bfb8      	it	lt
 8009a70:	18e4      	addlt	r4, r4, r3
 8009a72:	f000 fdb9 	bl	800a5e8 <__malloc_lock>
 8009a76:	4a20      	ldr	r2, [pc, #128]	; (8009af8 <_free_r+0x9c>)
 8009a78:	9801      	ldr	r0, [sp, #4]
 8009a7a:	6813      	ldr	r3, [r2, #0]
 8009a7c:	4615      	mov	r5, r2
 8009a7e:	b933      	cbnz	r3, 8009a8e <_free_r+0x32>
 8009a80:	6063      	str	r3, [r4, #4]
 8009a82:	6014      	str	r4, [r2, #0]
 8009a84:	b003      	add	sp, #12
 8009a86:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009a8a:	f000 bdb3 	b.w	800a5f4 <__malloc_unlock>
 8009a8e:	42a3      	cmp	r3, r4
 8009a90:	d90b      	bls.n	8009aaa <_free_r+0x4e>
 8009a92:	6821      	ldr	r1, [r4, #0]
 8009a94:	1862      	adds	r2, r4, r1
 8009a96:	4293      	cmp	r3, r2
 8009a98:	bf04      	itt	eq
 8009a9a:	681a      	ldreq	r2, [r3, #0]
 8009a9c:	685b      	ldreq	r3, [r3, #4]
 8009a9e:	6063      	str	r3, [r4, #4]
 8009aa0:	bf04      	itt	eq
 8009aa2:	1852      	addeq	r2, r2, r1
 8009aa4:	6022      	streq	r2, [r4, #0]
 8009aa6:	602c      	str	r4, [r5, #0]
 8009aa8:	e7ec      	b.n	8009a84 <_free_r+0x28>
 8009aaa:	461a      	mov	r2, r3
 8009aac:	685b      	ldr	r3, [r3, #4]
 8009aae:	b10b      	cbz	r3, 8009ab4 <_free_r+0x58>
 8009ab0:	42a3      	cmp	r3, r4
 8009ab2:	d9fa      	bls.n	8009aaa <_free_r+0x4e>
 8009ab4:	6811      	ldr	r1, [r2, #0]
 8009ab6:	1855      	adds	r5, r2, r1
 8009ab8:	42a5      	cmp	r5, r4
 8009aba:	d10b      	bne.n	8009ad4 <_free_r+0x78>
 8009abc:	6824      	ldr	r4, [r4, #0]
 8009abe:	4421      	add	r1, r4
 8009ac0:	1854      	adds	r4, r2, r1
 8009ac2:	42a3      	cmp	r3, r4
 8009ac4:	6011      	str	r1, [r2, #0]
 8009ac6:	d1dd      	bne.n	8009a84 <_free_r+0x28>
 8009ac8:	681c      	ldr	r4, [r3, #0]
 8009aca:	685b      	ldr	r3, [r3, #4]
 8009acc:	6053      	str	r3, [r2, #4]
 8009ace:	4421      	add	r1, r4
 8009ad0:	6011      	str	r1, [r2, #0]
 8009ad2:	e7d7      	b.n	8009a84 <_free_r+0x28>
 8009ad4:	d902      	bls.n	8009adc <_free_r+0x80>
 8009ad6:	230c      	movs	r3, #12
 8009ad8:	6003      	str	r3, [r0, #0]
 8009ada:	e7d3      	b.n	8009a84 <_free_r+0x28>
 8009adc:	6825      	ldr	r5, [r4, #0]
 8009ade:	1961      	adds	r1, r4, r5
 8009ae0:	428b      	cmp	r3, r1
 8009ae2:	bf04      	itt	eq
 8009ae4:	6819      	ldreq	r1, [r3, #0]
 8009ae6:	685b      	ldreq	r3, [r3, #4]
 8009ae8:	6063      	str	r3, [r4, #4]
 8009aea:	bf04      	itt	eq
 8009aec:	1949      	addeq	r1, r1, r5
 8009aee:	6021      	streq	r1, [r4, #0]
 8009af0:	6054      	str	r4, [r2, #4]
 8009af2:	e7c7      	b.n	8009a84 <_free_r+0x28>
 8009af4:	b003      	add	sp, #12
 8009af6:	bd30      	pop	{r4, r5, pc}
 8009af8:	200000fc 	.word	0x200000fc

08009afc <_malloc_r>:
 8009afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009afe:	1ccd      	adds	r5, r1, #3
 8009b00:	f025 0503 	bic.w	r5, r5, #3
 8009b04:	3508      	adds	r5, #8
 8009b06:	2d0c      	cmp	r5, #12
 8009b08:	bf38      	it	cc
 8009b0a:	250c      	movcc	r5, #12
 8009b0c:	2d00      	cmp	r5, #0
 8009b0e:	4606      	mov	r6, r0
 8009b10:	db01      	blt.n	8009b16 <_malloc_r+0x1a>
 8009b12:	42a9      	cmp	r1, r5
 8009b14:	d903      	bls.n	8009b1e <_malloc_r+0x22>
 8009b16:	230c      	movs	r3, #12
 8009b18:	6033      	str	r3, [r6, #0]
 8009b1a:	2000      	movs	r0, #0
 8009b1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b1e:	f000 fd63 	bl	800a5e8 <__malloc_lock>
 8009b22:	4921      	ldr	r1, [pc, #132]	; (8009ba8 <_malloc_r+0xac>)
 8009b24:	680a      	ldr	r2, [r1, #0]
 8009b26:	4614      	mov	r4, r2
 8009b28:	b99c      	cbnz	r4, 8009b52 <_malloc_r+0x56>
 8009b2a:	4f20      	ldr	r7, [pc, #128]	; (8009bac <_malloc_r+0xb0>)
 8009b2c:	683b      	ldr	r3, [r7, #0]
 8009b2e:	b923      	cbnz	r3, 8009b3a <_malloc_r+0x3e>
 8009b30:	4621      	mov	r1, r4
 8009b32:	4630      	mov	r0, r6
 8009b34:	f000 fc86 	bl	800a444 <_sbrk_r>
 8009b38:	6038      	str	r0, [r7, #0]
 8009b3a:	4629      	mov	r1, r5
 8009b3c:	4630      	mov	r0, r6
 8009b3e:	f000 fc81 	bl	800a444 <_sbrk_r>
 8009b42:	1c43      	adds	r3, r0, #1
 8009b44:	d123      	bne.n	8009b8e <_malloc_r+0x92>
 8009b46:	230c      	movs	r3, #12
 8009b48:	6033      	str	r3, [r6, #0]
 8009b4a:	4630      	mov	r0, r6
 8009b4c:	f000 fd52 	bl	800a5f4 <__malloc_unlock>
 8009b50:	e7e3      	b.n	8009b1a <_malloc_r+0x1e>
 8009b52:	6823      	ldr	r3, [r4, #0]
 8009b54:	1b5b      	subs	r3, r3, r5
 8009b56:	d417      	bmi.n	8009b88 <_malloc_r+0x8c>
 8009b58:	2b0b      	cmp	r3, #11
 8009b5a:	d903      	bls.n	8009b64 <_malloc_r+0x68>
 8009b5c:	6023      	str	r3, [r4, #0]
 8009b5e:	441c      	add	r4, r3
 8009b60:	6025      	str	r5, [r4, #0]
 8009b62:	e004      	b.n	8009b6e <_malloc_r+0x72>
 8009b64:	6863      	ldr	r3, [r4, #4]
 8009b66:	42a2      	cmp	r2, r4
 8009b68:	bf0c      	ite	eq
 8009b6a:	600b      	streq	r3, [r1, #0]
 8009b6c:	6053      	strne	r3, [r2, #4]
 8009b6e:	4630      	mov	r0, r6
 8009b70:	f000 fd40 	bl	800a5f4 <__malloc_unlock>
 8009b74:	f104 000b 	add.w	r0, r4, #11
 8009b78:	1d23      	adds	r3, r4, #4
 8009b7a:	f020 0007 	bic.w	r0, r0, #7
 8009b7e:	1ac2      	subs	r2, r0, r3
 8009b80:	d0cc      	beq.n	8009b1c <_malloc_r+0x20>
 8009b82:	1a1b      	subs	r3, r3, r0
 8009b84:	50a3      	str	r3, [r4, r2]
 8009b86:	e7c9      	b.n	8009b1c <_malloc_r+0x20>
 8009b88:	4622      	mov	r2, r4
 8009b8a:	6864      	ldr	r4, [r4, #4]
 8009b8c:	e7cc      	b.n	8009b28 <_malloc_r+0x2c>
 8009b8e:	1cc4      	adds	r4, r0, #3
 8009b90:	f024 0403 	bic.w	r4, r4, #3
 8009b94:	42a0      	cmp	r0, r4
 8009b96:	d0e3      	beq.n	8009b60 <_malloc_r+0x64>
 8009b98:	1a21      	subs	r1, r4, r0
 8009b9a:	4630      	mov	r0, r6
 8009b9c:	f000 fc52 	bl	800a444 <_sbrk_r>
 8009ba0:	3001      	adds	r0, #1
 8009ba2:	d1dd      	bne.n	8009b60 <_malloc_r+0x64>
 8009ba4:	e7cf      	b.n	8009b46 <_malloc_r+0x4a>
 8009ba6:	bf00      	nop
 8009ba8:	200000fc 	.word	0x200000fc
 8009bac:	20000100 	.word	0x20000100

08009bb0 <__ssputs_r>:
 8009bb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009bb4:	688e      	ldr	r6, [r1, #8]
 8009bb6:	429e      	cmp	r6, r3
 8009bb8:	4682      	mov	sl, r0
 8009bba:	460c      	mov	r4, r1
 8009bbc:	4690      	mov	r8, r2
 8009bbe:	461f      	mov	r7, r3
 8009bc0:	d838      	bhi.n	8009c34 <__ssputs_r+0x84>
 8009bc2:	898a      	ldrh	r2, [r1, #12]
 8009bc4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009bc8:	d032      	beq.n	8009c30 <__ssputs_r+0x80>
 8009bca:	6825      	ldr	r5, [r4, #0]
 8009bcc:	6909      	ldr	r1, [r1, #16]
 8009bce:	eba5 0901 	sub.w	r9, r5, r1
 8009bd2:	6965      	ldr	r5, [r4, #20]
 8009bd4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009bd8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009bdc:	3301      	adds	r3, #1
 8009bde:	444b      	add	r3, r9
 8009be0:	106d      	asrs	r5, r5, #1
 8009be2:	429d      	cmp	r5, r3
 8009be4:	bf38      	it	cc
 8009be6:	461d      	movcc	r5, r3
 8009be8:	0553      	lsls	r3, r2, #21
 8009bea:	d531      	bpl.n	8009c50 <__ssputs_r+0xa0>
 8009bec:	4629      	mov	r1, r5
 8009bee:	f7ff ff85 	bl	8009afc <_malloc_r>
 8009bf2:	4606      	mov	r6, r0
 8009bf4:	b950      	cbnz	r0, 8009c0c <__ssputs_r+0x5c>
 8009bf6:	230c      	movs	r3, #12
 8009bf8:	f8ca 3000 	str.w	r3, [sl]
 8009bfc:	89a3      	ldrh	r3, [r4, #12]
 8009bfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c02:	81a3      	strh	r3, [r4, #12]
 8009c04:	f04f 30ff 	mov.w	r0, #4294967295
 8009c08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c0c:	6921      	ldr	r1, [r4, #16]
 8009c0e:	464a      	mov	r2, r9
 8009c10:	f000 fcc2 	bl	800a598 <memcpy>
 8009c14:	89a3      	ldrh	r3, [r4, #12]
 8009c16:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009c1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c1e:	81a3      	strh	r3, [r4, #12]
 8009c20:	6126      	str	r6, [r4, #16]
 8009c22:	6165      	str	r5, [r4, #20]
 8009c24:	444e      	add	r6, r9
 8009c26:	eba5 0509 	sub.w	r5, r5, r9
 8009c2a:	6026      	str	r6, [r4, #0]
 8009c2c:	60a5      	str	r5, [r4, #8]
 8009c2e:	463e      	mov	r6, r7
 8009c30:	42be      	cmp	r6, r7
 8009c32:	d900      	bls.n	8009c36 <__ssputs_r+0x86>
 8009c34:	463e      	mov	r6, r7
 8009c36:	4632      	mov	r2, r6
 8009c38:	6820      	ldr	r0, [r4, #0]
 8009c3a:	4641      	mov	r1, r8
 8009c3c:	f000 fcba 	bl	800a5b4 <memmove>
 8009c40:	68a3      	ldr	r3, [r4, #8]
 8009c42:	6822      	ldr	r2, [r4, #0]
 8009c44:	1b9b      	subs	r3, r3, r6
 8009c46:	4432      	add	r2, r6
 8009c48:	60a3      	str	r3, [r4, #8]
 8009c4a:	6022      	str	r2, [r4, #0]
 8009c4c:	2000      	movs	r0, #0
 8009c4e:	e7db      	b.n	8009c08 <__ssputs_r+0x58>
 8009c50:	462a      	mov	r2, r5
 8009c52:	f000 fcd5 	bl	800a600 <_realloc_r>
 8009c56:	4606      	mov	r6, r0
 8009c58:	2800      	cmp	r0, #0
 8009c5a:	d1e1      	bne.n	8009c20 <__ssputs_r+0x70>
 8009c5c:	6921      	ldr	r1, [r4, #16]
 8009c5e:	4650      	mov	r0, sl
 8009c60:	f7ff fefc 	bl	8009a5c <_free_r>
 8009c64:	e7c7      	b.n	8009bf6 <__ssputs_r+0x46>
	...

08009c68 <_svfiprintf_r>:
 8009c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c6c:	4698      	mov	r8, r3
 8009c6e:	898b      	ldrh	r3, [r1, #12]
 8009c70:	061b      	lsls	r3, r3, #24
 8009c72:	b09d      	sub	sp, #116	; 0x74
 8009c74:	4607      	mov	r7, r0
 8009c76:	460d      	mov	r5, r1
 8009c78:	4614      	mov	r4, r2
 8009c7a:	d50e      	bpl.n	8009c9a <_svfiprintf_r+0x32>
 8009c7c:	690b      	ldr	r3, [r1, #16]
 8009c7e:	b963      	cbnz	r3, 8009c9a <_svfiprintf_r+0x32>
 8009c80:	2140      	movs	r1, #64	; 0x40
 8009c82:	f7ff ff3b 	bl	8009afc <_malloc_r>
 8009c86:	6028      	str	r0, [r5, #0]
 8009c88:	6128      	str	r0, [r5, #16]
 8009c8a:	b920      	cbnz	r0, 8009c96 <_svfiprintf_r+0x2e>
 8009c8c:	230c      	movs	r3, #12
 8009c8e:	603b      	str	r3, [r7, #0]
 8009c90:	f04f 30ff 	mov.w	r0, #4294967295
 8009c94:	e0d1      	b.n	8009e3a <_svfiprintf_r+0x1d2>
 8009c96:	2340      	movs	r3, #64	; 0x40
 8009c98:	616b      	str	r3, [r5, #20]
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	9309      	str	r3, [sp, #36]	; 0x24
 8009c9e:	2320      	movs	r3, #32
 8009ca0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009ca4:	f8cd 800c 	str.w	r8, [sp, #12]
 8009ca8:	2330      	movs	r3, #48	; 0x30
 8009caa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009e54 <_svfiprintf_r+0x1ec>
 8009cae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009cb2:	f04f 0901 	mov.w	r9, #1
 8009cb6:	4623      	mov	r3, r4
 8009cb8:	469a      	mov	sl, r3
 8009cba:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009cbe:	b10a      	cbz	r2, 8009cc4 <_svfiprintf_r+0x5c>
 8009cc0:	2a25      	cmp	r2, #37	; 0x25
 8009cc2:	d1f9      	bne.n	8009cb8 <_svfiprintf_r+0x50>
 8009cc4:	ebba 0b04 	subs.w	fp, sl, r4
 8009cc8:	d00b      	beq.n	8009ce2 <_svfiprintf_r+0x7a>
 8009cca:	465b      	mov	r3, fp
 8009ccc:	4622      	mov	r2, r4
 8009cce:	4629      	mov	r1, r5
 8009cd0:	4638      	mov	r0, r7
 8009cd2:	f7ff ff6d 	bl	8009bb0 <__ssputs_r>
 8009cd6:	3001      	adds	r0, #1
 8009cd8:	f000 80aa 	beq.w	8009e30 <_svfiprintf_r+0x1c8>
 8009cdc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009cde:	445a      	add	r2, fp
 8009ce0:	9209      	str	r2, [sp, #36]	; 0x24
 8009ce2:	f89a 3000 	ldrb.w	r3, [sl]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	f000 80a2 	beq.w	8009e30 <_svfiprintf_r+0x1c8>
 8009cec:	2300      	movs	r3, #0
 8009cee:	f04f 32ff 	mov.w	r2, #4294967295
 8009cf2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009cf6:	f10a 0a01 	add.w	sl, sl, #1
 8009cfa:	9304      	str	r3, [sp, #16]
 8009cfc:	9307      	str	r3, [sp, #28]
 8009cfe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009d02:	931a      	str	r3, [sp, #104]	; 0x68
 8009d04:	4654      	mov	r4, sl
 8009d06:	2205      	movs	r2, #5
 8009d08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d0c:	4851      	ldr	r0, [pc, #324]	; (8009e54 <_svfiprintf_r+0x1ec>)
 8009d0e:	f7f6 fa77 	bl	8000200 <memchr>
 8009d12:	9a04      	ldr	r2, [sp, #16]
 8009d14:	b9d8      	cbnz	r0, 8009d4e <_svfiprintf_r+0xe6>
 8009d16:	06d0      	lsls	r0, r2, #27
 8009d18:	bf44      	itt	mi
 8009d1a:	2320      	movmi	r3, #32
 8009d1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d20:	0711      	lsls	r1, r2, #28
 8009d22:	bf44      	itt	mi
 8009d24:	232b      	movmi	r3, #43	; 0x2b
 8009d26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d2a:	f89a 3000 	ldrb.w	r3, [sl]
 8009d2e:	2b2a      	cmp	r3, #42	; 0x2a
 8009d30:	d015      	beq.n	8009d5e <_svfiprintf_r+0xf6>
 8009d32:	9a07      	ldr	r2, [sp, #28]
 8009d34:	4654      	mov	r4, sl
 8009d36:	2000      	movs	r0, #0
 8009d38:	f04f 0c0a 	mov.w	ip, #10
 8009d3c:	4621      	mov	r1, r4
 8009d3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009d42:	3b30      	subs	r3, #48	; 0x30
 8009d44:	2b09      	cmp	r3, #9
 8009d46:	d94e      	bls.n	8009de6 <_svfiprintf_r+0x17e>
 8009d48:	b1b0      	cbz	r0, 8009d78 <_svfiprintf_r+0x110>
 8009d4a:	9207      	str	r2, [sp, #28]
 8009d4c:	e014      	b.n	8009d78 <_svfiprintf_r+0x110>
 8009d4e:	eba0 0308 	sub.w	r3, r0, r8
 8009d52:	fa09 f303 	lsl.w	r3, r9, r3
 8009d56:	4313      	orrs	r3, r2
 8009d58:	9304      	str	r3, [sp, #16]
 8009d5a:	46a2      	mov	sl, r4
 8009d5c:	e7d2      	b.n	8009d04 <_svfiprintf_r+0x9c>
 8009d5e:	9b03      	ldr	r3, [sp, #12]
 8009d60:	1d19      	adds	r1, r3, #4
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	9103      	str	r1, [sp, #12]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	bfbb      	ittet	lt
 8009d6a:	425b      	neglt	r3, r3
 8009d6c:	f042 0202 	orrlt.w	r2, r2, #2
 8009d70:	9307      	strge	r3, [sp, #28]
 8009d72:	9307      	strlt	r3, [sp, #28]
 8009d74:	bfb8      	it	lt
 8009d76:	9204      	strlt	r2, [sp, #16]
 8009d78:	7823      	ldrb	r3, [r4, #0]
 8009d7a:	2b2e      	cmp	r3, #46	; 0x2e
 8009d7c:	d10c      	bne.n	8009d98 <_svfiprintf_r+0x130>
 8009d7e:	7863      	ldrb	r3, [r4, #1]
 8009d80:	2b2a      	cmp	r3, #42	; 0x2a
 8009d82:	d135      	bne.n	8009df0 <_svfiprintf_r+0x188>
 8009d84:	9b03      	ldr	r3, [sp, #12]
 8009d86:	1d1a      	adds	r2, r3, #4
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	9203      	str	r2, [sp, #12]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	bfb8      	it	lt
 8009d90:	f04f 33ff 	movlt.w	r3, #4294967295
 8009d94:	3402      	adds	r4, #2
 8009d96:	9305      	str	r3, [sp, #20]
 8009d98:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009e64 <_svfiprintf_r+0x1fc>
 8009d9c:	7821      	ldrb	r1, [r4, #0]
 8009d9e:	2203      	movs	r2, #3
 8009da0:	4650      	mov	r0, sl
 8009da2:	f7f6 fa2d 	bl	8000200 <memchr>
 8009da6:	b140      	cbz	r0, 8009dba <_svfiprintf_r+0x152>
 8009da8:	2340      	movs	r3, #64	; 0x40
 8009daa:	eba0 000a 	sub.w	r0, r0, sl
 8009dae:	fa03 f000 	lsl.w	r0, r3, r0
 8009db2:	9b04      	ldr	r3, [sp, #16]
 8009db4:	4303      	orrs	r3, r0
 8009db6:	3401      	adds	r4, #1
 8009db8:	9304      	str	r3, [sp, #16]
 8009dba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009dbe:	4826      	ldr	r0, [pc, #152]	; (8009e58 <_svfiprintf_r+0x1f0>)
 8009dc0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009dc4:	2206      	movs	r2, #6
 8009dc6:	f7f6 fa1b 	bl	8000200 <memchr>
 8009dca:	2800      	cmp	r0, #0
 8009dcc:	d038      	beq.n	8009e40 <_svfiprintf_r+0x1d8>
 8009dce:	4b23      	ldr	r3, [pc, #140]	; (8009e5c <_svfiprintf_r+0x1f4>)
 8009dd0:	bb1b      	cbnz	r3, 8009e1a <_svfiprintf_r+0x1b2>
 8009dd2:	9b03      	ldr	r3, [sp, #12]
 8009dd4:	3307      	adds	r3, #7
 8009dd6:	f023 0307 	bic.w	r3, r3, #7
 8009dda:	3308      	adds	r3, #8
 8009ddc:	9303      	str	r3, [sp, #12]
 8009dde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009de0:	4433      	add	r3, r6
 8009de2:	9309      	str	r3, [sp, #36]	; 0x24
 8009de4:	e767      	b.n	8009cb6 <_svfiprintf_r+0x4e>
 8009de6:	fb0c 3202 	mla	r2, ip, r2, r3
 8009dea:	460c      	mov	r4, r1
 8009dec:	2001      	movs	r0, #1
 8009dee:	e7a5      	b.n	8009d3c <_svfiprintf_r+0xd4>
 8009df0:	2300      	movs	r3, #0
 8009df2:	3401      	adds	r4, #1
 8009df4:	9305      	str	r3, [sp, #20]
 8009df6:	4619      	mov	r1, r3
 8009df8:	f04f 0c0a 	mov.w	ip, #10
 8009dfc:	4620      	mov	r0, r4
 8009dfe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e02:	3a30      	subs	r2, #48	; 0x30
 8009e04:	2a09      	cmp	r2, #9
 8009e06:	d903      	bls.n	8009e10 <_svfiprintf_r+0x1a8>
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d0c5      	beq.n	8009d98 <_svfiprintf_r+0x130>
 8009e0c:	9105      	str	r1, [sp, #20]
 8009e0e:	e7c3      	b.n	8009d98 <_svfiprintf_r+0x130>
 8009e10:	fb0c 2101 	mla	r1, ip, r1, r2
 8009e14:	4604      	mov	r4, r0
 8009e16:	2301      	movs	r3, #1
 8009e18:	e7f0      	b.n	8009dfc <_svfiprintf_r+0x194>
 8009e1a:	ab03      	add	r3, sp, #12
 8009e1c:	9300      	str	r3, [sp, #0]
 8009e1e:	462a      	mov	r2, r5
 8009e20:	4b0f      	ldr	r3, [pc, #60]	; (8009e60 <_svfiprintf_r+0x1f8>)
 8009e22:	a904      	add	r1, sp, #16
 8009e24:	4638      	mov	r0, r7
 8009e26:	f3af 8000 	nop.w
 8009e2a:	1c42      	adds	r2, r0, #1
 8009e2c:	4606      	mov	r6, r0
 8009e2e:	d1d6      	bne.n	8009dde <_svfiprintf_r+0x176>
 8009e30:	89ab      	ldrh	r3, [r5, #12]
 8009e32:	065b      	lsls	r3, r3, #25
 8009e34:	f53f af2c 	bmi.w	8009c90 <_svfiprintf_r+0x28>
 8009e38:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009e3a:	b01d      	add	sp, #116	; 0x74
 8009e3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e40:	ab03      	add	r3, sp, #12
 8009e42:	9300      	str	r3, [sp, #0]
 8009e44:	462a      	mov	r2, r5
 8009e46:	4b06      	ldr	r3, [pc, #24]	; (8009e60 <_svfiprintf_r+0x1f8>)
 8009e48:	a904      	add	r1, sp, #16
 8009e4a:	4638      	mov	r0, r7
 8009e4c:	f000 f9d4 	bl	800a1f8 <_printf_i>
 8009e50:	e7eb      	b.n	8009e2a <_svfiprintf_r+0x1c2>
 8009e52:	bf00      	nop
 8009e54:	0800a8e8 	.word	0x0800a8e8
 8009e58:	0800a8f2 	.word	0x0800a8f2
 8009e5c:	00000000 	.word	0x00000000
 8009e60:	08009bb1 	.word	0x08009bb1
 8009e64:	0800a8ee 	.word	0x0800a8ee

08009e68 <__sfputc_r>:
 8009e68:	6893      	ldr	r3, [r2, #8]
 8009e6a:	3b01      	subs	r3, #1
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	b410      	push	{r4}
 8009e70:	6093      	str	r3, [r2, #8]
 8009e72:	da08      	bge.n	8009e86 <__sfputc_r+0x1e>
 8009e74:	6994      	ldr	r4, [r2, #24]
 8009e76:	42a3      	cmp	r3, r4
 8009e78:	db01      	blt.n	8009e7e <__sfputc_r+0x16>
 8009e7a:	290a      	cmp	r1, #10
 8009e7c:	d103      	bne.n	8009e86 <__sfputc_r+0x1e>
 8009e7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009e82:	f7ff bb0d 	b.w	80094a0 <__swbuf_r>
 8009e86:	6813      	ldr	r3, [r2, #0]
 8009e88:	1c58      	adds	r0, r3, #1
 8009e8a:	6010      	str	r0, [r2, #0]
 8009e8c:	7019      	strb	r1, [r3, #0]
 8009e8e:	4608      	mov	r0, r1
 8009e90:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009e94:	4770      	bx	lr

08009e96 <__sfputs_r>:
 8009e96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e98:	4606      	mov	r6, r0
 8009e9a:	460f      	mov	r7, r1
 8009e9c:	4614      	mov	r4, r2
 8009e9e:	18d5      	adds	r5, r2, r3
 8009ea0:	42ac      	cmp	r4, r5
 8009ea2:	d101      	bne.n	8009ea8 <__sfputs_r+0x12>
 8009ea4:	2000      	movs	r0, #0
 8009ea6:	e007      	b.n	8009eb8 <__sfputs_r+0x22>
 8009ea8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009eac:	463a      	mov	r2, r7
 8009eae:	4630      	mov	r0, r6
 8009eb0:	f7ff ffda 	bl	8009e68 <__sfputc_r>
 8009eb4:	1c43      	adds	r3, r0, #1
 8009eb6:	d1f3      	bne.n	8009ea0 <__sfputs_r+0xa>
 8009eb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009ebc <_vfiprintf_r>:
 8009ebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ec0:	460d      	mov	r5, r1
 8009ec2:	b09d      	sub	sp, #116	; 0x74
 8009ec4:	4614      	mov	r4, r2
 8009ec6:	4698      	mov	r8, r3
 8009ec8:	4606      	mov	r6, r0
 8009eca:	b118      	cbz	r0, 8009ed4 <_vfiprintf_r+0x18>
 8009ecc:	6983      	ldr	r3, [r0, #24]
 8009ece:	b90b      	cbnz	r3, 8009ed4 <_vfiprintf_r+0x18>
 8009ed0:	f7ff fcc0 	bl	8009854 <__sinit>
 8009ed4:	4b89      	ldr	r3, [pc, #548]	; (800a0fc <_vfiprintf_r+0x240>)
 8009ed6:	429d      	cmp	r5, r3
 8009ed8:	d11b      	bne.n	8009f12 <_vfiprintf_r+0x56>
 8009eda:	6875      	ldr	r5, [r6, #4]
 8009edc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009ede:	07d9      	lsls	r1, r3, #31
 8009ee0:	d405      	bmi.n	8009eee <_vfiprintf_r+0x32>
 8009ee2:	89ab      	ldrh	r3, [r5, #12]
 8009ee4:	059a      	lsls	r2, r3, #22
 8009ee6:	d402      	bmi.n	8009eee <_vfiprintf_r+0x32>
 8009ee8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009eea:	f7ff fd51 	bl	8009990 <__retarget_lock_acquire_recursive>
 8009eee:	89ab      	ldrh	r3, [r5, #12]
 8009ef0:	071b      	lsls	r3, r3, #28
 8009ef2:	d501      	bpl.n	8009ef8 <_vfiprintf_r+0x3c>
 8009ef4:	692b      	ldr	r3, [r5, #16]
 8009ef6:	b9eb      	cbnz	r3, 8009f34 <_vfiprintf_r+0x78>
 8009ef8:	4629      	mov	r1, r5
 8009efa:	4630      	mov	r0, r6
 8009efc:	f7ff fb22 	bl	8009544 <__swsetup_r>
 8009f00:	b1c0      	cbz	r0, 8009f34 <_vfiprintf_r+0x78>
 8009f02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009f04:	07dc      	lsls	r4, r3, #31
 8009f06:	d50e      	bpl.n	8009f26 <_vfiprintf_r+0x6a>
 8009f08:	f04f 30ff 	mov.w	r0, #4294967295
 8009f0c:	b01d      	add	sp, #116	; 0x74
 8009f0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f12:	4b7b      	ldr	r3, [pc, #492]	; (800a100 <_vfiprintf_r+0x244>)
 8009f14:	429d      	cmp	r5, r3
 8009f16:	d101      	bne.n	8009f1c <_vfiprintf_r+0x60>
 8009f18:	68b5      	ldr	r5, [r6, #8]
 8009f1a:	e7df      	b.n	8009edc <_vfiprintf_r+0x20>
 8009f1c:	4b79      	ldr	r3, [pc, #484]	; (800a104 <_vfiprintf_r+0x248>)
 8009f1e:	429d      	cmp	r5, r3
 8009f20:	bf08      	it	eq
 8009f22:	68f5      	ldreq	r5, [r6, #12]
 8009f24:	e7da      	b.n	8009edc <_vfiprintf_r+0x20>
 8009f26:	89ab      	ldrh	r3, [r5, #12]
 8009f28:	0598      	lsls	r0, r3, #22
 8009f2a:	d4ed      	bmi.n	8009f08 <_vfiprintf_r+0x4c>
 8009f2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009f2e:	f7ff fd30 	bl	8009992 <__retarget_lock_release_recursive>
 8009f32:	e7e9      	b.n	8009f08 <_vfiprintf_r+0x4c>
 8009f34:	2300      	movs	r3, #0
 8009f36:	9309      	str	r3, [sp, #36]	; 0x24
 8009f38:	2320      	movs	r3, #32
 8009f3a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009f3e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009f42:	2330      	movs	r3, #48	; 0x30
 8009f44:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a108 <_vfiprintf_r+0x24c>
 8009f48:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009f4c:	f04f 0901 	mov.w	r9, #1
 8009f50:	4623      	mov	r3, r4
 8009f52:	469a      	mov	sl, r3
 8009f54:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f58:	b10a      	cbz	r2, 8009f5e <_vfiprintf_r+0xa2>
 8009f5a:	2a25      	cmp	r2, #37	; 0x25
 8009f5c:	d1f9      	bne.n	8009f52 <_vfiprintf_r+0x96>
 8009f5e:	ebba 0b04 	subs.w	fp, sl, r4
 8009f62:	d00b      	beq.n	8009f7c <_vfiprintf_r+0xc0>
 8009f64:	465b      	mov	r3, fp
 8009f66:	4622      	mov	r2, r4
 8009f68:	4629      	mov	r1, r5
 8009f6a:	4630      	mov	r0, r6
 8009f6c:	f7ff ff93 	bl	8009e96 <__sfputs_r>
 8009f70:	3001      	adds	r0, #1
 8009f72:	f000 80aa 	beq.w	800a0ca <_vfiprintf_r+0x20e>
 8009f76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f78:	445a      	add	r2, fp
 8009f7a:	9209      	str	r2, [sp, #36]	; 0x24
 8009f7c:	f89a 3000 	ldrb.w	r3, [sl]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	f000 80a2 	beq.w	800a0ca <_vfiprintf_r+0x20e>
 8009f86:	2300      	movs	r3, #0
 8009f88:	f04f 32ff 	mov.w	r2, #4294967295
 8009f8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009f90:	f10a 0a01 	add.w	sl, sl, #1
 8009f94:	9304      	str	r3, [sp, #16]
 8009f96:	9307      	str	r3, [sp, #28]
 8009f98:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009f9c:	931a      	str	r3, [sp, #104]	; 0x68
 8009f9e:	4654      	mov	r4, sl
 8009fa0:	2205      	movs	r2, #5
 8009fa2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fa6:	4858      	ldr	r0, [pc, #352]	; (800a108 <_vfiprintf_r+0x24c>)
 8009fa8:	f7f6 f92a 	bl	8000200 <memchr>
 8009fac:	9a04      	ldr	r2, [sp, #16]
 8009fae:	b9d8      	cbnz	r0, 8009fe8 <_vfiprintf_r+0x12c>
 8009fb0:	06d1      	lsls	r1, r2, #27
 8009fb2:	bf44      	itt	mi
 8009fb4:	2320      	movmi	r3, #32
 8009fb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009fba:	0713      	lsls	r3, r2, #28
 8009fbc:	bf44      	itt	mi
 8009fbe:	232b      	movmi	r3, #43	; 0x2b
 8009fc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009fc4:	f89a 3000 	ldrb.w	r3, [sl]
 8009fc8:	2b2a      	cmp	r3, #42	; 0x2a
 8009fca:	d015      	beq.n	8009ff8 <_vfiprintf_r+0x13c>
 8009fcc:	9a07      	ldr	r2, [sp, #28]
 8009fce:	4654      	mov	r4, sl
 8009fd0:	2000      	movs	r0, #0
 8009fd2:	f04f 0c0a 	mov.w	ip, #10
 8009fd6:	4621      	mov	r1, r4
 8009fd8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009fdc:	3b30      	subs	r3, #48	; 0x30
 8009fde:	2b09      	cmp	r3, #9
 8009fe0:	d94e      	bls.n	800a080 <_vfiprintf_r+0x1c4>
 8009fe2:	b1b0      	cbz	r0, 800a012 <_vfiprintf_r+0x156>
 8009fe4:	9207      	str	r2, [sp, #28]
 8009fe6:	e014      	b.n	800a012 <_vfiprintf_r+0x156>
 8009fe8:	eba0 0308 	sub.w	r3, r0, r8
 8009fec:	fa09 f303 	lsl.w	r3, r9, r3
 8009ff0:	4313      	orrs	r3, r2
 8009ff2:	9304      	str	r3, [sp, #16]
 8009ff4:	46a2      	mov	sl, r4
 8009ff6:	e7d2      	b.n	8009f9e <_vfiprintf_r+0xe2>
 8009ff8:	9b03      	ldr	r3, [sp, #12]
 8009ffa:	1d19      	adds	r1, r3, #4
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	9103      	str	r1, [sp, #12]
 800a000:	2b00      	cmp	r3, #0
 800a002:	bfbb      	ittet	lt
 800a004:	425b      	neglt	r3, r3
 800a006:	f042 0202 	orrlt.w	r2, r2, #2
 800a00a:	9307      	strge	r3, [sp, #28]
 800a00c:	9307      	strlt	r3, [sp, #28]
 800a00e:	bfb8      	it	lt
 800a010:	9204      	strlt	r2, [sp, #16]
 800a012:	7823      	ldrb	r3, [r4, #0]
 800a014:	2b2e      	cmp	r3, #46	; 0x2e
 800a016:	d10c      	bne.n	800a032 <_vfiprintf_r+0x176>
 800a018:	7863      	ldrb	r3, [r4, #1]
 800a01a:	2b2a      	cmp	r3, #42	; 0x2a
 800a01c:	d135      	bne.n	800a08a <_vfiprintf_r+0x1ce>
 800a01e:	9b03      	ldr	r3, [sp, #12]
 800a020:	1d1a      	adds	r2, r3, #4
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	9203      	str	r2, [sp, #12]
 800a026:	2b00      	cmp	r3, #0
 800a028:	bfb8      	it	lt
 800a02a:	f04f 33ff 	movlt.w	r3, #4294967295
 800a02e:	3402      	adds	r4, #2
 800a030:	9305      	str	r3, [sp, #20]
 800a032:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a118 <_vfiprintf_r+0x25c>
 800a036:	7821      	ldrb	r1, [r4, #0]
 800a038:	2203      	movs	r2, #3
 800a03a:	4650      	mov	r0, sl
 800a03c:	f7f6 f8e0 	bl	8000200 <memchr>
 800a040:	b140      	cbz	r0, 800a054 <_vfiprintf_r+0x198>
 800a042:	2340      	movs	r3, #64	; 0x40
 800a044:	eba0 000a 	sub.w	r0, r0, sl
 800a048:	fa03 f000 	lsl.w	r0, r3, r0
 800a04c:	9b04      	ldr	r3, [sp, #16]
 800a04e:	4303      	orrs	r3, r0
 800a050:	3401      	adds	r4, #1
 800a052:	9304      	str	r3, [sp, #16]
 800a054:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a058:	482c      	ldr	r0, [pc, #176]	; (800a10c <_vfiprintf_r+0x250>)
 800a05a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a05e:	2206      	movs	r2, #6
 800a060:	f7f6 f8ce 	bl	8000200 <memchr>
 800a064:	2800      	cmp	r0, #0
 800a066:	d03f      	beq.n	800a0e8 <_vfiprintf_r+0x22c>
 800a068:	4b29      	ldr	r3, [pc, #164]	; (800a110 <_vfiprintf_r+0x254>)
 800a06a:	bb1b      	cbnz	r3, 800a0b4 <_vfiprintf_r+0x1f8>
 800a06c:	9b03      	ldr	r3, [sp, #12]
 800a06e:	3307      	adds	r3, #7
 800a070:	f023 0307 	bic.w	r3, r3, #7
 800a074:	3308      	adds	r3, #8
 800a076:	9303      	str	r3, [sp, #12]
 800a078:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a07a:	443b      	add	r3, r7
 800a07c:	9309      	str	r3, [sp, #36]	; 0x24
 800a07e:	e767      	b.n	8009f50 <_vfiprintf_r+0x94>
 800a080:	fb0c 3202 	mla	r2, ip, r2, r3
 800a084:	460c      	mov	r4, r1
 800a086:	2001      	movs	r0, #1
 800a088:	e7a5      	b.n	8009fd6 <_vfiprintf_r+0x11a>
 800a08a:	2300      	movs	r3, #0
 800a08c:	3401      	adds	r4, #1
 800a08e:	9305      	str	r3, [sp, #20]
 800a090:	4619      	mov	r1, r3
 800a092:	f04f 0c0a 	mov.w	ip, #10
 800a096:	4620      	mov	r0, r4
 800a098:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a09c:	3a30      	subs	r2, #48	; 0x30
 800a09e:	2a09      	cmp	r2, #9
 800a0a0:	d903      	bls.n	800a0aa <_vfiprintf_r+0x1ee>
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d0c5      	beq.n	800a032 <_vfiprintf_r+0x176>
 800a0a6:	9105      	str	r1, [sp, #20]
 800a0a8:	e7c3      	b.n	800a032 <_vfiprintf_r+0x176>
 800a0aa:	fb0c 2101 	mla	r1, ip, r1, r2
 800a0ae:	4604      	mov	r4, r0
 800a0b0:	2301      	movs	r3, #1
 800a0b2:	e7f0      	b.n	800a096 <_vfiprintf_r+0x1da>
 800a0b4:	ab03      	add	r3, sp, #12
 800a0b6:	9300      	str	r3, [sp, #0]
 800a0b8:	462a      	mov	r2, r5
 800a0ba:	4b16      	ldr	r3, [pc, #88]	; (800a114 <_vfiprintf_r+0x258>)
 800a0bc:	a904      	add	r1, sp, #16
 800a0be:	4630      	mov	r0, r6
 800a0c0:	f3af 8000 	nop.w
 800a0c4:	4607      	mov	r7, r0
 800a0c6:	1c78      	adds	r0, r7, #1
 800a0c8:	d1d6      	bne.n	800a078 <_vfiprintf_r+0x1bc>
 800a0ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a0cc:	07d9      	lsls	r1, r3, #31
 800a0ce:	d405      	bmi.n	800a0dc <_vfiprintf_r+0x220>
 800a0d0:	89ab      	ldrh	r3, [r5, #12]
 800a0d2:	059a      	lsls	r2, r3, #22
 800a0d4:	d402      	bmi.n	800a0dc <_vfiprintf_r+0x220>
 800a0d6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a0d8:	f7ff fc5b 	bl	8009992 <__retarget_lock_release_recursive>
 800a0dc:	89ab      	ldrh	r3, [r5, #12]
 800a0de:	065b      	lsls	r3, r3, #25
 800a0e0:	f53f af12 	bmi.w	8009f08 <_vfiprintf_r+0x4c>
 800a0e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a0e6:	e711      	b.n	8009f0c <_vfiprintf_r+0x50>
 800a0e8:	ab03      	add	r3, sp, #12
 800a0ea:	9300      	str	r3, [sp, #0]
 800a0ec:	462a      	mov	r2, r5
 800a0ee:	4b09      	ldr	r3, [pc, #36]	; (800a114 <_vfiprintf_r+0x258>)
 800a0f0:	a904      	add	r1, sp, #16
 800a0f2:	4630      	mov	r0, r6
 800a0f4:	f000 f880 	bl	800a1f8 <_printf_i>
 800a0f8:	e7e4      	b.n	800a0c4 <_vfiprintf_r+0x208>
 800a0fa:	bf00      	nop
 800a0fc:	0800a8a8 	.word	0x0800a8a8
 800a100:	0800a8c8 	.word	0x0800a8c8
 800a104:	0800a888 	.word	0x0800a888
 800a108:	0800a8e8 	.word	0x0800a8e8
 800a10c:	0800a8f2 	.word	0x0800a8f2
 800a110:	00000000 	.word	0x00000000
 800a114:	08009e97 	.word	0x08009e97
 800a118:	0800a8ee 	.word	0x0800a8ee

0800a11c <_printf_common>:
 800a11c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a120:	4616      	mov	r6, r2
 800a122:	4699      	mov	r9, r3
 800a124:	688a      	ldr	r2, [r1, #8]
 800a126:	690b      	ldr	r3, [r1, #16]
 800a128:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a12c:	4293      	cmp	r3, r2
 800a12e:	bfb8      	it	lt
 800a130:	4613      	movlt	r3, r2
 800a132:	6033      	str	r3, [r6, #0]
 800a134:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a138:	4607      	mov	r7, r0
 800a13a:	460c      	mov	r4, r1
 800a13c:	b10a      	cbz	r2, 800a142 <_printf_common+0x26>
 800a13e:	3301      	adds	r3, #1
 800a140:	6033      	str	r3, [r6, #0]
 800a142:	6823      	ldr	r3, [r4, #0]
 800a144:	0699      	lsls	r1, r3, #26
 800a146:	bf42      	ittt	mi
 800a148:	6833      	ldrmi	r3, [r6, #0]
 800a14a:	3302      	addmi	r3, #2
 800a14c:	6033      	strmi	r3, [r6, #0]
 800a14e:	6825      	ldr	r5, [r4, #0]
 800a150:	f015 0506 	ands.w	r5, r5, #6
 800a154:	d106      	bne.n	800a164 <_printf_common+0x48>
 800a156:	f104 0a19 	add.w	sl, r4, #25
 800a15a:	68e3      	ldr	r3, [r4, #12]
 800a15c:	6832      	ldr	r2, [r6, #0]
 800a15e:	1a9b      	subs	r3, r3, r2
 800a160:	42ab      	cmp	r3, r5
 800a162:	dc26      	bgt.n	800a1b2 <_printf_common+0x96>
 800a164:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a168:	1e13      	subs	r3, r2, #0
 800a16a:	6822      	ldr	r2, [r4, #0]
 800a16c:	bf18      	it	ne
 800a16e:	2301      	movne	r3, #1
 800a170:	0692      	lsls	r2, r2, #26
 800a172:	d42b      	bmi.n	800a1cc <_printf_common+0xb0>
 800a174:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a178:	4649      	mov	r1, r9
 800a17a:	4638      	mov	r0, r7
 800a17c:	47c0      	blx	r8
 800a17e:	3001      	adds	r0, #1
 800a180:	d01e      	beq.n	800a1c0 <_printf_common+0xa4>
 800a182:	6823      	ldr	r3, [r4, #0]
 800a184:	68e5      	ldr	r5, [r4, #12]
 800a186:	6832      	ldr	r2, [r6, #0]
 800a188:	f003 0306 	and.w	r3, r3, #6
 800a18c:	2b04      	cmp	r3, #4
 800a18e:	bf08      	it	eq
 800a190:	1aad      	subeq	r5, r5, r2
 800a192:	68a3      	ldr	r3, [r4, #8]
 800a194:	6922      	ldr	r2, [r4, #16]
 800a196:	bf0c      	ite	eq
 800a198:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a19c:	2500      	movne	r5, #0
 800a19e:	4293      	cmp	r3, r2
 800a1a0:	bfc4      	itt	gt
 800a1a2:	1a9b      	subgt	r3, r3, r2
 800a1a4:	18ed      	addgt	r5, r5, r3
 800a1a6:	2600      	movs	r6, #0
 800a1a8:	341a      	adds	r4, #26
 800a1aa:	42b5      	cmp	r5, r6
 800a1ac:	d11a      	bne.n	800a1e4 <_printf_common+0xc8>
 800a1ae:	2000      	movs	r0, #0
 800a1b0:	e008      	b.n	800a1c4 <_printf_common+0xa8>
 800a1b2:	2301      	movs	r3, #1
 800a1b4:	4652      	mov	r2, sl
 800a1b6:	4649      	mov	r1, r9
 800a1b8:	4638      	mov	r0, r7
 800a1ba:	47c0      	blx	r8
 800a1bc:	3001      	adds	r0, #1
 800a1be:	d103      	bne.n	800a1c8 <_printf_common+0xac>
 800a1c0:	f04f 30ff 	mov.w	r0, #4294967295
 800a1c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1c8:	3501      	adds	r5, #1
 800a1ca:	e7c6      	b.n	800a15a <_printf_common+0x3e>
 800a1cc:	18e1      	adds	r1, r4, r3
 800a1ce:	1c5a      	adds	r2, r3, #1
 800a1d0:	2030      	movs	r0, #48	; 0x30
 800a1d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a1d6:	4422      	add	r2, r4
 800a1d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a1dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a1e0:	3302      	adds	r3, #2
 800a1e2:	e7c7      	b.n	800a174 <_printf_common+0x58>
 800a1e4:	2301      	movs	r3, #1
 800a1e6:	4622      	mov	r2, r4
 800a1e8:	4649      	mov	r1, r9
 800a1ea:	4638      	mov	r0, r7
 800a1ec:	47c0      	blx	r8
 800a1ee:	3001      	adds	r0, #1
 800a1f0:	d0e6      	beq.n	800a1c0 <_printf_common+0xa4>
 800a1f2:	3601      	adds	r6, #1
 800a1f4:	e7d9      	b.n	800a1aa <_printf_common+0x8e>
	...

0800a1f8 <_printf_i>:
 800a1f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a1fc:	460c      	mov	r4, r1
 800a1fe:	4691      	mov	r9, r2
 800a200:	7e27      	ldrb	r7, [r4, #24]
 800a202:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a204:	2f78      	cmp	r7, #120	; 0x78
 800a206:	4680      	mov	r8, r0
 800a208:	469a      	mov	sl, r3
 800a20a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a20e:	d807      	bhi.n	800a220 <_printf_i+0x28>
 800a210:	2f62      	cmp	r7, #98	; 0x62
 800a212:	d80a      	bhi.n	800a22a <_printf_i+0x32>
 800a214:	2f00      	cmp	r7, #0
 800a216:	f000 80d8 	beq.w	800a3ca <_printf_i+0x1d2>
 800a21a:	2f58      	cmp	r7, #88	; 0x58
 800a21c:	f000 80a3 	beq.w	800a366 <_printf_i+0x16e>
 800a220:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a224:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a228:	e03a      	b.n	800a2a0 <_printf_i+0xa8>
 800a22a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a22e:	2b15      	cmp	r3, #21
 800a230:	d8f6      	bhi.n	800a220 <_printf_i+0x28>
 800a232:	a001      	add	r0, pc, #4	; (adr r0, 800a238 <_printf_i+0x40>)
 800a234:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a238:	0800a291 	.word	0x0800a291
 800a23c:	0800a2a5 	.word	0x0800a2a5
 800a240:	0800a221 	.word	0x0800a221
 800a244:	0800a221 	.word	0x0800a221
 800a248:	0800a221 	.word	0x0800a221
 800a24c:	0800a221 	.word	0x0800a221
 800a250:	0800a2a5 	.word	0x0800a2a5
 800a254:	0800a221 	.word	0x0800a221
 800a258:	0800a221 	.word	0x0800a221
 800a25c:	0800a221 	.word	0x0800a221
 800a260:	0800a221 	.word	0x0800a221
 800a264:	0800a3b1 	.word	0x0800a3b1
 800a268:	0800a2d5 	.word	0x0800a2d5
 800a26c:	0800a393 	.word	0x0800a393
 800a270:	0800a221 	.word	0x0800a221
 800a274:	0800a221 	.word	0x0800a221
 800a278:	0800a3d3 	.word	0x0800a3d3
 800a27c:	0800a221 	.word	0x0800a221
 800a280:	0800a2d5 	.word	0x0800a2d5
 800a284:	0800a221 	.word	0x0800a221
 800a288:	0800a221 	.word	0x0800a221
 800a28c:	0800a39b 	.word	0x0800a39b
 800a290:	680b      	ldr	r3, [r1, #0]
 800a292:	1d1a      	adds	r2, r3, #4
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	600a      	str	r2, [r1, #0]
 800a298:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a29c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a2a0:	2301      	movs	r3, #1
 800a2a2:	e0a3      	b.n	800a3ec <_printf_i+0x1f4>
 800a2a4:	6825      	ldr	r5, [r4, #0]
 800a2a6:	6808      	ldr	r0, [r1, #0]
 800a2a8:	062e      	lsls	r6, r5, #24
 800a2aa:	f100 0304 	add.w	r3, r0, #4
 800a2ae:	d50a      	bpl.n	800a2c6 <_printf_i+0xce>
 800a2b0:	6805      	ldr	r5, [r0, #0]
 800a2b2:	600b      	str	r3, [r1, #0]
 800a2b4:	2d00      	cmp	r5, #0
 800a2b6:	da03      	bge.n	800a2c0 <_printf_i+0xc8>
 800a2b8:	232d      	movs	r3, #45	; 0x2d
 800a2ba:	426d      	negs	r5, r5
 800a2bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a2c0:	485e      	ldr	r0, [pc, #376]	; (800a43c <_printf_i+0x244>)
 800a2c2:	230a      	movs	r3, #10
 800a2c4:	e019      	b.n	800a2fa <_printf_i+0x102>
 800a2c6:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a2ca:	6805      	ldr	r5, [r0, #0]
 800a2cc:	600b      	str	r3, [r1, #0]
 800a2ce:	bf18      	it	ne
 800a2d0:	b22d      	sxthne	r5, r5
 800a2d2:	e7ef      	b.n	800a2b4 <_printf_i+0xbc>
 800a2d4:	680b      	ldr	r3, [r1, #0]
 800a2d6:	6825      	ldr	r5, [r4, #0]
 800a2d8:	1d18      	adds	r0, r3, #4
 800a2da:	6008      	str	r0, [r1, #0]
 800a2dc:	0628      	lsls	r0, r5, #24
 800a2de:	d501      	bpl.n	800a2e4 <_printf_i+0xec>
 800a2e0:	681d      	ldr	r5, [r3, #0]
 800a2e2:	e002      	b.n	800a2ea <_printf_i+0xf2>
 800a2e4:	0669      	lsls	r1, r5, #25
 800a2e6:	d5fb      	bpl.n	800a2e0 <_printf_i+0xe8>
 800a2e8:	881d      	ldrh	r5, [r3, #0]
 800a2ea:	4854      	ldr	r0, [pc, #336]	; (800a43c <_printf_i+0x244>)
 800a2ec:	2f6f      	cmp	r7, #111	; 0x6f
 800a2ee:	bf0c      	ite	eq
 800a2f0:	2308      	moveq	r3, #8
 800a2f2:	230a      	movne	r3, #10
 800a2f4:	2100      	movs	r1, #0
 800a2f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a2fa:	6866      	ldr	r6, [r4, #4]
 800a2fc:	60a6      	str	r6, [r4, #8]
 800a2fe:	2e00      	cmp	r6, #0
 800a300:	bfa2      	ittt	ge
 800a302:	6821      	ldrge	r1, [r4, #0]
 800a304:	f021 0104 	bicge.w	r1, r1, #4
 800a308:	6021      	strge	r1, [r4, #0]
 800a30a:	b90d      	cbnz	r5, 800a310 <_printf_i+0x118>
 800a30c:	2e00      	cmp	r6, #0
 800a30e:	d04d      	beq.n	800a3ac <_printf_i+0x1b4>
 800a310:	4616      	mov	r6, r2
 800a312:	fbb5 f1f3 	udiv	r1, r5, r3
 800a316:	fb03 5711 	mls	r7, r3, r1, r5
 800a31a:	5dc7      	ldrb	r7, [r0, r7]
 800a31c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a320:	462f      	mov	r7, r5
 800a322:	42bb      	cmp	r3, r7
 800a324:	460d      	mov	r5, r1
 800a326:	d9f4      	bls.n	800a312 <_printf_i+0x11a>
 800a328:	2b08      	cmp	r3, #8
 800a32a:	d10b      	bne.n	800a344 <_printf_i+0x14c>
 800a32c:	6823      	ldr	r3, [r4, #0]
 800a32e:	07df      	lsls	r7, r3, #31
 800a330:	d508      	bpl.n	800a344 <_printf_i+0x14c>
 800a332:	6923      	ldr	r3, [r4, #16]
 800a334:	6861      	ldr	r1, [r4, #4]
 800a336:	4299      	cmp	r1, r3
 800a338:	bfde      	ittt	le
 800a33a:	2330      	movle	r3, #48	; 0x30
 800a33c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a340:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a344:	1b92      	subs	r2, r2, r6
 800a346:	6122      	str	r2, [r4, #16]
 800a348:	f8cd a000 	str.w	sl, [sp]
 800a34c:	464b      	mov	r3, r9
 800a34e:	aa03      	add	r2, sp, #12
 800a350:	4621      	mov	r1, r4
 800a352:	4640      	mov	r0, r8
 800a354:	f7ff fee2 	bl	800a11c <_printf_common>
 800a358:	3001      	adds	r0, #1
 800a35a:	d14c      	bne.n	800a3f6 <_printf_i+0x1fe>
 800a35c:	f04f 30ff 	mov.w	r0, #4294967295
 800a360:	b004      	add	sp, #16
 800a362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a366:	4835      	ldr	r0, [pc, #212]	; (800a43c <_printf_i+0x244>)
 800a368:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a36c:	6823      	ldr	r3, [r4, #0]
 800a36e:	680e      	ldr	r6, [r1, #0]
 800a370:	061f      	lsls	r7, r3, #24
 800a372:	f856 5b04 	ldr.w	r5, [r6], #4
 800a376:	600e      	str	r6, [r1, #0]
 800a378:	d514      	bpl.n	800a3a4 <_printf_i+0x1ac>
 800a37a:	07d9      	lsls	r1, r3, #31
 800a37c:	bf44      	itt	mi
 800a37e:	f043 0320 	orrmi.w	r3, r3, #32
 800a382:	6023      	strmi	r3, [r4, #0]
 800a384:	b91d      	cbnz	r5, 800a38e <_printf_i+0x196>
 800a386:	6823      	ldr	r3, [r4, #0]
 800a388:	f023 0320 	bic.w	r3, r3, #32
 800a38c:	6023      	str	r3, [r4, #0]
 800a38e:	2310      	movs	r3, #16
 800a390:	e7b0      	b.n	800a2f4 <_printf_i+0xfc>
 800a392:	6823      	ldr	r3, [r4, #0]
 800a394:	f043 0320 	orr.w	r3, r3, #32
 800a398:	6023      	str	r3, [r4, #0]
 800a39a:	2378      	movs	r3, #120	; 0x78
 800a39c:	4828      	ldr	r0, [pc, #160]	; (800a440 <_printf_i+0x248>)
 800a39e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a3a2:	e7e3      	b.n	800a36c <_printf_i+0x174>
 800a3a4:	065e      	lsls	r6, r3, #25
 800a3a6:	bf48      	it	mi
 800a3a8:	b2ad      	uxthmi	r5, r5
 800a3aa:	e7e6      	b.n	800a37a <_printf_i+0x182>
 800a3ac:	4616      	mov	r6, r2
 800a3ae:	e7bb      	b.n	800a328 <_printf_i+0x130>
 800a3b0:	680b      	ldr	r3, [r1, #0]
 800a3b2:	6826      	ldr	r6, [r4, #0]
 800a3b4:	6960      	ldr	r0, [r4, #20]
 800a3b6:	1d1d      	adds	r5, r3, #4
 800a3b8:	600d      	str	r5, [r1, #0]
 800a3ba:	0635      	lsls	r5, r6, #24
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	d501      	bpl.n	800a3c4 <_printf_i+0x1cc>
 800a3c0:	6018      	str	r0, [r3, #0]
 800a3c2:	e002      	b.n	800a3ca <_printf_i+0x1d2>
 800a3c4:	0671      	lsls	r1, r6, #25
 800a3c6:	d5fb      	bpl.n	800a3c0 <_printf_i+0x1c8>
 800a3c8:	8018      	strh	r0, [r3, #0]
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	6123      	str	r3, [r4, #16]
 800a3ce:	4616      	mov	r6, r2
 800a3d0:	e7ba      	b.n	800a348 <_printf_i+0x150>
 800a3d2:	680b      	ldr	r3, [r1, #0]
 800a3d4:	1d1a      	adds	r2, r3, #4
 800a3d6:	600a      	str	r2, [r1, #0]
 800a3d8:	681e      	ldr	r6, [r3, #0]
 800a3da:	6862      	ldr	r2, [r4, #4]
 800a3dc:	2100      	movs	r1, #0
 800a3de:	4630      	mov	r0, r6
 800a3e0:	f7f5 ff0e 	bl	8000200 <memchr>
 800a3e4:	b108      	cbz	r0, 800a3ea <_printf_i+0x1f2>
 800a3e6:	1b80      	subs	r0, r0, r6
 800a3e8:	6060      	str	r0, [r4, #4]
 800a3ea:	6863      	ldr	r3, [r4, #4]
 800a3ec:	6123      	str	r3, [r4, #16]
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a3f4:	e7a8      	b.n	800a348 <_printf_i+0x150>
 800a3f6:	6923      	ldr	r3, [r4, #16]
 800a3f8:	4632      	mov	r2, r6
 800a3fa:	4649      	mov	r1, r9
 800a3fc:	4640      	mov	r0, r8
 800a3fe:	47d0      	blx	sl
 800a400:	3001      	adds	r0, #1
 800a402:	d0ab      	beq.n	800a35c <_printf_i+0x164>
 800a404:	6823      	ldr	r3, [r4, #0]
 800a406:	079b      	lsls	r3, r3, #30
 800a408:	d413      	bmi.n	800a432 <_printf_i+0x23a>
 800a40a:	68e0      	ldr	r0, [r4, #12]
 800a40c:	9b03      	ldr	r3, [sp, #12]
 800a40e:	4298      	cmp	r0, r3
 800a410:	bfb8      	it	lt
 800a412:	4618      	movlt	r0, r3
 800a414:	e7a4      	b.n	800a360 <_printf_i+0x168>
 800a416:	2301      	movs	r3, #1
 800a418:	4632      	mov	r2, r6
 800a41a:	4649      	mov	r1, r9
 800a41c:	4640      	mov	r0, r8
 800a41e:	47d0      	blx	sl
 800a420:	3001      	adds	r0, #1
 800a422:	d09b      	beq.n	800a35c <_printf_i+0x164>
 800a424:	3501      	adds	r5, #1
 800a426:	68e3      	ldr	r3, [r4, #12]
 800a428:	9903      	ldr	r1, [sp, #12]
 800a42a:	1a5b      	subs	r3, r3, r1
 800a42c:	42ab      	cmp	r3, r5
 800a42e:	dcf2      	bgt.n	800a416 <_printf_i+0x21e>
 800a430:	e7eb      	b.n	800a40a <_printf_i+0x212>
 800a432:	2500      	movs	r5, #0
 800a434:	f104 0619 	add.w	r6, r4, #25
 800a438:	e7f5      	b.n	800a426 <_printf_i+0x22e>
 800a43a:	bf00      	nop
 800a43c:	0800a8f9 	.word	0x0800a8f9
 800a440:	0800a90a 	.word	0x0800a90a

0800a444 <_sbrk_r>:
 800a444:	b538      	push	{r3, r4, r5, lr}
 800a446:	4d06      	ldr	r5, [pc, #24]	; (800a460 <_sbrk_r+0x1c>)
 800a448:	2300      	movs	r3, #0
 800a44a:	4604      	mov	r4, r0
 800a44c:	4608      	mov	r0, r1
 800a44e:	602b      	str	r3, [r5, #0]
 800a450:	f7f7 fc88 	bl	8001d64 <_sbrk>
 800a454:	1c43      	adds	r3, r0, #1
 800a456:	d102      	bne.n	800a45e <_sbrk_r+0x1a>
 800a458:	682b      	ldr	r3, [r5, #0]
 800a45a:	b103      	cbz	r3, 800a45e <_sbrk_r+0x1a>
 800a45c:	6023      	str	r3, [r4, #0]
 800a45e:	bd38      	pop	{r3, r4, r5, pc}
 800a460:	20004380 	.word	0x20004380

0800a464 <__sread>:
 800a464:	b510      	push	{r4, lr}
 800a466:	460c      	mov	r4, r1
 800a468:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a46c:	f000 f8ee 	bl	800a64c <_read_r>
 800a470:	2800      	cmp	r0, #0
 800a472:	bfab      	itete	ge
 800a474:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a476:	89a3      	ldrhlt	r3, [r4, #12]
 800a478:	181b      	addge	r3, r3, r0
 800a47a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a47e:	bfac      	ite	ge
 800a480:	6563      	strge	r3, [r4, #84]	; 0x54
 800a482:	81a3      	strhlt	r3, [r4, #12]
 800a484:	bd10      	pop	{r4, pc}

0800a486 <__swrite>:
 800a486:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a48a:	461f      	mov	r7, r3
 800a48c:	898b      	ldrh	r3, [r1, #12]
 800a48e:	05db      	lsls	r3, r3, #23
 800a490:	4605      	mov	r5, r0
 800a492:	460c      	mov	r4, r1
 800a494:	4616      	mov	r6, r2
 800a496:	d505      	bpl.n	800a4a4 <__swrite+0x1e>
 800a498:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a49c:	2302      	movs	r3, #2
 800a49e:	2200      	movs	r2, #0
 800a4a0:	f000 f868 	bl	800a574 <_lseek_r>
 800a4a4:	89a3      	ldrh	r3, [r4, #12]
 800a4a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a4aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a4ae:	81a3      	strh	r3, [r4, #12]
 800a4b0:	4632      	mov	r2, r6
 800a4b2:	463b      	mov	r3, r7
 800a4b4:	4628      	mov	r0, r5
 800a4b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a4ba:	f000 b817 	b.w	800a4ec <_write_r>

0800a4be <__sseek>:
 800a4be:	b510      	push	{r4, lr}
 800a4c0:	460c      	mov	r4, r1
 800a4c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4c6:	f000 f855 	bl	800a574 <_lseek_r>
 800a4ca:	1c43      	adds	r3, r0, #1
 800a4cc:	89a3      	ldrh	r3, [r4, #12]
 800a4ce:	bf15      	itete	ne
 800a4d0:	6560      	strne	r0, [r4, #84]	; 0x54
 800a4d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a4d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a4da:	81a3      	strheq	r3, [r4, #12]
 800a4dc:	bf18      	it	ne
 800a4de:	81a3      	strhne	r3, [r4, #12]
 800a4e0:	bd10      	pop	{r4, pc}

0800a4e2 <__sclose>:
 800a4e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4e6:	f000 b813 	b.w	800a510 <_close_r>
	...

0800a4ec <_write_r>:
 800a4ec:	b538      	push	{r3, r4, r5, lr}
 800a4ee:	4d07      	ldr	r5, [pc, #28]	; (800a50c <_write_r+0x20>)
 800a4f0:	4604      	mov	r4, r0
 800a4f2:	4608      	mov	r0, r1
 800a4f4:	4611      	mov	r1, r2
 800a4f6:	2200      	movs	r2, #0
 800a4f8:	602a      	str	r2, [r5, #0]
 800a4fa:	461a      	mov	r2, r3
 800a4fc:	f7f6 fd06 	bl	8000f0c <_write>
 800a500:	1c43      	adds	r3, r0, #1
 800a502:	d102      	bne.n	800a50a <_write_r+0x1e>
 800a504:	682b      	ldr	r3, [r5, #0]
 800a506:	b103      	cbz	r3, 800a50a <_write_r+0x1e>
 800a508:	6023      	str	r3, [r4, #0]
 800a50a:	bd38      	pop	{r3, r4, r5, pc}
 800a50c:	20004380 	.word	0x20004380

0800a510 <_close_r>:
 800a510:	b538      	push	{r3, r4, r5, lr}
 800a512:	4d06      	ldr	r5, [pc, #24]	; (800a52c <_close_r+0x1c>)
 800a514:	2300      	movs	r3, #0
 800a516:	4604      	mov	r4, r0
 800a518:	4608      	mov	r0, r1
 800a51a:	602b      	str	r3, [r5, #0]
 800a51c:	f7f7 fbed 	bl	8001cfa <_close>
 800a520:	1c43      	adds	r3, r0, #1
 800a522:	d102      	bne.n	800a52a <_close_r+0x1a>
 800a524:	682b      	ldr	r3, [r5, #0]
 800a526:	b103      	cbz	r3, 800a52a <_close_r+0x1a>
 800a528:	6023      	str	r3, [r4, #0]
 800a52a:	bd38      	pop	{r3, r4, r5, pc}
 800a52c:	20004380 	.word	0x20004380

0800a530 <_fstat_r>:
 800a530:	b538      	push	{r3, r4, r5, lr}
 800a532:	4d07      	ldr	r5, [pc, #28]	; (800a550 <_fstat_r+0x20>)
 800a534:	2300      	movs	r3, #0
 800a536:	4604      	mov	r4, r0
 800a538:	4608      	mov	r0, r1
 800a53a:	4611      	mov	r1, r2
 800a53c:	602b      	str	r3, [r5, #0]
 800a53e:	f7f7 fbe8 	bl	8001d12 <_fstat>
 800a542:	1c43      	adds	r3, r0, #1
 800a544:	d102      	bne.n	800a54c <_fstat_r+0x1c>
 800a546:	682b      	ldr	r3, [r5, #0]
 800a548:	b103      	cbz	r3, 800a54c <_fstat_r+0x1c>
 800a54a:	6023      	str	r3, [r4, #0]
 800a54c:	bd38      	pop	{r3, r4, r5, pc}
 800a54e:	bf00      	nop
 800a550:	20004380 	.word	0x20004380

0800a554 <_isatty_r>:
 800a554:	b538      	push	{r3, r4, r5, lr}
 800a556:	4d06      	ldr	r5, [pc, #24]	; (800a570 <_isatty_r+0x1c>)
 800a558:	2300      	movs	r3, #0
 800a55a:	4604      	mov	r4, r0
 800a55c:	4608      	mov	r0, r1
 800a55e:	602b      	str	r3, [r5, #0]
 800a560:	f7f7 fbe7 	bl	8001d32 <_isatty>
 800a564:	1c43      	adds	r3, r0, #1
 800a566:	d102      	bne.n	800a56e <_isatty_r+0x1a>
 800a568:	682b      	ldr	r3, [r5, #0]
 800a56a:	b103      	cbz	r3, 800a56e <_isatty_r+0x1a>
 800a56c:	6023      	str	r3, [r4, #0]
 800a56e:	bd38      	pop	{r3, r4, r5, pc}
 800a570:	20004380 	.word	0x20004380

0800a574 <_lseek_r>:
 800a574:	b538      	push	{r3, r4, r5, lr}
 800a576:	4d07      	ldr	r5, [pc, #28]	; (800a594 <_lseek_r+0x20>)
 800a578:	4604      	mov	r4, r0
 800a57a:	4608      	mov	r0, r1
 800a57c:	4611      	mov	r1, r2
 800a57e:	2200      	movs	r2, #0
 800a580:	602a      	str	r2, [r5, #0]
 800a582:	461a      	mov	r2, r3
 800a584:	f7f7 fbe0 	bl	8001d48 <_lseek>
 800a588:	1c43      	adds	r3, r0, #1
 800a58a:	d102      	bne.n	800a592 <_lseek_r+0x1e>
 800a58c:	682b      	ldr	r3, [r5, #0]
 800a58e:	b103      	cbz	r3, 800a592 <_lseek_r+0x1e>
 800a590:	6023      	str	r3, [r4, #0]
 800a592:	bd38      	pop	{r3, r4, r5, pc}
 800a594:	20004380 	.word	0x20004380

0800a598 <memcpy>:
 800a598:	440a      	add	r2, r1
 800a59a:	4291      	cmp	r1, r2
 800a59c:	f100 33ff 	add.w	r3, r0, #4294967295
 800a5a0:	d100      	bne.n	800a5a4 <memcpy+0xc>
 800a5a2:	4770      	bx	lr
 800a5a4:	b510      	push	{r4, lr}
 800a5a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a5aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a5ae:	4291      	cmp	r1, r2
 800a5b0:	d1f9      	bne.n	800a5a6 <memcpy+0xe>
 800a5b2:	bd10      	pop	{r4, pc}

0800a5b4 <memmove>:
 800a5b4:	4288      	cmp	r0, r1
 800a5b6:	b510      	push	{r4, lr}
 800a5b8:	eb01 0402 	add.w	r4, r1, r2
 800a5bc:	d902      	bls.n	800a5c4 <memmove+0x10>
 800a5be:	4284      	cmp	r4, r0
 800a5c0:	4623      	mov	r3, r4
 800a5c2:	d807      	bhi.n	800a5d4 <memmove+0x20>
 800a5c4:	1e43      	subs	r3, r0, #1
 800a5c6:	42a1      	cmp	r1, r4
 800a5c8:	d008      	beq.n	800a5dc <memmove+0x28>
 800a5ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a5ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a5d2:	e7f8      	b.n	800a5c6 <memmove+0x12>
 800a5d4:	4402      	add	r2, r0
 800a5d6:	4601      	mov	r1, r0
 800a5d8:	428a      	cmp	r2, r1
 800a5da:	d100      	bne.n	800a5de <memmove+0x2a>
 800a5dc:	bd10      	pop	{r4, pc}
 800a5de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a5e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a5e6:	e7f7      	b.n	800a5d8 <memmove+0x24>

0800a5e8 <__malloc_lock>:
 800a5e8:	4801      	ldr	r0, [pc, #4]	; (800a5f0 <__malloc_lock+0x8>)
 800a5ea:	f7ff b9d1 	b.w	8009990 <__retarget_lock_acquire_recursive>
 800a5ee:	bf00      	nop
 800a5f0:	20004378 	.word	0x20004378

0800a5f4 <__malloc_unlock>:
 800a5f4:	4801      	ldr	r0, [pc, #4]	; (800a5fc <__malloc_unlock+0x8>)
 800a5f6:	f7ff b9cc 	b.w	8009992 <__retarget_lock_release_recursive>
 800a5fa:	bf00      	nop
 800a5fc:	20004378 	.word	0x20004378

0800a600 <_realloc_r>:
 800a600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a602:	4607      	mov	r7, r0
 800a604:	4614      	mov	r4, r2
 800a606:	460e      	mov	r6, r1
 800a608:	b921      	cbnz	r1, 800a614 <_realloc_r+0x14>
 800a60a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a60e:	4611      	mov	r1, r2
 800a610:	f7ff ba74 	b.w	8009afc <_malloc_r>
 800a614:	b922      	cbnz	r2, 800a620 <_realloc_r+0x20>
 800a616:	f7ff fa21 	bl	8009a5c <_free_r>
 800a61a:	4625      	mov	r5, r4
 800a61c:	4628      	mov	r0, r5
 800a61e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a620:	f000 f826 	bl	800a670 <_malloc_usable_size_r>
 800a624:	42a0      	cmp	r0, r4
 800a626:	d20f      	bcs.n	800a648 <_realloc_r+0x48>
 800a628:	4621      	mov	r1, r4
 800a62a:	4638      	mov	r0, r7
 800a62c:	f7ff fa66 	bl	8009afc <_malloc_r>
 800a630:	4605      	mov	r5, r0
 800a632:	2800      	cmp	r0, #0
 800a634:	d0f2      	beq.n	800a61c <_realloc_r+0x1c>
 800a636:	4631      	mov	r1, r6
 800a638:	4622      	mov	r2, r4
 800a63a:	f7ff ffad 	bl	800a598 <memcpy>
 800a63e:	4631      	mov	r1, r6
 800a640:	4638      	mov	r0, r7
 800a642:	f7ff fa0b 	bl	8009a5c <_free_r>
 800a646:	e7e9      	b.n	800a61c <_realloc_r+0x1c>
 800a648:	4635      	mov	r5, r6
 800a64a:	e7e7      	b.n	800a61c <_realloc_r+0x1c>

0800a64c <_read_r>:
 800a64c:	b538      	push	{r3, r4, r5, lr}
 800a64e:	4d07      	ldr	r5, [pc, #28]	; (800a66c <_read_r+0x20>)
 800a650:	4604      	mov	r4, r0
 800a652:	4608      	mov	r0, r1
 800a654:	4611      	mov	r1, r2
 800a656:	2200      	movs	r2, #0
 800a658:	602a      	str	r2, [r5, #0]
 800a65a:	461a      	mov	r2, r3
 800a65c:	f7f7 fb30 	bl	8001cc0 <_read>
 800a660:	1c43      	adds	r3, r0, #1
 800a662:	d102      	bne.n	800a66a <_read_r+0x1e>
 800a664:	682b      	ldr	r3, [r5, #0]
 800a666:	b103      	cbz	r3, 800a66a <_read_r+0x1e>
 800a668:	6023      	str	r3, [r4, #0]
 800a66a:	bd38      	pop	{r3, r4, r5, pc}
 800a66c:	20004380 	.word	0x20004380

0800a670 <_malloc_usable_size_r>:
 800a670:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a674:	1f18      	subs	r0, r3, #4
 800a676:	2b00      	cmp	r3, #0
 800a678:	bfbc      	itt	lt
 800a67a:	580b      	ldrlt	r3, [r1, r0]
 800a67c:	18c0      	addlt	r0, r0, r3
 800a67e:	4770      	bx	lr

0800a680 <_init>:
 800a680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a682:	bf00      	nop
 800a684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a686:	bc08      	pop	{r3}
 800a688:	469e      	mov	lr, r3
 800a68a:	4770      	bx	lr

0800a68c <_fini>:
 800a68c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a68e:	bf00      	nop
 800a690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a692:	bc08      	pop	{r3}
 800a694:	469e      	mov	lr, r3
 800a696:	4770      	bx	lr
